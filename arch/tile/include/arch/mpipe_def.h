/*
 * Copyright 2013 Tilera Corporation. All Rights Reserved.
 *
 *   This program is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU General Public License
 *   as published by the Free Software Foundation, version 2.
 *
 *   This program is distributed in the hope that it will be useful, but
 *   WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or
 *   NON INFRINGEMENT.  See the GNU General Public License for
 *   more details.
 */

#ifndef __ARCH_MPIPE_DEF_H__
#define __ARCH_MPIPE_DEF_H__

#ifdef __ASSEMBLER__
#define _64bit(x) x
#else /* __ASSEMBLER__ */
#ifdef __tile__
#define _64bit(x) x ## UL
#else /* __tile__ */
#define _64bit(x) x ## ULL
#endif /* __tile__ */
#endif /* __ASSEMBLER */





/*
 * MMIO Address Space.
 * The MMIO physical address space for the MPIPE is described below.  This is
 * a general description of the MMIO space as opposed to a register
 * description
 */
#define MPIPE_MMIO_ADDR__FIRST_WORD 0x0000
#define MPIPE_MMIO_ADDR__LAST_WORD 0xfffffffff8

#define MPIPE_MMIO_ADDR__OFFSET_SHIFT 0
#define MPIPE_MMIO_ADDR__OFFSET_WIDTH 26
#define MPIPE_MMIO_ADDR__OFFSET_RESET_VAL 0
#define MPIPE_MMIO_ADDR__OFFSET_RMASK 0x3ffffff
#define MPIPE_MMIO_ADDR__OFFSET_MASK  0x3ffffff
#define MPIPE_MMIO_ADDR__OFFSET_FIELD 0,25

#define MPIPE_MMIO_ADDR__REGION_SHIFT 26
#define MPIPE_MMIO_ADDR__REGION_WIDTH 3
#define MPIPE_MMIO_ADDR__REGION_RESET_VAL 0
#define MPIPE_MMIO_ADDR__REGION_RMASK 0x7
#define MPIPE_MMIO_ADDR__REGION_MASK  0x1c000000
#define MPIPE_MMIO_ADDR__REGION_FIELD 26,28
#define MPIPE_MMIO_ADDR__REGION_VAL_CFG 0x0
#define MPIPE_MMIO_ADDR__REGION_VAL_IDMA 0x4
#define MPIPE_MMIO_ADDR__REGION_VAL_EDMA 0x5
#define MPIPE_MMIO_ADDR__REGION_VAL_BSM 0x6

#define MPIPE_MMIO_ADDR__SVC_DOM_SHIFT 35
#define MPIPE_MMIO_ADDR__SVC_DOM_WIDTH 5
#define MPIPE_MMIO_ADDR__SVC_DOM_RESET_VAL 0
#define MPIPE_MMIO_ADDR__SVC_DOM_RMASK 0x1f
#define MPIPE_MMIO_ADDR__SVC_DOM_MASK  _64bit(0xf800000000)
#define MPIPE_MMIO_ADDR__SVC_DOM_FIELD 35,39


/*
 * MMIO Configuration Region Address.
 * This is a description of config address space.  Accesses to configuration
 * space should use an address of this form and a value like that specified
 * in CFG_REGION_VAL.
 */
#define MPIPE_CFG_REGION_ADDR__FIRST_WORD 0x0000
#define MPIPE_CFG_REGION_ADDR__LAST_WORD 0x3ffff8

#define MPIPE_CFG_REGION_ADDR__REG_SHIFT 0
#define MPIPE_CFG_REGION_ADDR__REG_WIDTH 16
#define MPIPE_CFG_REGION_ADDR__REG_RESET_VAL 0
#define MPIPE_CFG_REGION_ADDR__REG_RMASK 0xffff
#define MPIPE_CFG_REGION_ADDR__REG_MASK  0xffff
#define MPIPE_CFG_REGION_ADDR__REG_FIELD 0,15

#define MPIPE_CFG_REGION_ADDR__MAC_SEL_SHIFT 16
#define MPIPE_CFG_REGION_ADDR__MAC_SEL_WIDTH 5
#define MPIPE_CFG_REGION_ADDR__MAC_SEL_RESET_VAL 0
#define MPIPE_CFG_REGION_ADDR__MAC_SEL_RMASK 0x1f
#define MPIPE_CFG_REGION_ADDR__MAC_SEL_MASK  0x1f0000
#define MPIPE_CFG_REGION_ADDR__MAC_SEL_FIELD 16,20

#define MPIPE_CFG_REGION_ADDR__INTFC_SHIFT 21
#define MPIPE_CFG_REGION_ADDR__INTFC_WIDTH 1
#define MPIPE_CFG_REGION_ADDR__INTFC_RESET_VAL 0
#define MPIPE_CFG_REGION_ADDR__INTFC_RMASK 0x1
#define MPIPE_CFG_REGION_ADDR__INTFC_MASK  0x200000
#define MPIPE_CFG_REGION_ADDR__INTFC_FIELD 21,21
#define MPIPE_CFG_REGION_ADDR__INTFC_VAL_MPIPE 0x0
#define MPIPE_CFG_REGION_ADDR__INTFC_VAL_MAC 0x1

#define MPIPE_CFG_REGION_ADDR__REGION_SHIFT 26
#define MPIPE_CFG_REGION_ADDR__REGION_WIDTH 3
#define MPIPE_CFG_REGION_ADDR__REGION_RESET_VAL 0
#define MPIPE_CFG_REGION_ADDR__REGION_RMASK 0x7
#define MPIPE_CFG_REGION_ADDR__REGION_MASK  0x1c000000
#define MPIPE_CFG_REGION_ADDR__REGION_FIELD 26,28

#define MPIPE_CFG_REGION_ADDR__SVC_DOM_SHIFT 35
#define MPIPE_CFG_REGION_ADDR__SVC_DOM_WIDTH 5
#define MPIPE_CFG_REGION_ADDR__SVC_DOM_RESET_VAL 0
#define MPIPE_CFG_REGION_ADDR__SVC_DOM_RMASK 0x1f
#define MPIPE_CFG_REGION_ADDR__SVC_DOM_MASK  _64bit(0xf800000000)
#define MPIPE_CFG_REGION_ADDR__SVC_DOM_FIELD 35,39


/*
 * MMIO Configuration Region Value.
 * A value written to an address of the form CFG_REGION_ADDR.  Specific
 * registers provide particular bitfields described by the other declarations
 * in this file.
 */
#define MPIPE_CFG_REGION_VAL__FIRST_WORD 0x0000
#define MPIPE_CFG_REGION_VAL__LAST_WORD 0x3ffff8

#define MPIPE_CFG_REGION_VAL__DATA_SHIFT 0
#define MPIPE_CFG_REGION_VAL__DATA_WIDTH 64
#define MPIPE_CFG_REGION_VAL__DATA_RESET_VAL 0
#define MPIPE_CFG_REGION_VAL__DATA_RMASK _64bit(0xffffffffffffffff)
#define MPIPE_CFG_REGION_VAL__DATA_MASK  _64bit(0xffffffffffffffff)
#define MPIPE_CFG_REGION_VAL__DATA_FIELD 0,63


/*
 * MMIO Ingress DMA Release Region Address.
 * This is a description of the physical addresses used to manipulate ingress
 * credit counters.  Accesses to this address space should use an address of
 * this form and a value like that specified in IDMA_RELEASE_REGION_VAL.
 */
#define MPIPE_IDMA_RELEASE_REGION_ADDR__FIRST_WORD 0x10000000
#define MPIPE_IDMA_RELEASE_REGION_ADDR__LAST_WORD 0x13fffff8

#define MPIPE_IDMA_RELEASE_REGION_ADDR__RING_SHIFT 3
#define MPIPE_IDMA_RELEASE_REGION_ADDR__RING_WIDTH 8
#define MPIPE_IDMA_RELEASE_REGION_ADDR__RING_RESET_VAL 0
#define MPIPE_IDMA_RELEASE_REGION_ADDR__RING_RMASK 0xff
#define MPIPE_IDMA_RELEASE_REGION_ADDR__RING_MASK  0x7f8
#define MPIPE_IDMA_RELEASE_REGION_ADDR__RING_FIELD 3,10

#define MPIPE_IDMA_RELEASE_REGION_ADDR__BUCKET_SHIFT 11
#define MPIPE_IDMA_RELEASE_REGION_ADDR__BUCKET_WIDTH 13
#define MPIPE_IDMA_RELEASE_REGION_ADDR__BUCKET_RESET_VAL 0
#define MPIPE_IDMA_RELEASE_REGION_ADDR__BUCKET_RMASK 0x1fff
#define MPIPE_IDMA_RELEASE_REGION_ADDR__BUCKET_MASK  0xfff800
#define MPIPE_IDMA_RELEASE_REGION_ADDR__BUCKET_FIELD 11,23

#define MPIPE_IDMA_RELEASE_REGION_ADDR__RING_ENABLE_SHIFT 24
#define MPIPE_IDMA_RELEASE_REGION_ADDR__RING_ENABLE_WIDTH 1
#define MPIPE_IDMA_RELEASE_REGION_ADDR__RING_ENABLE_RESET_VAL 0
#define MPIPE_IDMA_RELEASE_REGION_ADDR__RING_ENABLE_RMASK 0x1
#define MPIPE_IDMA_RELEASE_REGION_ADDR__RING_ENABLE_MASK  0x1000000
#define MPIPE_IDMA_RELEASE_REGION_ADDR__RING_ENABLE_FIELD 24,24

#define MPIPE_IDMA_RELEASE_REGION_ADDR__BUCKET_ENABLE_SHIFT 25
#define MPIPE_IDMA_RELEASE_REGION_ADDR__BUCKET_ENABLE_WIDTH 1
#define MPIPE_IDMA_RELEASE_REGION_ADDR__BUCKET_ENABLE_RESET_VAL 0
#define MPIPE_IDMA_RELEASE_REGION_ADDR__BUCKET_ENABLE_RMASK 0x1
#define MPIPE_IDMA_RELEASE_REGION_ADDR__BUCKET_ENABLE_MASK  0x2000000
#define MPIPE_IDMA_RELEASE_REGION_ADDR__BUCKET_ENABLE_FIELD 25,25

#define MPIPE_IDMA_RELEASE_REGION_ADDR__REGION_SHIFT 26
#define MPIPE_IDMA_RELEASE_REGION_ADDR__REGION_WIDTH 3
#define MPIPE_IDMA_RELEASE_REGION_ADDR__REGION_RESET_VAL 0
#define MPIPE_IDMA_RELEASE_REGION_ADDR__REGION_RMASK 0x7
#define MPIPE_IDMA_RELEASE_REGION_ADDR__REGION_MASK  0x1c000000
#define MPIPE_IDMA_RELEASE_REGION_ADDR__REGION_FIELD 26,28

#define MPIPE_IDMA_RELEASE_REGION_ADDR__SVC_DOM_SHIFT 35
#define MPIPE_IDMA_RELEASE_REGION_ADDR__SVC_DOM_WIDTH 5
#define MPIPE_IDMA_RELEASE_REGION_ADDR__SVC_DOM_RESET_VAL 0
#define MPIPE_IDMA_RELEASE_REGION_ADDR__SVC_DOM_RMASK 0x1f
#define MPIPE_IDMA_RELEASE_REGION_ADDR__SVC_DOM_MASK  _64bit(0xf800000000)
#define MPIPE_IDMA_RELEASE_REGION_ADDR__SVC_DOM_FIELD 35,39


/*
 * MMIO Ingress DMA Release Region Value - Release NotifRing and/or Bucket.
 * Provides release of the associated NotifRing.  The address of the MMIO
 * operation is described in IDMA_RELEASE_REGION_ADDR.
 */
#define MPIPE_IDMA_RELEASE_REGION_VAL__FIRST_WORD 0x10000000
#define MPIPE_IDMA_RELEASE_REGION_VAL__LAST_WORD 0x13fffff8

#define MPIPE_IDMA_RELEASE_REGION_VAL__COUNT_SHIFT 0
#define MPIPE_IDMA_RELEASE_REGION_VAL__COUNT_WIDTH 16
#define MPIPE_IDMA_RELEASE_REGION_VAL__COUNT_RESET_VAL 0
#define MPIPE_IDMA_RELEASE_REGION_VAL__COUNT_RMASK 0xffff
#define MPIPE_IDMA_RELEASE_REGION_VAL__COUNT_MASK  0xffff
#define MPIPE_IDMA_RELEASE_REGION_VAL__COUNT_FIELD 0,15


/*
 * MMIO Buffer Stack Manager Region Address.
 * This MMIO region is used for posting or fetching buffers to/from the
 * buffer stack manager.  On an MMIO load, this pops a buffer descriptor from
 * the top of stack if one is available.  On an MMIO store, this pushes a
 * buffer to the stack.  The value read or written is described in
 * BSM_REGION_VAL.
 */
#define MPIPE_BSM_REGION_ADDR__FIRST_WORD 0x18000000
#define MPIPE_BSM_REGION_ADDR__LAST_WORD 0x1bfffff8

#define MPIPE_BSM_REGION_ADDR__STACK_SHIFT 3
#define MPIPE_BSM_REGION_ADDR__STACK_WIDTH 5
#define MPIPE_BSM_REGION_ADDR__STACK_RESET_VAL 0
#define MPIPE_BSM_REGION_ADDR__STACK_RMASK 0x1f
#define MPIPE_BSM_REGION_ADDR__STACK_MASK  0xf8
#define MPIPE_BSM_REGION_ADDR__STACK_FIELD 3,7

#define MPIPE_BSM_REGION_ADDR__REGION_SHIFT 26
#define MPIPE_BSM_REGION_ADDR__REGION_WIDTH 3
#define MPIPE_BSM_REGION_ADDR__REGION_RESET_VAL 0
#define MPIPE_BSM_REGION_ADDR__REGION_RMASK 0x7
#define MPIPE_BSM_REGION_ADDR__REGION_MASK  0x1c000000
#define MPIPE_BSM_REGION_ADDR__REGION_FIELD 26,28

#define MPIPE_BSM_REGION_ADDR__SVC_DOM_SHIFT 35
#define MPIPE_BSM_REGION_ADDR__SVC_DOM_WIDTH 5
#define MPIPE_BSM_REGION_ADDR__SVC_DOM_RESET_VAL 0
#define MPIPE_BSM_REGION_ADDR__SVC_DOM_RMASK 0x1f
#define MPIPE_BSM_REGION_ADDR__SVC_DOM_MASK  _64bit(0xf800000000)
#define MPIPE_BSM_REGION_ADDR__SVC_DOM_FIELD 35,39


/*
 * MMIO Buffer Stack Manager Region Value.
 * This MMIO region is used for posting or fetching buffers to/from the
 * buffer stack manager.  On an MMIO load, this pops a buffer descriptor from
 * the top of stack if one is available. On an MMIO store, this pushes a
 * buffer to the stack.  The address of the MMIO operation is described in
 * BSM_REGION_ADDR.
 */
#define MPIPE_BSM_REGION_VAL__FIRST_WORD 0x18000000
#define MPIPE_BSM_REGION_VAL__LAST_WORD 0x1bfffff8

#define MPIPE_BSM_REGION_VAL__VA_SHIFT 7
#define MPIPE_BSM_REGION_VAL__VA_WIDTH 35
#define MPIPE_BSM_REGION_VAL__VA_RESET_VAL 0
#define MPIPE_BSM_REGION_VAL__VA_RMASK _64bit(0x7ffffffff)
#define MPIPE_BSM_REGION_VAL__VA_MASK  _64bit(0x3ffffffff80)
#define MPIPE_BSM_REGION_VAL__VA_FIELD 7,41

#define MPIPE_BSM_REGION_VAL__STACK_IDX_SHIFT 48
#define MPIPE_BSM_REGION_VAL__STACK_IDX_WIDTH 5
#define MPIPE_BSM_REGION_VAL__STACK_IDX_RESET_VAL 0
#define MPIPE_BSM_REGION_VAL__STACK_IDX_RMASK 0x1f
#define MPIPE_BSM_REGION_VAL__STACK_IDX_MASK  _64bit(0x1f000000000000)
#define MPIPE_BSM_REGION_VAL__STACK_IDX_FIELD 48,52

#define MPIPE_BSM_REGION_VAL__INST_SHIFT 56
#define MPIPE_BSM_REGION_VAL__INST_WIDTH 2
#define MPIPE_BSM_REGION_VAL__INST_RESET_VAL 0
#define MPIPE_BSM_REGION_VAL__INST_RMASK 0x3
#define MPIPE_BSM_REGION_VAL__INST_MASK  _64bit(0x300000000000000)
#define MPIPE_BSM_REGION_VAL__INST_FIELD 56,57

#define MPIPE_BSM_REGION_VAL__HWB_SHIFT 58
#define MPIPE_BSM_REGION_VAL__HWB_WIDTH 1
#define MPIPE_BSM_REGION_VAL__HWB_RESET_VAL 1
#define MPIPE_BSM_REGION_VAL__HWB_RMASK 0x1
#define MPIPE_BSM_REGION_VAL__HWB_MASK  _64bit(0x400000000000000)
#define MPIPE_BSM_REGION_VAL__HWB_FIELD 58,58

#define MPIPE_BSM_REGION_VAL__SIZE_SHIFT 59
#define MPIPE_BSM_REGION_VAL__SIZE_WIDTH 3
#define MPIPE_BSM_REGION_VAL__SIZE_RESET_VAL 0
#define MPIPE_BSM_REGION_VAL__SIZE_RMASK 0x7
#define MPIPE_BSM_REGION_VAL__SIZE_MASK  _64bit(0x3800000000000000)
#define MPIPE_BSM_REGION_VAL__SIZE_FIELD 59,61

#define MPIPE_BSM_REGION_VAL__C_SHIFT 62
#define MPIPE_BSM_REGION_VAL__C_WIDTH 2
#define MPIPE_BSM_REGION_VAL__C_RESET_VAL 0
#define MPIPE_BSM_REGION_VAL__C_RMASK 0x3
#define MPIPE_BSM_REGION_VAL__C_MASK  _64bit(0xc000000000000000)
#define MPIPE_BSM_REGION_VAL__C_FIELD 62,63


/*
 * MMIO Egress DMA Post Region Address.
 * Used to post descriptor locations to the eDMA descriptor engine.  The
 * value to be written is described in EDMA_POST_REGION_VAL
 */
#define MPIPE_EDMA_POST_REGION_ADDR__FIRST_WORD 0x14000000
#define MPIPE_EDMA_POST_REGION_ADDR__LAST_WORD 0x17fffff8

#define MPIPE_EDMA_POST_REGION_ADDR__RING_SHIFT 3
#define MPIPE_EDMA_POST_REGION_ADDR__RING_WIDTH 6
#define MPIPE_EDMA_POST_REGION_ADDR__RING_RESET_VAL 0
#define MPIPE_EDMA_POST_REGION_ADDR__RING_RMASK 0x3f
#define MPIPE_EDMA_POST_REGION_ADDR__RING_MASK  0x1f8
#define MPIPE_EDMA_POST_REGION_ADDR__RING_FIELD 3,8

#define MPIPE_EDMA_POST_REGION_ADDR__REGION_SHIFT 26
#define MPIPE_EDMA_POST_REGION_ADDR__REGION_WIDTH 3
#define MPIPE_EDMA_POST_REGION_ADDR__REGION_RESET_VAL 0
#define MPIPE_EDMA_POST_REGION_ADDR__REGION_RMASK 0x7
#define MPIPE_EDMA_POST_REGION_ADDR__REGION_MASK  0x1c000000
#define MPIPE_EDMA_POST_REGION_ADDR__REGION_FIELD 26,28

#define MPIPE_EDMA_POST_REGION_ADDR__SVC_DOM_SHIFT 35
#define MPIPE_EDMA_POST_REGION_ADDR__SVC_DOM_WIDTH 5
#define MPIPE_EDMA_POST_REGION_ADDR__SVC_DOM_RESET_VAL 0
#define MPIPE_EDMA_POST_REGION_ADDR__SVC_DOM_RMASK 0x1f
#define MPIPE_EDMA_POST_REGION_ADDR__SVC_DOM_MASK  _64bit(0xf800000000)
#define MPIPE_EDMA_POST_REGION_ADDR__SVC_DOM_FIELD 35,39


/*
 * MMIO Egress DMA Post Region Value.
 * Used to post descriptor locations to the eDMA descriptor engine.  The
 * address is described in EDMA_POST_REGION_ADDR.
 */
#define MPIPE_EDMA_POST_REGION_VAL__FIRST_WORD 0x14000000
#define MPIPE_EDMA_POST_REGION_VAL__LAST_WORD 0x17fffff8

#define MPIPE_EDMA_POST_REGION_VAL__RING_IDX_SHIFT 0
#define MPIPE_EDMA_POST_REGION_VAL__RING_IDX_WIDTH 16
#define MPIPE_EDMA_POST_REGION_VAL__RING_IDX_RESET_VAL 0
#define MPIPE_EDMA_POST_REGION_VAL__RING_IDX_RMASK 0xffff
#define MPIPE_EDMA_POST_REGION_VAL__RING_IDX_MASK  0xffff
#define MPIPE_EDMA_POST_REGION_VAL__RING_IDX_FIELD 0,15

#define MPIPE_EDMA_POST_REGION_VAL__COUNT_SHIFT 16
#define MPIPE_EDMA_POST_REGION_VAL__COUNT_WIDTH 16
#define MPIPE_EDMA_POST_REGION_VAL__COUNT_RESET_VAL 0
#define MPIPE_EDMA_POST_REGION_VAL__COUNT_RMASK 0xffff
#define MPIPE_EDMA_POST_REGION_VAL__COUNT_MASK  0xffff0000
#define MPIPE_EDMA_POST_REGION_VAL__COUNT_FIELD 16,31

#define MPIPE_EDMA_POST_REGION_VAL__GEN_SHIFT 32
#define MPIPE_EDMA_POST_REGION_VAL__GEN_WIDTH 1
#define MPIPE_EDMA_POST_REGION_VAL__GEN_RESET_VAL 0
#define MPIPE_EDMA_POST_REGION_VAL__GEN_RMASK 0x1
#define MPIPE_EDMA_POST_REGION_VAL__GEN_MASK  _64bit(0x100000000)
#define MPIPE_EDMA_POST_REGION_VAL__GEN_FIELD 32,32


/*
 * Buffer Stack Manager Control.
 * Configuration parameters for the buffer stack manager
 */
#define MPIPE_BSM_CTL 0x2200

#define MPIPE_BSM_CTL__LWM_SHIFT 0
#define MPIPE_BSM_CTL__LWM_WIDTH 7
#define MPIPE_BSM_CTL__LWM_RESET_VAL 18
#define MPIPE_BSM_CTL__LWM_RMASK 0x7f
#define MPIPE_BSM_CTL__LWM_MASK  0x7f
#define MPIPE_BSM_CTL__LWM_FIELD 0,6

#define MPIPE_BSM_CTL__MAX_REQ_SHIFT 8
#define MPIPE_BSM_CTL__MAX_REQ_WIDTH 8
#define MPIPE_BSM_CTL__MAX_REQ_RESET_VAL 64
#define MPIPE_BSM_CTL__MAX_REQ_RMASK 0xff
#define MPIPE_BSM_CTL__MAX_REQ_MASK  0xff00
#define MPIPE_BSM_CTL__MAX_REQ_FIELD 8,15

#define MPIPE_BSM_CTL__INT_LWM_SHIFT 32
#define MPIPE_BSM_CTL__INT_LWM_WIDTH 16
#define MPIPE_BSM_CTL__INT_LWM_RESET_VAL 100
#define MPIPE_BSM_CTL__INT_LWM_RMASK 0xffff
#define MPIPE_BSM_CTL__INT_LWM_MASK  _64bit(0xffff00000000)
#define MPIPE_BSM_CTL__INT_LWM_FIELD 32,47


/*
 * Buffer Stack Manager Init Control.
 * Initialization control for the buffer stack manager.
 */
#define MPIPE_BSM_INIT_CTL 0x2210

#define MPIPE_BSM_INIT_CTL__REG_SHIFT 0
#define MPIPE_BSM_INIT_CTL__REG_WIDTH 1
#define MPIPE_BSM_INIT_CTL__REG_RESET_VAL 0
#define MPIPE_BSM_INIT_CTL__REG_RMASK 0x1
#define MPIPE_BSM_INIT_CTL__REG_MASK  0x1
#define MPIPE_BSM_INIT_CTL__REG_FIELD 0,0

#define MPIPE_BSM_INIT_CTL__STACK_IDX_SHIFT 1
#define MPIPE_BSM_INIT_CTL__STACK_IDX_WIDTH 5
#define MPIPE_BSM_INIT_CTL__STACK_IDX_RESET_VAL 0
#define MPIPE_BSM_INIT_CTL__STACK_IDX_RMASK 0x1f
#define MPIPE_BSM_INIT_CTL__STACK_IDX_MASK  0x3e
#define MPIPE_BSM_INIT_CTL__STACK_IDX_FIELD 1,5


/*
 * Buffer Stack Manager Init Data.
 * Read/Write data for buffer stack manager initialization (VA translations
 * and stack locations)
 */
#define MPIPE_BSM_INIT_DAT 0x2218

#define MPIPE_BSM_INIT_DAT__DAT_SHIFT 0
#define MPIPE_BSM_INIT_DAT__DAT_WIDTH 64
#define MPIPE_BSM_INIT_DAT__DAT_RESET_VAL 0
#define MPIPE_BSM_INIT_DAT__DAT_RMASK _64bit(0xffffffffffffffff)
#define MPIPE_BSM_INIT_DAT__DAT_MASK  _64bit(0xffffffffffffffff)
#define MPIPE_BSM_INIT_DAT__DAT_FIELD 0,63


/*
 * Buffer Stack Manager Init Data 0.
 * Read/Write data for buffer stack manager initialization (VA translations
 * and stack locations)
 */
#define MPIPE_BSM_INIT_DAT_0 0x2218

#define MPIPE_BSM_INIT_DAT_0__LIM_SHIFT 0
#define MPIPE_BSM_INIT_DAT_0__LIM_WIDTH 32
#define MPIPE_BSM_INIT_DAT_0__LIM_RESET_VAL 0
#define MPIPE_BSM_INIT_DAT_0__LIM_RMASK 0xffffffff
#define MPIPE_BSM_INIT_DAT_0__LIM_MASK  0xffffffff
#define MPIPE_BSM_INIT_DAT_0__LIM_FIELD 0,31

#define MPIPE_BSM_INIT_DAT_0__TOS_IDX_SHIFT 32
#define MPIPE_BSM_INIT_DAT_0__TOS_IDX_WIDTH 32
#define MPIPE_BSM_INIT_DAT_0__TOS_IDX_RESET_VAL 0
#define MPIPE_BSM_INIT_DAT_0__TOS_IDX_RMASK 0xffffffff
#define MPIPE_BSM_INIT_DAT_0__TOS_IDX_MASK  _64bit(0xffffffff00000000)
#define MPIPE_BSM_INIT_DAT_0__TOS_IDX_FIELD 32,63


/*
 * Buffer Stack Manager Init Data 1.
 * Read/Write data for buffer stack manager initialization (VA translations
 * and stack locations)
 */
#define MPIPE_BSM_INIT_DAT_1 0x2218

#define MPIPE_BSM_INIT_DAT_1__BASE_SHIFT 0
#define MPIPE_BSM_INIT_DAT_1__BASE_WIDTH 24
#define MPIPE_BSM_INIT_DAT_1__BASE_RESET_VAL 0
#define MPIPE_BSM_INIT_DAT_1__BASE_RMASK 0xffffff
#define MPIPE_BSM_INIT_DAT_1__BASE_MASK  0xffffff
#define MPIPE_BSM_INIT_DAT_1__BASE_FIELD 0,23

#define MPIPE_BSM_INIT_DAT_1__HFH_SHIFT 24
#define MPIPE_BSM_INIT_DAT_1__HFH_WIDTH 1
#define MPIPE_BSM_INIT_DAT_1__HFH_RESET_VAL 0
#define MPIPE_BSM_INIT_DAT_1__HFH_RMASK 0x1
#define MPIPE_BSM_INIT_DAT_1__HFH_MASK  0x1000000
#define MPIPE_BSM_INIT_DAT_1__HFH_FIELD 24,24

#define MPIPE_BSM_INIT_DAT_1__NT_HINT_SHIFT 25
#define MPIPE_BSM_INIT_DAT_1__NT_HINT_WIDTH 1
#define MPIPE_BSM_INIT_DAT_1__NT_HINT_RESET_VAL 0
#define MPIPE_BSM_INIT_DAT_1__NT_HINT_RMASK 0x1
#define MPIPE_BSM_INIT_DAT_1__NT_HINT_MASK  0x2000000
#define MPIPE_BSM_INIT_DAT_1__NT_HINT_FIELD 25,25

#define MPIPE_BSM_INIT_DAT_1__PIN_SHIFT 26
#define MPIPE_BSM_INIT_DAT_1__PIN_WIDTH 1
#define MPIPE_BSM_INIT_DAT_1__PIN_RMASK 0x1
#define MPIPE_BSM_INIT_DAT_1__PIN_MASK  0x4000000
#define MPIPE_BSM_INIT_DAT_1__PIN_FIELD 26,26

#define MPIPE_BSM_INIT_DAT_1__TILE_ID_SHIFT 27
#define MPIPE_BSM_INIT_DAT_1__TILE_ID_WIDTH 8
#define MPIPE_BSM_INIT_DAT_1__TILE_ID_RESET_VAL 0
#define MPIPE_BSM_INIT_DAT_1__TILE_ID_RMASK 0xff
#define MPIPE_BSM_INIT_DAT_1__TILE_ID_MASK  _64bit(0x7f8000000)
#define MPIPE_BSM_INIT_DAT_1__TILE_ID_FIELD 27,34

#define MPIPE_BSM_INIT_DAT_1__SIZE_SHIFT 35
#define MPIPE_BSM_INIT_DAT_1__SIZE_WIDTH 3
#define MPIPE_BSM_INIT_DAT_1__SIZE_RESET_VAL 0
#define MPIPE_BSM_INIT_DAT_1__SIZE_RMASK 0x7
#define MPIPE_BSM_INIT_DAT_1__SIZE_MASK  _64bit(0x3800000000)
#define MPIPE_BSM_INIT_DAT_1__SIZE_FIELD 35,37
#define MPIPE_BSM_INIT_DAT_1__SIZE_VAL_BSZ_128 0x0
#define MPIPE_BSM_INIT_DAT_1__SIZE_VAL_BSZ_256 0x1
#define MPIPE_BSM_INIT_DAT_1__SIZE_VAL_BSZ_512 0x2
#define MPIPE_BSM_INIT_DAT_1__SIZE_VAL_BSZ_1024 0x3
#define MPIPE_BSM_INIT_DAT_1__SIZE_VAL_BSZ_1664 0x4
#define MPIPE_BSM_INIT_DAT_1__SIZE_VAL_BSZ_4096 0x5
#define MPIPE_BSM_INIT_DAT_1__SIZE_VAL_BSZ_10368 0x6
#define MPIPE_BSM_INIT_DAT_1__SIZE_VAL_BSZ_16384 0x7

#define MPIPE_BSM_INIT_DAT_1__ENABLE_SHIFT 38
#define MPIPE_BSM_INIT_DAT_1__ENABLE_WIDTH 1
#define MPIPE_BSM_INIT_DAT_1__ENABLE_RESET_VAL 0
#define MPIPE_BSM_INIT_DAT_1__ENABLE_RMASK 0x1
#define MPIPE_BSM_INIT_DAT_1__ENABLE_MASK  _64bit(0x4000000000)
#define MPIPE_BSM_INIT_DAT_1__ENABLE_FIELD 38,38

#define MPIPE_BSM_INIT_DAT_1__DRAIN_SHIFT 39
#define MPIPE_BSM_INIT_DAT_1__DRAIN_WIDTH 1
#define MPIPE_BSM_INIT_DAT_1__DRAIN_RESET_VAL 0
#define MPIPE_BSM_INIT_DAT_1__DRAIN_RMASK 0x1
#define MPIPE_BSM_INIT_DAT_1__DRAIN_MASK  _64bit(0x8000000000)
#define MPIPE_BSM_INIT_DAT_1__DRAIN_FIELD 39,39


/*
 * BSM Status.
 * BSM status
 */
#define MPIPE_BSM_STS 0x2208

#define MPIPE_BSM_STS__STACK_OVFL_IDX_SHIFT 0
#define MPIPE_BSM_STS__STACK_OVFL_IDX_WIDTH 5
#define MPIPE_BSM_STS__STACK_OVFL_IDX_RESET_VAL 0
#define MPIPE_BSM_STS__STACK_OVFL_IDX_RMASK 0x1f
#define MPIPE_BSM_STS__STACK_OVFL_IDX_MASK  0x1f
#define MPIPE_BSM_STS__STACK_OVFL_IDX_FIELD 0,4


/* Clock Count. */
#define MPIPE_CLOCK_COUNT 0x0038

#define MPIPE_CLOCK_COUNT__RUN_SHIFT 0
#define MPIPE_CLOCK_COUNT__RUN_WIDTH 1
#define MPIPE_CLOCK_COUNT__RUN_RESET_VAL 0
#define MPIPE_CLOCK_COUNT__RUN_RMASK 0x1
#define MPIPE_CLOCK_COUNT__RUN_MASK  0x1
#define MPIPE_CLOCK_COUNT__RUN_FIELD 0,0

#define MPIPE_CLOCK_COUNT__COUNT_SHIFT 1
#define MPIPE_CLOCK_COUNT__COUNT_WIDTH 15
#define MPIPE_CLOCK_COUNT__COUNT_RESET_VAL 0
#define MPIPE_CLOCK_COUNT__COUNT_RMASK 0x7fff
#define MPIPE_CLOCK_COUNT__COUNT_MASK  0xfffe
#define MPIPE_CLOCK_COUNT__COUNT_FIELD 1,15


/*
 * Classifier Control.
 * Control information for the classifiers
 */
#define MPIPE_CLS_CTL 0x2018

#define MPIPE_CLS_CTL__RAND_MODE_SHIFT 0
#define MPIPE_CLS_CTL__RAND_MODE_WIDTH 16
#define MPIPE_CLS_CTL__RAND_MODE_RESET_VAL 0
#define MPIPE_CLS_CTL__RAND_MODE_RMASK 0xffff
#define MPIPE_CLS_CTL__RAND_MODE_MASK  0xffff
#define MPIPE_CLS_CTL__RAND_MODE_FIELD 0,15

#define MPIPE_CLS_CTL__DEFAULT_DEST_SHIFT 16
#define MPIPE_CLS_CTL__DEFAULT_DEST_WIDTH 2
#define MPIPE_CLS_CTL__DEFAULT_DEST_RESET_VAL 0
#define MPIPE_CLS_CTL__DEFAULT_DEST_RMASK 0x3
#define MPIPE_CLS_CTL__DEFAULT_DEST_MASK  0x30000
#define MPIPE_CLS_CTL__DEFAULT_DEST_FIELD 16,17
#define MPIPE_CLS_CTL__DEFAULT_DEST_VAL_DROP_ALL 0x0
#define MPIPE_CLS_CTL__DEFAULT_DEST_VAL_DROP_NORMAL 0x1
#define MPIPE_CLS_CTL__DEFAULT_DEST_VAL_DROP_PKT 0x2

#define MPIPE_CLS_CTL__DEFAULT_NR_SHIFT 18
#define MPIPE_CLS_CTL__DEFAULT_NR_WIDTH 8
#define MPIPE_CLS_CTL__DEFAULT_NR_RESET_VAL 0
#define MPIPE_CLS_CTL__DEFAULT_NR_RMASK 0xff
#define MPIPE_CLS_CTL__DEFAULT_NR_MASK  0x3fc0000
#define MPIPE_CLS_CTL__DEFAULT_NR_FIELD 18,25

#define MPIPE_CLS_CTL__DEFAULT_STACK_SHIFT 26
#define MPIPE_CLS_CTL__DEFAULT_STACK_WIDTH 5
#define MPIPE_CLS_CTL__DEFAULT_STACK_RESET_VAL 0
#define MPIPE_CLS_CTL__DEFAULT_STACK_RMASK 0x1f
#define MPIPE_CLS_CTL__DEFAULT_STACK_MASK  0x7c000000
#define MPIPE_CLS_CTL__DEFAULT_STACK_FIELD 26,30

#define MPIPE_CLS_CTL__BUDGET_MULT_SHIFT 32
#define MPIPE_CLS_CTL__BUDGET_MULT_WIDTH 10
#define MPIPE_CLS_CTL__BUDGET_MULT_RESET_VAL 393
#define MPIPE_CLS_CTL__BUDGET_MULT_RMASK 0x3ff
#define MPIPE_CLS_CTL__BUDGET_MULT_MASK  _64bit(0x3ff00000000)
#define MPIPE_CLS_CTL__BUDGET_MULT_FIELD 32,41

#define MPIPE_CLS_CTL__BUDGET_OVHD_SHIFT 44
#define MPIPE_CLS_CTL__BUDGET_OVHD_WIDTH 6
#define MPIPE_CLS_CTL__BUDGET_OVHD_RESET_VAL 24
#define MPIPE_CLS_CTL__BUDGET_OVHD_RMASK 0x3f
#define MPIPE_CLS_CTL__BUDGET_OVHD_MASK  _64bit(0x3f00000000000)
#define MPIPE_CLS_CTL__BUDGET_OVHD_FIELD 44,49

#define MPIPE_CLS_CTL__BUDGET_ADJ_SHIFT 50
#define MPIPE_CLS_CTL__BUDGET_ADJ_WIDTH 5
#define MPIPE_CLS_CTL__BUDGET_ADJ_RESET_VAL 29
#define MPIPE_CLS_CTL__BUDGET_ADJ_RMASK 0x1f
#define MPIPE_CLS_CTL__BUDGET_ADJ_MASK  _64bit(0x7c000000000000)
#define MPIPE_CLS_CTL__BUDGET_ADJ_FIELD 50,54

#define MPIPE_CLS_CTL__BUDGET_MIN_SHIFT 56
#define MPIPE_CLS_CTL__BUDGET_MIN_WIDTH 6
#define MPIPE_CLS_CTL__BUDGET_MIN_RESET_VAL 60
#define MPIPE_CLS_CTL__BUDGET_MIN_RMASK 0x3f
#define MPIPE_CLS_CTL__BUDGET_MIN_MASK  _64bit(0x3f00000000000000)
#define MPIPE_CLS_CTL__BUDGET_MIN_FIELD 56,61

#define MPIPE_CLS_CTL__FENCE_SHIFT 63
#define MPIPE_CLS_CTL__FENCE_WIDTH 1
#define MPIPE_CLS_CTL__FENCE_RESET_VAL 0
#define MPIPE_CLS_CTL__FENCE_RMASK 0x1
#define MPIPE_CLS_CTL__FENCE_MASK  _64bit(0x8000000000000000)
#define MPIPE_CLS_CTL__FENCE_FIELD 63,63


/*
 * Classifier Enable and Configuration Control.
 * Enable bits and program control for the classifiers
 */
#define MPIPE_CLS_ENABLE 0x2010

#define MPIPE_CLS_ENABLE__ENABLE_SHIFT 0
#define MPIPE_CLS_ENABLE__ENABLE_WIDTH 16
#define MPIPE_CLS_ENABLE__ENABLE_RESET_VAL 0
#define MPIPE_CLS_ENABLE__ENABLE_RMASK 0xffff
#define MPIPE_CLS_ENABLE__ENABLE_MASK  0xffff
#define MPIPE_CLS_ENABLE__ENABLE_FIELD 0,15

#define MPIPE_CLS_ENABLE__DISABLE_SHIFT 16
#define MPIPE_CLS_ENABLE__DISABLE_WIDTH 16
#define MPIPE_CLS_ENABLE__DISABLE_RESET_VAL 0
#define MPIPE_CLS_ENABLE__DISABLE_RMASK 0xffff
#define MPIPE_CLS_ENABLE__DISABLE_MASK  0xffff0000
#define MPIPE_CLS_ENABLE__DISABLE_FIELD 16,31

#define MPIPE_CLS_ENABLE__FLASH_SHIFT 32
#define MPIPE_CLS_ENABLE__FLASH_WIDTH 16
#define MPIPE_CLS_ENABLE__FLASH_RESET_VAL 0
#define MPIPE_CLS_ENABLE__FLASH_RMASK 0xffff
#define MPIPE_CLS_ENABLE__FLASH_MASK  _64bit(0xffff00000000)
#define MPIPE_CLS_ENABLE__FLASH_FIELD 32,47

#define MPIPE_CLS_ENABLE__PGM_PND_SHIFT 48
#define MPIPE_CLS_ENABLE__PGM_PND_WIDTH 1
#define MPIPE_CLS_ENABLE__PGM_PND_RESET_VAL 0
#define MPIPE_CLS_ENABLE__PGM_PND_RMASK 0x1
#define MPIPE_CLS_ENABLE__PGM_PND_MASK  _64bit(0x1000000000000)
#define MPIPE_CLS_ENABLE__PGM_PND_FIELD 48,48


/*
 * Classifier Init Control.
 * Initialization control for the classifier data structures
 * (instruction-memory, table, registers)
 */
#define MPIPE_CLS_INIT_CTL 0x2000

#define MPIPE_CLS_INIT_CTL__CLS_SEL_SHIFT 0
#define MPIPE_CLS_INIT_CTL__CLS_SEL_WIDTH 16
#define MPIPE_CLS_INIT_CTL__CLS_SEL_RESET_VAL 0
#define MPIPE_CLS_INIT_CTL__CLS_SEL_RMASK 0xffff
#define MPIPE_CLS_INIT_CTL__CLS_SEL_MASK  0xffff
#define MPIPE_CLS_INIT_CTL__CLS_SEL_FIELD 0,15

#define MPIPE_CLS_INIT_CTL__IDX_SHIFT 32
#define MPIPE_CLS_INIT_CTL__IDX_WIDTH 12
#define MPIPE_CLS_INIT_CTL__IDX_RESET_VAL 0
#define MPIPE_CLS_INIT_CTL__IDX_RMASK 0xfff
#define MPIPE_CLS_INIT_CTL__IDX_MASK  _64bit(0xfff00000000)
#define MPIPE_CLS_INIT_CTL__IDX_FIELD 32,43

#define MPIPE_CLS_INIT_CTL__STRUCT_SEL_SHIFT 44
#define MPIPE_CLS_INIT_CTL__STRUCT_SEL_WIDTH 3
#define MPIPE_CLS_INIT_CTL__STRUCT_SEL_RESET_VAL 0
#define MPIPE_CLS_INIT_CTL__STRUCT_SEL_RMASK 0x7
#define MPIPE_CLS_INIT_CTL__STRUCT_SEL_MASK  _64bit(0x700000000000)
#define MPIPE_CLS_INIT_CTL__STRUCT_SEL_FIELD 44,46
#define MPIPE_CLS_INIT_CTL__STRUCT_SEL_VAL_INST_MEM 0x0
#define MPIPE_CLS_INIT_CTL__STRUCT_SEL_VAL_TBL 0x1
#define MPIPE_CLS_INIT_CTL__STRUCT_SEL_VAL_REGS 0x2
#define MPIPE_CLS_INIT_CTL__STRUCT_SEL_VAL_SPR 0x3
#define MPIPE_CLS_INIT_CTL__STRUCT_SEL_VAL_PGMR 0x4


/*
 * Classifier Init Data.
 * Write data for classifier initialization (instruction-memory, table,
 * registers).  Note that the classifier instruction-memory, table, and
 * register structures are write-only.
 */
#define MPIPE_CLS_INIT_WDAT 0x2008

#define MPIPE_CLS_INIT_WDAT__WDAT_SHIFT 0
#define MPIPE_CLS_INIT_WDAT__WDAT_WIDTH 32
#define MPIPE_CLS_INIT_WDAT__WDAT_RESET_VAL 0
#define MPIPE_CLS_INIT_WDAT__WDAT_RMASK 0xffffffff
#define MPIPE_CLS_INIT_WDAT__WDAT_MASK  0xffffffff
#define MPIPE_CLS_INIT_WDAT__WDAT_FIELD 0,31


/*
 * Classifier Init Data: Blast Command.
 * The blast programmer writes a series of 'records' for classifier
 * initialization.  Each record starts with this header, followed by some
 * number of data words.  The use of this structure is described in the mPIPE
 * specification.
 */
#define MPIPE_CLS_INIT_WDAT_BLAST_RECORD_FORMAT 0x2008

#define MPIPE_CLS_INIT_WDAT_BLAST_RECORD_FORMAT__DATA_COUNT_SHIFT 0
#define MPIPE_CLS_INIT_WDAT_BLAST_RECORD_FORMAT__DATA_COUNT_WIDTH 11
#define MPIPE_CLS_INIT_WDAT_BLAST_RECORD_FORMAT__DATA_COUNT_RESET_VAL 0
#define MPIPE_CLS_INIT_WDAT_BLAST_RECORD_FORMAT__DATA_COUNT_RMASK 0x7ff
#define MPIPE_CLS_INIT_WDAT_BLAST_RECORD_FORMAT__DATA_COUNT_MASK  0x7ff
#define MPIPE_CLS_INIT_WDAT_BLAST_RECORD_FORMAT__DATA_COUNT_FIELD 0,10

#define MPIPE_CLS_INIT_WDAT_BLAST_RECORD_FORMAT__START_INDEX_SHIFT 11
#define MPIPE_CLS_INIT_WDAT_BLAST_RECORD_FORMAT__START_INDEX_WIDTH 11
#define MPIPE_CLS_INIT_WDAT_BLAST_RECORD_FORMAT__START_INDEX_RESET_VAL 0
#define MPIPE_CLS_INIT_WDAT_BLAST_RECORD_FORMAT__START_INDEX_RMASK 0x7ff
#define MPIPE_CLS_INIT_WDAT_BLAST_RECORD_FORMAT__START_INDEX_MASK  0x3ff800
#define MPIPE_CLS_INIT_WDAT_BLAST_RECORD_FORMAT__START_INDEX_FIELD 11,21

#define MPIPE_CLS_INIT_WDAT_BLAST_RECORD_FORMAT__SEL_SHIFT 22
#define MPIPE_CLS_INIT_WDAT_BLAST_RECORD_FORMAT__SEL_WIDTH 2
#define MPIPE_CLS_INIT_WDAT_BLAST_RECORD_FORMAT__SEL_RESET_VAL 0
#define MPIPE_CLS_INIT_WDAT_BLAST_RECORD_FORMAT__SEL_RMASK 0x3
#define MPIPE_CLS_INIT_WDAT_BLAST_RECORD_FORMAT__SEL_MASK  0xc00000
#define MPIPE_CLS_INIT_WDAT_BLAST_RECORD_FORMAT__SEL_FIELD 22,23
#define MPIPE_CLS_INIT_WDAT_BLAST_RECORD_FORMAT__SEL_VAL_INST 0x0
#define MPIPE_CLS_INIT_WDAT_BLAST_RECORD_FORMAT__SEL_VAL_TABLE 0x1
#define MPIPE_CLS_INIT_WDAT_BLAST_RECORD_FORMAT__SEL_VAL_GPR 0x2
#define MPIPE_CLS_INIT_WDAT_BLAST_RECORD_FORMAT__SEL_VAL_EOR 0x3


/*
 * Device Control.
 * This register provides general device control.
 */
#define MPIPE_DEV_CTL 0x0008

#define MPIPE_DEV_CTL__RDN_ROUTE_ORDER_SHIFT 2
#define MPIPE_DEV_CTL__RDN_ROUTE_ORDER_WIDTH 1
#define MPIPE_DEV_CTL__RDN_ROUTE_ORDER_RESET_VAL 1
#define MPIPE_DEV_CTL__RDN_ROUTE_ORDER_RMASK 0x1
#define MPIPE_DEV_CTL__RDN_ROUTE_ORDER_MASK  0x4
#define MPIPE_DEV_CTL__RDN_ROUTE_ORDER_FIELD 2,2

#define MPIPE_DEV_CTL__SDN_ROUTE_ORDER_SHIFT 3
#define MPIPE_DEV_CTL__SDN_ROUTE_ORDER_WIDTH 1
#define MPIPE_DEV_CTL__SDN_ROUTE_ORDER_RESET_VAL 0
#define MPIPE_DEV_CTL__SDN_ROUTE_ORDER_RMASK 0x1
#define MPIPE_DEV_CTL__SDN_ROUTE_ORDER_MASK  0x8
#define MPIPE_DEV_CTL__SDN_ROUTE_ORDER_FIELD 3,3


/*
 * Device Info.
 * This register provides general information about the device attached to
 * this port and channel.
 */
#define MPIPE_DEV_INFO 0x0000

#define MPIPE_DEV_INFO__TYPE_SHIFT 0
#define MPIPE_DEV_INFO__TYPE_WIDTH 12
#define MPIPE_DEV_INFO__TYPE_RESET_VAL 19
#define MPIPE_DEV_INFO__TYPE_RMASK 0xfff
#define MPIPE_DEV_INFO__TYPE_MASK  0xfff
#define MPIPE_DEV_INFO__TYPE_FIELD 0,11
#define MPIPE_DEV_INFO__TYPE_VAL_PCIE 0x1
#define MPIPE_DEV_INFO__TYPE_VAL_GBE 0x10
#define MPIPE_DEV_INFO__TYPE_VAL_XGBE 0x11
#define MPIPE_DEV_INFO__TYPE_VAL_MPIPE 0x13
#define MPIPE_DEV_INFO__TYPE_VAL_TRIO 0x14
#define MPIPE_DEV_INFO__TYPE_VAL_CRYPTO 0x16
#define MPIPE_DEV_INFO__TYPE_VAL_COMPRESSION 0x18
#define MPIPE_DEV_INFO__TYPE_VAL_GPIO 0x20
#define MPIPE_DEV_INFO__TYPE_VAL_RSHIM 0x21
#define MPIPE_DEV_INFO__TYPE_VAL_SROM 0x22
#define MPIPE_DEV_INFO__TYPE_VAL_I2CM 0x25
#define MPIPE_DEV_INFO__TYPE_VAL_I2CS 0x26
#define MPIPE_DEV_INFO__TYPE_VAL_UART 0x28
#define MPIPE_DEV_INFO__TYPE_VAL_USBH 0x29
#define MPIPE_DEV_INFO__TYPE_VAL_USBS 0x2a
#define MPIPE_DEV_INFO__TYPE_VAL_USBHS 0x2b
#define MPIPE_DEV_INFO__TYPE_VAL_DDR2 0x40
#define MPIPE_DEV_INFO__TYPE_VAL_DDR3 0x42
#define MPIPE_DEV_INFO__TYPE_VAL_DIAG_SNP 0x80
#define MPIPE_DEV_INFO__TYPE_VAL_IPIC 0x81

#define MPIPE_DEV_INFO__DEVICE_REV_SHIFT 16
#define MPIPE_DEV_INFO__DEVICE_REV_WIDTH 8
#define MPIPE_DEV_INFO__DEVICE_REV_RMASK 0xff
#define MPIPE_DEV_INFO__DEVICE_REV_MASK  0xff0000
#define MPIPE_DEV_INFO__DEVICE_REV_FIELD 16,23

#define MPIPE_DEV_INFO__REGISTER_REV_SHIFT 24
#define MPIPE_DEV_INFO__REGISTER_REV_WIDTH 4
#define MPIPE_DEV_INFO__REGISTER_REV_RESET_VAL 0
#define MPIPE_DEV_INFO__REGISTER_REV_RMASK 0xf
#define MPIPE_DEV_INFO__REGISTER_REV_MASK  0xf000000
#define MPIPE_DEV_INFO__REGISTER_REV_FIELD 24,27

#define MPIPE_DEV_INFO__INSTANCE_SHIFT 32
#define MPIPE_DEV_INFO__INSTANCE_WIDTH 4
#define MPIPE_DEV_INFO__INSTANCE_RMASK 0xf
#define MPIPE_DEV_INFO__INSTANCE_MASK  _64bit(0xf00000000)
#define MPIPE_DEV_INFO__INSTANCE_FIELD 32,35


/*
 * EDMA ASID Fault Mode.
 * Controls the behavior of eDMA when a fault occurs on the associated ASID.
 */
#define MPIPE_EDMA_ASID_FAULT_MODE 0x3ff0

#define MPIPE_EDMA_ASID_FAULT_MODE__FLUSH_SHIFT 0
#define MPIPE_EDMA_ASID_FAULT_MODE__FLUSH_WIDTH 32
#define MPIPE_EDMA_ASID_FAULT_MODE__FLUSH_RESET_VAL 0
#define MPIPE_EDMA_ASID_FAULT_MODE__FLUSH_RMASK 0xffffffff
#define MPIPE_EDMA_ASID_FAULT_MODE__FLUSH_MASK  0xffffffff
#define MPIPE_EDMA_ASID_FAULT_MODE__FLUSH_FIELD 0,31


/*
 * eDMA Bandwidth Control.
 * Controls bandwidth provided to each priority level.  A token bucket scheme
 * is used wherein each of the 3 egress priority levels is provides with a
 * token bucket.   A token for the ring's priority level must be available
 * for a packet to begin sending.  Each time a 128-byte block is sent, a
 * token is consumed.  The token buckets for each priority level are
 * replenished based on the settings in this register.  These register
 * settings control the rate at which tokens are replenished for each
 * priority level.  Each unit represents approximately 6*LINE_RATE/(N+1)
 * where LINE_RATE includes packet overhead.
 *
 * When set to 0, tokens are replenished as fast as they can be consumed
 * hence setting all PRIORn_RATE values to zero will revert to a
 * strict-priority scheme.  Note that the packet arbiter can run faster than
 * line rate since there is buffering in the egress path.  Hence settings
 * that allow the bandwidth to exceed LINE_RATE are meaningful.  The setting
 * for PRIOR2 is typically higher than PRIOR1 and PRIOR0 in order to prevent
 * starvation.  Similarly, PRIOR1 is typically set higher than PRIOR0.
 */
#define MPIPE_EDMA_BW_CTL 0x2460

#define MPIPE_EDMA_BW_CTL__PRIOR0_RATE_SHIFT 0
#define MPIPE_EDMA_BW_CTL__PRIOR0_RATE_WIDTH 10
#define MPIPE_EDMA_BW_CTL__PRIOR0_RATE_RESET_VAL 0
#define MPIPE_EDMA_BW_CTL__PRIOR0_RATE_RMASK 0x3ff
#define MPIPE_EDMA_BW_CTL__PRIOR0_RATE_MASK  0x3ff
#define MPIPE_EDMA_BW_CTL__PRIOR0_RATE_FIELD 0,9

#define MPIPE_EDMA_BW_CTL__PRIOR1_RATE_SHIFT 10
#define MPIPE_EDMA_BW_CTL__PRIOR1_RATE_WIDTH 10
#define MPIPE_EDMA_BW_CTL__PRIOR1_RATE_RESET_VAL 11
#define MPIPE_EDMA_BW_CTL__PRIOR1_RATE_RMASK 0x3ff
#define MPIPE_EDMA_BW_CTL__PRIOR1_RATE_MASK  0xffc00
#define MPIPE_EDMA_BW_CTL__PRIOR1_RATE_FIELD 10,19

#define MPIPE_EDMA_BW_CTL__PRIOR2_RATE_SHIFT 20
#define MPIPE_EDMA_BW_CTL__PRIOR2_RATE_WIDTH 10
#define MPIPE_EDMA_BW_CTL__PRIOR2_RATE_RESET_VAL 599
#define MPIPE_EDMA_BW_CTL__PRIOR2_RATE_RMASK 0x3ff
#define MPIPE_EDMA_BW_CTL__PRIOR2_RATE_MASK  0x3ff00000
#define MPIPE_EDMA_BW_CTL__PRIOR2_RATE_FIELD 20,29

#define MPIPE_EDMA_BW_CTL__BURST_LENGTH_SHIFT 32
#define MPIPE_EDMA_BW_CTL__BURST_LENGTH_WIDTH 2
#define MPIPE_EDMA_BW_CTL__BURST_LENGTH_RESET_VAL 1
#define MPIPE_EDMA_BW_CTL__BURST_LENGTH_RMASK 0x3
#define MPIPE_EDMA_BW_CTL__BURST_LENGTH_MASK  _64bit(0x300000000)
#define MPIPE_EDMA_BW_CTL__BURST_LENGTH_FIELD 32,33
#define MPIPE_EDMA_BW_CTL__BURST_LENGTH_VAL_BURST_16 0x0
#define MPIPE_EDMA_BW_CTL__BURST_LENGTH_VAL_BURST_32 0x1
#define MPIPE_EDMA_BW_CTL__BURST_LENGTH_VAL_BURST_64 0x2
#define MPIPE_EDMA_BW_CTL__BURST_LENGTH_VAL_BURST_128 0x3

#define MPIPE_EDMA_BW_CTL__LINE_RATE_SHIFT 34
#define MPIPE_EDMA_BW_CTL__LINE_RATE_WIDTH 2
#define MPIPE_EDMA_BW_CTL__LINE_RATE_RESET_VAL 0
#define MPIPE_EDMA_BW_CTL__LINE_RATE_RMASK 0x3
#define MPIPE_EDMA_BW_CTL__LINE_RATE_MASK  _64bit(0xc00000000)
#define MPIPE_EDMA_BW_CTL__LINE_RATE_FIELD 34,35
#define MPIPE_EDMA_BW_CTL__LINE_RATE_VAL_FULL 0x0
#define MPIPE_EDMA_BW_CTL__LINE_RATE_VAL_DIV2 0x1
#define MPIPE_EDMA_BW_CTL__LINE_RATE_VAL_DIV4 0x2
#define MPIPE_EDMA_BW_CTL__LINE_RATE_VAL_DIV8 0x3


/*
 * eDMA Control.
 * Configuration for eDMA services
 */
#define MPIPE_EDMA_CTL 0x2420

#define MPIPE_EDMA_CTL__MAX_DM_REQ_SHIFT 0
#define MPIPE_EDMA_CTL__MAX_DM_REQ_WIDTH 4
#define MPIPE_EDMA_CTL__MAX_DM_REQ_RESET_VAL 15
#define MPIPE_EDMA_CTL__MAX_DM_REQ_RMASK 0xf
#define MPIPE_EDMA_CTL__MAX_DM_REQ_MASK  0xf
#define MPIPE_EDMA_CTL__MAX_DM_REQ_FIELD 0,3

#define MPIPE_EDMA_CTL__DATA_READ_PACE_SHIFT 4
#define MPIPE_EDMA_CTL__DATA_READ_PACE_WIDTH 1
#define MPIPE_EDMA_CTL__DATA_READ_PACE_RESET_VAL 1
#define MPIPE_EDMA_CTL__DATA_READ_PACE_RMASK 0x1
#define MPIPE_EDMA_CTL__DATA_READ_PACE_MASK  0x10
#define MPIPE_EDMA_CTL__DATA_READ_PACE_FIELD 4,4

#define MPIPE_EDMA_CTL__DESC_READ_PACE_SHIFT 5
#define MPIPE_EDMA_CTL__DESC_READ_PACE_WIDTH 1
#define MPIPE_EDMA_CTL__DESC_READ_PACE_RESET_VAL 1
#define MPIPE_EDMA_CTL__DESC_READ_PACE_RMASK 0x1
#define MPIPE_EDMA_CTL__DESC_READ_PACE_MASK  0x20
#define MPIPE_EDMA_CTL__DESC_READ_PACE_FIELD 5,5

#define MPIPE_EDMA_CTL__HUNT_CYCLES_SHIFT 8
#define MPIPE_EDMA_CTL__HUNT_CYCLES_WIDTH 12
#define MPIPE_EDMA_CTL__HUNT_CYCLES_RESET_VAL 250
#define MPIPE_EDMA_CTL__HUNT_CYCLES_RMASK 0xfff
#define MPIPE_EDMA_CTL__HUNT_CYCLES_MASK  0xfff00
#define MPIPE_EDMA_CTL__HUNT_CYCLES_FIELD 8,19

#define MPIPE_EDMA_CTL__UD_BLOCKS_SHIFT 32
#define MPIPE_EDMA_CTL__UD_BLOCKS_WIDTH 11
#define MPIPE_EDMA_CTL__UD_BLOCKS_RESET_VAL 1200
#define MPIPE_EDMA_CTL__UD_BLOCKS_RMASK 0x7ff
#define MPIPE_EDMA_CTL__UD_BLOCKS_MASK  _64bit(0x7ff00000000)
#define MPIPE_EDMA_CTL__UD_BLOCKS_FIELD 32,42

#define MPIPE_EDMA_CTL__MAX_REQ_SHIFT 48
#define MPIPE_EDMA_CTL__MAX_REQ_WIDTH 8
#define MPIPE_EDMA_CTL__MAX_REQ_RESET_VAL 255
#define MPIPE_EDMA_CTL__MAX_REQ_RMASK 0xff
#define MPIPE_EDMA_CTL__MAX_REQ_MASK  _64bit(0xff000000000000)
#define MPIPE_EDMA_CTL__MAX_REQ_FIELD 48,55

#define MPIPE_EDMA_CTL__FENCE_SHIFT 56
#define MPIPE_EDMA_CTL__FENCE_WIDTH 1
#define MPIPE_EDMA_CTL__FENCE_RESET_VAL 0
#define MPIPE_EDMA_CTL__FENCE_RMASK 0x1
#define MPIPE_EDMA_CTL__FENCE_MASK  _64bit(0x100000000000000)
#define MPIPE_EDMA_CTL__FENCE_FIELD 56,56

#define MPIPE_EDMA_CTL__FLUSH_PND_SHIFT 57
#define MPIPE_EDMA_CTL__FLUSH_PND_WIDTH 1
#define MPIPE_EDMA_CTL__FLUSH_PND_RESET_VAL 0
#define MPIPE_EDMA_CTL__FLUSH_PND_RMASK 0x1
#define MPIPE_EDMA_CTL__FLUSH_PND_MASK  _64bit(0x200000000000000)
#define MPIPE_EDMA_CTL__FLUSH_PND_FIELD 57,57


/*
 * eDMA Data Latency.
 * Provides random sample and record eDMA data read latency
 */
#define MPIPE_EDMA_DATA_LAT 0x2438

#define MPIPE_EDMA_DATA_LAT__MIN_LAT_SHIFT 0
#define MPIPE_EDMA_DATA_LAT__MIN_LAT_WIDTH 15
#define MPIPE_EDMA_DATA_LAT__MIN_LAT_RESET_VAL 32767
#define MPIPE_EDMA_DATA_LAT__MIN_LAT_RMASK 0x7fff
#define MPIPE_EDMA_DATA_LAT__MIN_LAT_MASK  0x7fff
#define MPIPE_EDMA_DATA_LAT__MIN_LAT_FIELD 0,14

#define MPIPE_EDMA_DATA_LAT__MAX_LAT_SHIFT 16
#define MPIPE_EDMA_DATA_LAT__MAX_LAT_WIDTH 15
#define MPIPE_EDMA_DATA_LAT__MAX_LAT_RESET_VAL 0
#define MPIPE_EDMA_DATA_LAT__MAX_LAT_RMASK 0x7fff
#define MPIPE_EDMA_DATA_LAT__MAX_LAT_MASK  0x7fff0000
#define MPIPE_EDMA_DATA_LAT__MAX_LAT_FIELD 16,30

#define MPIPE_EDMA_DATA_LAT__CURR_LAT_SHIFT 32
#define MPIPE_EDMA_DATA_LAT__CURR_LAT_WIDTH 15
#define MPIPE_EDMA_DATA_LAT__CURR_LAT_RESET_VAL 0
#define MPIPE_EDMA_DATA_LAT__CURR_LAT_RMASK 0x7fff
#define MPIPE_EDMA_DATA_LAT__CURR_LAT_MASK  _64bit(0x7fff00000000)
#define MPIPE_EDMA_DATA_LAT__CURR_LAT_FIELD 32,46

#define MPIPE_EDMA_DATA_LAT__CLEAR_SHIFT 48
#define MPIPE_EDMA_DATA_LAT__CLEAR_WIDTH 1
#define MPIPE_EDMA_DATA_LAT__CLEAR_RESET_VAL 0
#define MPIPE_EDMA_DATA_LAT__CLEAR_RMASK 0x1
#define MPIPE_EDMA_DATA_LAT__CLEAR_MASK  _64bit(0x1000000000000)
#define MPIPE_EDMA_DATA_LAT__CLEAR_FIELD 48,48


/*
 * eDMA Data Latency.
 * Provides random sample and record eDMA descriptor read latency
 */
#define MPIPE_EDMA_DESC_LAT 0x2440

#define MPIPE_EDMA_DESC_LAT__MIN_LAT_SHIFT 0
#define MPIPE_EDMA_DESC_LAT__MIN_LAT_WIDTH 15
#define MPIPE_EDMA_DESC_LAT__MIN_LAT_RESET_VAL 32767
#define MPIPE_EDMA_DESC_LAT__MIN_LAT_RMASK 0x7fff
#define MPIPE_EDMA_DESC_LAT__MIN_LAT_MASK  0x7fff
#define MPIPE_EDMA_DESC_LAT__MIN_LAT_FIELD 0,14

#define MPIPE_EDMA_DESC_LAT__MAX_LAT_SHIFT 16
#define MPIPE_EDMA_DESC_LAT__MAX_LAT_WIDTH 15
#define MPIPE_EDMA_DESC_LAT__MAX_LAT_RESET_VAL 0
#define MPIPE_EDMA_DESC_LAT__MAX_LAT_RMASK 0x7fff
#define MPIPE_EDMA_DESC_LAT__MAX_LAT_MASK  0x7fff0000
#define MPIPE_EDMA_DESC_LAT__MAX_LAT_FIELD 16,30

#define MPIPE_EDMA_DESC_LAT__CURR_LAT_SHIFT 32
#define MPIPE_EDMA_DESC_LAT__CURR_LAT_WIDTH 15
#define MPIPE_EDMA_DESC_LAT__CURR_LAT_RESET_VAL 0
#define MPIPE_EDMA_DESC_LAT__CURR_LAT_RMASK 0x7fff
#define MPIPE_EDMA_DESC_LAT__CURR_LAT_MASK  _64bit(0x7fff00000000)
#define MPIPE_EDMA_DESC_LAT__CURR_LAT_FIELD 32,46

#define MPIPE_EDMA_DESC_LAT__CLEAR_SHIFT 48
#define MPIPE_EDMA_DESC_LAT__CLEAR_WIDTH 1
#define MPIPE_EDMA_DESC_LAT__CLEAR_RESET_VAL 0
#define MPIPE_EDMA_DESC_LAT__CLEAR_RMASK 0x1
#define MPIPE_EDMA_DESC_LAT__CLEAR_MASK  _64bit(0x1000000000000)
#define MPIPE_EDMA_DESC_LAT__CLEAR_FIELD 48,48


/*
 * eDMA Diag Control.
 * Configuration for eDMA diagnostics functions
 */
#define MPIPE_EDMA_DIAG_CTL 0x2448

#define MPIPE_EDMA_DIAG_CTL__DIAG_CTR_SEL_SHIFT 0
#define MPIPE_EDMA_DIAG_CTL__DIAG_CTR_SEL_WIDTH 3
#define MPIPE_EDMA_DIAG_CTL__DIAG_CTR_SEL_RESET_VAL 0
#define MPIPE_EDMA_DIAG_CTL__DIAG_CTR_SEL_RMASK 0x7
#define MPIPE_EDMA_DIAG_CTL__DIAG_CTR_SEL_MASK  0x7
#define MPIPE_EDMA_DIAG_CTL__DIAG_CTR_SEL_FIELD 0,2
#define MPIPE_EDMA_DIAG_CTL__DIAG_CTR_SEL_VAL_PKT 0x1
#define MPIPE_EDMA_DIAG_CTL__DIAG_CTR_SEL_VAL_RSVD 0x2
#define MPIPE_EDMA_DIAG_CTL__DIAG_CTR_SEL_VAL_BLK 0x3
#define MPIPE_EDMA_DIAG_CTL__DIAG_CTR_SEL_VAL_FL 0x4
#define MPIPE_EDMA_DIAG_CTL__DIAG_CTR_SEL_VAL_DESC 0x5

#define MPIPE_EDMA_DIAG_CTL__DIAG_CTR_IDX_SHIFT 3
#define MPIPE_EDMA_DIAG_CTL__DIAG_CTR_IDX_WIDTH 6
#define MPIPE_EDMA_DIAG_CTL__DIAG_CTR_IDX_RESET_VAL 0
#define MPIPE_EDMA_DIAG_CTL__DIAG_CTR_IDX_RMASK 0x3f
#define MPIPE_EDMA_DIAG_CTL__DIAG_CTR_IDX_MASK  0x1f8
#define MPIPE_EDMA_DIAG_CTL__DIAG_CTR_IDX_FIELD 3,8

#define MPIPE_EDMA_DIAG_CTL__EVT_CTR_SEL_SHIFT 16
#define MPIPE_EDMA_DIAG_CTL__EVT_CTR_SEL_WIDTH 3
#define MPIPE_EDMA_DIAG_CTL__EVT_CTR_SEL_RESET_VAL 0
#define MPIPE_EDMA_DIAG_CTL__EVT_CTR_SEL_RMASK 0x7
#define MPIPE_EDMA_DIAG_CTL__EVT_CTR_SEL_MASK  0x70000
#define MPIPE_EDMA_DIAG_CTL__EVT_CTR_SEL_FIELD 16,18
#define MPIPE_EDMA_DIAG_CTL__EVT_CTR_SEL_VAL_PKTS 0x0
#define MPIPE_EDMA_DIAG_CTL__EVT_CTR_SEL_VAL_DESC 0x1
#define MPIPE_EDMA_DIAG_CTL__EVT_CTR_SEL_VAL_REQ 0x2
#define MPIPE_EDMA_DIAG_CTL__EVT_CTR_SEL_VAL_RT_AF 0x3
#define MPIPE_EDMA_DIAG_CTL__EVT_CTR_SEL_VAL_SDN_AF 0x4

#define MPIPE_EDMA_DIAG_CTL__DISABLE_FINAL_BUF_RTN_SHIFT 24
#define MPIPE_EDMA_DIAG_CTL__DISABLE_FINAL_BUF_RTN_WIDTH 1
#define MPIPE_EDMA_DIAG_CTL__DISABLE_FINAL_BUF_RTN_RESET_VAL 0
#define MPIPE_EDMA_DIAG_CTL__DISABLE_FINAL_BUF_RTN_RMASK 0x1
#define MPIPE_EDMA_DIAG_CTL__DISABLE_FINAL_BUF_RTN_MASK  0x1000000
#define MPIPE_EDMA_DIAG_CTL__DISABLE_FINAL_BUF_RTN_FIELD 24,24


/*
 * eDMA Diag Status.
 * eDMA diagnostics status
 */
#define MPIPE_EDMA_DIAG_STS 0x2430

#define MPIPE_EDMA_DIAG_STS__DIAG_CTR_VAL_SHIFT 0
#define MPIPE_EDMA_DIAG_STS__DIAG_CTR_VAL_WIDTH 11
#define MPIPE_EDMA_DIAG_STS__DIAG_CTR_VAL_RESET_VAL 0
#define MPIPE_EDMA_DIAG_STS__DIAG_CTR_VAL_RMASK 0x7ff
#define MPIPE_EDMA_DIAG_STS__DIAG_CTR_VAL_MASK  0x7ff
#define MPIPE_EDMA_DIAG_STS__DIAG_CTR_VAL_FIELD 0,10

#define MPIPE_EDMA_DIAG_STS__RG_SHIFT 11
#define MPIPE_EDMA_DIAG_STS__RG_WIDTH 3
#define MPIPE_EDMA_DIAG_STS__RG_RESET_VAL 0
#define MPIPE_EDMA_DIAG_STS__RG_RMASK 0x7
#define MPIPE_EDMA_DIAG_STS__RG_MASK  0x3800
#define MPIPE_EDMA_DIAG_STS__RG_FIELD 11,13

#define MPIPE_EDMA_DIAG_STS__DESC_FETCH_SHIFT 16
#define MPIPE_EDMA_DIAG_STS__DESC_FETCH_WIDTH 2
#define MPIPE_EDMA_DIAG_STS__DESC_FETCH_RESET_VAL 0
#define MPIPE_EDMA_DIAG_STS__DESC_FETCH_RMASK 0x3
#define MPIPE_EDMA_DIAG_STS__DESC_FETCH_MASK  0x30000
#define MPIPE_EDMA_DIAG_STS__DESC_FETCH_FIELD 16,17

#define MPIPE_EDMA_DIAG_STS__DESC_POST_SHIFT 18
#define MPIPE_EDMA_DIAG_STS__DESC_POST_WIDTH 3
#define MPIPE_EDMA_DIAG_STS__DESC_POST_RESET_VAL 0
#define MPIPE_EDMA_DIAG_STS__DESC_POST_RMASK 0x7
#define MPIPE_EDMA_DIAG_STS__DESC_POST_MASK  0x1c0000
#define MPIPE_EDMA_DIAG_STS__DESC_POST_FIELD 18,20

#define MPIPE_EDMA_DIAG_STS__DESC_RSP_SHIFT 21
#define MPIPE_EDMA_DIAG_STS__DESC_RSP_WIDTH 3
#define MPIPE_EDMA_DIAG_STS__DESC_RSP_RESET_VAL 0
#define MPIPE_EDMA_DIAG_STS__DESC_RSP_RMASK 0x7
#define MPIPE_EDMA_DIAG_STS__DESC_RSP_MASK  0xe00000
#define MPIPE_EDMA_DIAG_STS__DESC_RSP_FIELD 21,23

#define MPIPE_EDMA_DIAG_STS__DESC_MGR_SHIFT 24
#define MPIPE_EDMA_DIAG_STS__DESC_MGR_WIDTH 3
#define MPIPE_EDMA_DIAG_STS__DESC_MGR_RESET_VAL 0
#define MPIPE_EDMA_DIAG_STS__DESC_MGR_RMASK 0x7
#define MPIPE_EDMA_DIAG_STS__DESC_MGR_MASK  0x7000000
#define MPIPE_EDMA_DIAG_STS__DESC_MGR_FIELD 24,26


/*
 * eDMA Descriptor Manager Init Control.
 * Initialization control for the eDMA descriptor manager data structures
 */
#define MPIPE_EDMA_DM_INIT_CTL 0x2400

#define MPIPE_EDMA_DM_INIT_CTL__IDX_SHIFT 0
#define MPIPE_EDMA_DM_INIT_CTL__IDX_WIDTH 6
#define MPIPE_EDMA_DM_INIT_CTL__IDX_RESET_VAL 0
#define MPIPE_EDMA_DM_INIT_CTL__IDX_RMASK 0x3f
#define MPIPE_EDMA_DM_INIT_CTL__IDX_MASK  0x3f
#define MPIPE_EDMA_DM_INIT_CTL__IDX_FIELD 0,5

#define MPIPE_EDMA_DM_INIT_CTL__STRUCT_SEL_SHIFT 16
#define MPIPE_EDMA_DM_INIT_CTL__STRUCT_SEL_WIDTH 2
#define MPIPE_EDMA_DM_INIT_CTL__STRUCT_SEL_RESET_VAL 0
#define MPIPE_EDMA_DM_INIT_CTL__STRUCT_SEL_RMASK 0x3
#define MPIPE_EDMA_DM_INIT_CTL__STRUCT_SEL_MASK  0x30000
#define MPIPE_EDMA_DM_INIT_CTL__STRUCT_SEL_FIELD 16,17
#define MPIPE_EDMA_DM_INIT_CTL__STRUCT_SEL_VAL_SETUP 0x0
#define MPIPE_EDMA_DM_INIT_CTL__STRUCT_SEL_VAL_HEAD 0x1
#define MPIPE_EDMA_DM_INIT_CTL__STRUCT_SEL_VAL_DESC_STATE0 0x2
#define MPIPE_EDMA_DM_INIT_CTL__STRUCT_SEL_VAL_DESC_STATE1 0x3


/*
 * eDMA Descriptor Manager Init Data.
 * Read/Write data for eDMA descriptor manager setup
 */
#define MPIPE_EDMA_DM_INIT_DAT 0x2408

#define MPIPE_EDMA_DM_INIT_DAT__DAT_SHIFT 0
#define MPIPE_EDMA_DM_INIT_DAT__DAT_WIDTH 64
#define MPIPE_EDMA_DM_INIT_DAT__DAT_RESET_VAL 0
#define MPIPE_EDMA_DM_INIT_DAT__DAT_RMASK _64bit(0xffffffffffffffff)
#define MPIPE_EDMA_DM_INIT_DAT__DAT_MASK  _64bit(0xffffffffffffffff)
#define MPIPE_EDMA_DM_INIT_DAT__DAT_FIELD 0,63


/*
 * eDMA Descriptor Manager Init Data when
 * EDMA_DM_INIT_CTL.STRUCT_SEL=DESC_STATE0.
 * Read/Write data for eDMA descriptor manager setup.
 */
#define MPIPE_EDMA_DM_INIT_DAT_DESC_STATE0 0x2408

#define MPIPE_EDMA_DM_INIT_DAT_DESC_STATE0__STATE_SHIFT 0
#define MPIPE_EDMA_DM_INIT_DAT_DESC_STATE0__STATE_WIDTH 64
#define MPIPE_EDMA_DM_INIT_DAT_DESC_STATE0__STATE_RESET_VAL 1
#define MPIPE_EDMA_DM_INIT_DAT_DESC_STATE0__STATE_RMASK _64bit(0xffffffffffffffff)
#define MPIPE_EDMA_DM_INIT_DAT_DESC_STATE0__STATE_MASK  _64bit(0xffffffffffffffff)
#define MPIPE_EDMA_DM_INIT_DAT_DESC_STATE0__STATE_FIELD 0,63


/*
 * eDMA Descriptor Manager Init Data when
 * EDMA_DM_INIT_CTL.STRUCT_SEL=DESC_STATE1.
 * Read/Write data for eDMA descriptor manager setup.
 */
#define MPIPE_EDMA_DM_INIT_DAT_DESC_STATE1 0x2408

#define MPIPE_EDMA_DM_INIT_DAT_DESC_STATE1__STATE_SHIFT 0
#define MPIPE_EDMA_DM_INIT_DAT_DESC_STATE1__STATE_WIDTH 64
#define MPIPE_EDMA_DM_INIT_DAT_DESC_STATE1__STATE_RESET_VAL 0
#define MPIPE_EDMA_DM_INIT_DAT_DESC_STATE1__STATE_RMASK _64bit(0xffffffffffffffff)
#define MPIPE_EDMA_DM_INIT_DAT_DESC_STATE1__STATE_MASK  _64bit(0xffffffffffffffff)
#define MPIPE_EDMA_DM_INIT_DAT_DESC_STATE1__STATE_FIELD 0,63


/*
 * eDMA Descriptor Manager Init Data when EDMA_DM_INIT_CTL.STRUCT_SEL=HEAD.
 * Read/Write data for eDMA descriptor manager setup.  These fields are
 * typically only accessed when cleaning up and restarting a ring.  When a
 * ring is restarted, these must be written to zero.
 */
#define MPIPE_EDMA_DM_INIT_DAT_HEAD 0x2408

#define MPIPE_EDMA_DM_INIT_DAT_HEAD__HEAD_SHIFT 0
#define MPIPE_EDMA_DM_INIT_DAT_HEAD__HEAD_WIDTH 16
#define MPIPE_EDMA_DM_INIT_DAT_HEAD__HEAD_RESET_VAL 0
#define MPIPE_EDMA_DM_INIT_DAT_HEAD__HEAD_RMASK 0xffff
#define MPIPE_EDMA_DM_INIT_DAT_HEAD__HEAD_MASK  0xffff
#define MPIPE_EDMA_DM_INIT_DAT_HEAD__HEAD_FIELD 0,15

#define MPIPE_EDMA_DM_INIT_DAT_HEAD__GNUM_SHIFT 16
#define MPIPE_EDMA_DM_INIT_DAT_HEAD__GNUM_WIDTH 1
#define MPIPE_EDMA_DM_INIT_DAT_HEAD__GNUM_RESET_VAL 0
#define MPIPE_EDMA_DM_INIT_DAT_HEAD__GNUM_RMASK 0x1
#define MPIPE_EDMA_DM_INIT_DAT_HEAD__GNUM_MASK  0x10000
#define MPIPE_EDMA_DM_INIT_DAT_HEAD__GNUM_FIELD 16,16


/*
 * eDMA Descriptor Manager Init Data when EDMA_DM_INIT_CTL.STRUCT_SEL=SETUP.
 * Read/Write data for eDMA descriptor manager setup
 */
#define MPIPE_EDMA_DM_INIT_DAT_SETUP 0x2408

#define MPIPE_EDMA_DM_INIT_DAT_SETUP__BASE_PA_SHIFT 0
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__BASE_PA_WIDTH 30
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__BASE_PA_RESET_VAL 0
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__BASE_PA_RMASK 0x3fffffff
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__BASE_PA_MASK  0x3fffffff
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__BASE_PA_FIELD 0,29

#define MPIPE_EDMA_DM_INIT_DAT_SETUP__HFH_SHIFT 30
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__HFH_WIDTH 1
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__HFH_RESET_VAL 0
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__HFH_RMASK 0x1
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__HFH_MASK  0x40000000
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__HFH_FIELD 30,30

#define MPIPE_EDMA_DM_INIT_DAT_SETUP__TILEID_SHIFT 33
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__TILEID_WIDTH 8
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__TILEID_RESET_VAL 0
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__TILEID_RMASK 0xff
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__TILEID_MASK  _64bit(0x1fe00000000)
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__TILEID_FIELD 33,40

#define MPIPE_EDMA_DM_INIT_DAT_SETUP__RING_SIZE_SHIFT 41
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__RING_SIZE_WIDTH 2
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__RING_SIZE_RESET_VAL 0
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__RING_SIZE_RMASK 0x3
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__RING_SIZE_MASK  _64bit(0x60000000000)
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__RING_SIZE_FIELD 41,42
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__RING_SIZE_VAL_SZ_512 0x0
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__RING_SIZE_VAL_SZ_2K 0x1
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__RING_SIZE_VAL_SZ_8K 0x2
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__RING_SIZE_VAL_SZ_64K 0x3

#define MPIPE_EDMA_DM_INIT_DAT_SETUP__FREEZE_SHIFT 43
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__FREEZE_WIDTH 1
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__FREEZE_RESET_VAL 1
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__FREEZE_RMASK 0x1
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__FREEZE_MASK  _64bit(0x80000000000)
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__FREEZE_FIELD 43,43

#define MPIPE_EDMA_DM_INIT_DAT_SETUP__HUNT_SHIFT 44
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__HUNT_WIDTH 1
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__HUNT_RESET_VAL 0
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__HUNT_RMASK 0x1
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__HUNT_MASK  _64bit(0x100000000000)
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__HUNT_FIELD 44,44

#define MPIPE_EDMA_DM_INIT_DAT_SETUP__FLUSH_SHIFT 45
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__FLUSH_WIDTH 1
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__FLUSH_RESET_VAL 0
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__FLUSH_RMASK 0x1
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__FLUSH_MASK  _64bit(0x200000000000)
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__FLUSH_FIELD 45,45

#define MPIPE_EDMA_DM_INIT_DAT_SETUP__STALL_SHIFT 46
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__STALL_WIDTH 1
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__STALL_RESET_VAL 0
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__STALL_RMASK 0x1
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__STALL_MASK  _64bit(0x400000000000)
#define MPIPE_EDMA_DM_INIT_DAT_SETUP__STALL_FIELD 46,46


/*
 * eDMA Info.
 * Constants related to eDMA.
 */
#define MPIPE_EDMA_INFO 0x0518

#define MPIPE_EDMA_INFO__NUM_RINGS_SHIFT 0
#define MPIPE_EDMA_INFO__NUM_RINGS_WIDTH 8
#define MPIPE_EDMA_INFO__NUM_RINGS_RESET_VAL 64
#define MPIPE_EDMA_INFO__NUM_RINGS_RMASK 0xff
#define MPIPE_EDMA_INFO__NUM_RINGS_MASK  0xff
#define MPIPE_EDMA_INFO__NUM_RINGS_FIELD 0,7

#define MPIPE_EDMA_INFO__EPKT_BURST_SUPPORT_SHIFT 8
#define MPIPE_EDMA_INFO__EPKT_BURST_SUPPORT_WIDTH 1
#define MPIPE_EDMA_INFO__EPKT_BURST_SUPPORT_RMASK 0x1
#define MPIPE_EDMA_INFO__EPKT_BURST_SUPPORT_MASK  0x100
#define MPIPE_EDMA_INFO__EPKT_BURST_SUPPORT_FIELD 8,8

#define MPIPE_EDMA_INFO__EPKT_BW_ARB_SUPPORT_SHIFT 9
#define MPIPE_EDMA_INFO__EPKT_BW_ARB_SUPPORT_WIDTH 1
#define MPIPE_EDMA_INFO__EPKT_BW_ARB_SUPPORT_RMASK 0x1
#define MPIPE_EDMA_INFO__EPKT_BW_ARB_SUPPORT_MASK  0x200
#define MPIPE_EDMA_INFO__EPKT_BW_ARB_SUPPORT_FIELD 9,9

#define MPIPE_EDMA_INFO__REMOTE_BUFF_RTN_SUPPORT_SHIFT 10
#define MPIPE_EDMA_INFO__REMOTE_BUFF_RTN_SUPPORT_WIDTH 1
#define MPIPE_EDMA_INFO__REMOTE_BUFF_RTN_SUPPORT_RMASK 0x1
#define MPIPE_EDMA_INFO__REMOTE_BUFF_RTN_SUPPORT_MASK  0x400
#define MPIPE_EDMA_INFO__REMOTE_BUFF_RTN_SUPPORT_FIELD 10,10

#define MPIPE_EDMA_INFO__REORDER_SUPPORT_SHIFT 11
#define MPIPE_EDMA_INFO__REORDER_SUPPORT_WIDTH 1
#define MPIPE_EDMA_INFO__REORDER_SUPPORT_RMASK 0x1
#define MPIPE_EDMA_INFO__REORDER_SUPPORT_MASK  0x800
#define MPIPE_EDMA_INFO__REORDER_SUPPORT_FIELD 11,11


/*
 * eDMA Request Generator Init Control.
 * Initialization control for the eDMA request generator data structures
 */
#define MPIPE_EDMA_RG_INIT_CTL 0x2410

#define MPIPE_EDMA_RG_INIT_CTL__IDX_SHIFT 0
#define MPIPE_EDMA_RG_INIT_CTL__IDX_WIDTH 6
#define MPIPE_EDMA_RG_INIT_CTL__IDX_RESET_VAL 0
#define MPIPE_EDMA_RG_INIT_CTL__IDX_RMASK 0x3f
#define MPIPE_EDMA_RG_INIT_CTL__IDX_MASK  0x3f
#define MPIPE_EDMA_RG_INIT_CTL__IDX_FIELD 0,5

#define MPIPE_EDMA_RG_INIT_CTL__STRUCT_SEL_SHIFT 16
#define MPIPE_EDMA_RG_INIT_CTL__STRUCT_SEL_WIDTH 3
#define MPIPE_EDMA_RG_INIT_CTL__STRUCT_SEL_RESET_VAL 0
#define MPIPE_EDMA_RG_INIT_CTL__STRUCT_SEL_RMASK 0x7
#define MPIPE_EDMA_RG_INIT_CTL__STRUCT_SEL_MASK  0x70000
#define MPIPE_EDMA_RG_INIT_CTL__STRUCT_SEL_FIELD 16,18
#define MPIPE_EDMA_RG_INIT_CTL__STRUCT_SEL_VAL_STACK_PROT 0x0
#define MPIPE_EDMA_RG_INIT_CTL__STRUCT_SEL_VAL_REQ_THR 0x1
#define MPIPE_EDMA_RG_INIT_CTL__STRUCT_SEL_VAL_THRESH 0x2
#define MPIPE_EDMA_RG_INIT_CTL__STRUCT_SEL_VAL_MAP 0x3
#define MPIPE_EDMA_RG_INIT_CTL__STRUCT_SEL_VAL_EFIFO_PROT 0x4


/*
 * eDMA Request Generator Init Data.
 * Read/Write data for eDMA descriptor manager setup
 */
#define MPIPE_EDMA_RG_INIT_DAT 0x2418

#define MPIPE_EDMA_RG_INIT_DAT__DAT_SHIFT 0
#define MPIPE_EDMA_RG_INIT_DAT__DAT_WIDTH 64
#define MPIPE_EDMA_RG_INIT_DAT__DAT_RESET_VAL 0
#define MPIPE_EDMA_RG_INIT_DAT__DAT_RMASK _64bit(0xffffffffffffffff)
#define MPIPE_EDMA_RG_INIT_DAT__DAT_MASK  _64bit(0xffffffffffffffff)
#define MPIPE_EDMA_RG_INIT_DAT__DAT_FIELD 0,63


/*
 * eDMA Request Generator Init Data.
 * Read/Write data for eDMA descriptor manager setup.  This register
 * describes EDMA_RG_INIT_DAT when EDMA_RG_INIT_CTL.STRUCT_SEL=MAP.
 * EDMA_RG_INIT_CTL.IDX selects the ring being configured.
 */
#define MPIPE_EDMA_RG_INIT_DAT_MAP 0x2418

#define MPIPE_EDMA_RG_INIT_DAT_MAP__CHANNEL_SHIFT 0
#define MPIPE_EDMA_RG_INIT_DAT_MAP__CHANNEL_WIDTH 5
#define MPIPE_EDMA_RG_INIT_DAT_MAP__CHANNEL_RMASK 0x1f
#define MPIPE_EDMA_RG_INIT_DAT_MAP__CHANNEL_MASK  0x1f
#define MPIPE_EDMA_RG_INIT_DAT_MAP__CHANNEL_FIELD 0,4

#define MPIPE_EDMA_RG_INIT_DAT_MAP__PRIORITY_LVL_SHIFT 8
#define MPIPE_EDMA_RG_INIT_DAT_MAP__PRIORITY_LVL_WIDTH 2
#define MPIPE_EDMA_RG_INIT_DAT_MAP__PRIORITY_LVL_RESET_VAL 0
#define MPIPE_EDMA_RG_INIT_DAT_MAP__PRIORITY_LVL_RMASK 0x3
#define MPIPE_EDMA_RG_INIT_DAT_MAP__PRIORITY_LVL_MASK  0x300
#define MPIPE_EDMA_RG_INIT_DAT_MAP__PRIORITY_LVL_FIELD 8,9
#define MPIPE_EDMA_RG_INIT_DAT_MAP__PRIORITY_LVL_VAL_LOW 0x0
#define MPIPE_EDMA_RG_INIT_DAT_MAP__PRIORITY_LVL_VAL_MED 0x1
#define MPIPE_EDMA_RG_INIT_DAT_MAP__PRIORITY_LVL_VAL_HIGH 0x2
#define MPIPE_EDMA_RG_INIT_DAT_MAP__PRIORITY_LVL_VAL_MAX 0x3

#define MPIPE_EDMA_RG_INIT_DAT_MAP__PRIORITY_QUEUES_SHIFT 16
#define MPIPE_EDMA_RG_INIT_DAT_MAP__PRIORITY_QUEUES_WIDTH 32
#define MPIPE_EDMA_RG_INIT_DAT_MAP__PRIORITY_QUEUES_RESET_VAL 0
#define MPIPE_EDMA_RG_INIT_DAT_MAP__PRIORITY_QUEUES_RMASK 0xffffffff
#define MPIPE_EDMA_RG_INIT_DAT_MAP__PRIORITY_QUEUES_MASK  _64bit(0xffffffff0000)
#define MPIPE_EDMA_RG_INIT_DAT_MAP__PRIORITY_QUEUES_FIELD 16,47


/*
 * eDMA Request Generator Init Data.
 * Read/Write data for eDMA descriptor manager setup.  This register
 * describes EDMA_RG_INIT_DAT when EDMA_RG_INIT_CTL.STRUCT_SEL=REQ_THR.
 * EDMA_RG_INIT_CTL.IDX is not used.
 */
#define MPIPE_EDMA_RG_INIT_DAT_REQ_THR 0x2418

#define MPIPE_EDMA_RG_INIT_DAT_REQ_THR__REQ_THR_SHIFT 0
#define MPIPE_EDMA_RG_INIT_DAT_REQ_THR__REQ_THR_WIDTH 4
#define MPIPE_EDMA_RG_INIT_DAT_REQ_THR__REQ_THR_RESET_VAL 1
#define MPIPE_EDMA_RG_INIT_DAT_REQ_THR__REQ_THR_RMASK 0xf
#define MPIPE_EDMA_RG_INIT_DAT_REQ_THR__REQ_THR_MASK  0xf
#define MPIPE_EDMA_RG_INIT_DAT_REQ_THR__REQ_THR_FIELD 0,3


/*
 * eDMA Request Generator Init Data.
 * Read/Write data for eDMA descriptor manager setup.  This register
 * describes EDMA_RG_INIT_DAT when EDMA_RG_INIT_CTL.STRUCT_SEL=STACK_PROT.
 * EDMA_RG_INIT_CTL.IDX selects the ring being configured.
 */
#define MPIPE_EDMA_RG_INIT_DAT_STACK_PROT 0x2418

#define MPIPE_EDMA_RG_INIT_DAT_STACK_PROT__ASID_ENA_SHIFT 0
#define MPIPE_EDMA_RG_INIT_DAT_STACK_PROT__ASID_ENA_WIDTH 32
#define MPIPE_EDMA_RG_INIT_DAT_STACK_PROT__ASID_ENA_RESET_VAL 4294967295
#define MPIPE_EDMA_RG_INIT_DAT_STACK_PROT__ASID_ENA_RMASK 0xffffffff
#define MPIPE_EDMA_RG_INIT_DAT_STACK_PROT__ASID_ENA_MASK  0xffffffff
#define MPIPE_EDMA_RG_INIT_DAT_STACK_PROT__ASID_ENA_FIELD 0,31

#define MPIPE_EDMA_RG_INIT_DAT_STACK_PROT__STACK_ENA_SHIFT 32
#define MPIPE_EDMA_RG_INIT_DAT_STACK_PROT__STACK_ENA_WIDTH 32
#define MPIPE_EDMA_RG_INIT_DAT_STACK_PROT__STACK_ENA_RESET_VAL 4294967295
#define MPIPE_EDMA_RG_INIT_DAT_STACK_PROT__STACK_ENA_RMASK 0xffffffff
#define MPIPE_EDMA_RG_INIT_DAT_STACK_PROT__STACK_ENA_MASK  _64bit(0xffffffff00000000)
#define MPIPE_EDMA_RG_INIT_DAT_STACK_PROT__STACK_ENA_FIELD 32,63


/*
 * eDMA Request Generator Init Data.
 * Read/Write data for eDMA descriptor manager setup.  This register
 * describes EDMA_RG_INIT_DAT when EDMA_RG_INIT_CTL.STRUCT_SEL=THRESH.
 * EDMA_RG_INIT_CTL.IDX selects the ring being configured.
 */
#define MPIPE_EDMA_RG_INIT_DAT_THRESH 0x2418

#define MPIPE_EDMA_RG_INIT_DAT_THRESH__MAX_BLKS_SHIFT 0
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__MAX_BLKS_WIDTH 11
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__MAX_BLKS_RESET_VAL 13
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__MAX_BLKS_RMASK 0x7ff
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__MAX_BLKS_MASK  0x7ff
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__MAX_BLKS_FIELD 0,10

#define MPIPE_EDMA_RG_INIT_DAT_THRESH__MIN_SNF_BLKS_SHIFT 11
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__MIN_SNF_BLKS_WIDTH 11
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__MIN_SNF_BLKS_RESET_VAL 12
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__MIN_SNF_BLKS_RMASK 0x7ff
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__MIN_SNF_BLKS_MASK  0x3ff800
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__MIN_SNF_BLKS_FIELD 11,21

#define MPIPE_EDMA_RG_INIT_DAT_THRESH__DB_SHIFT 32
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__DB_WIDTH 1
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__DB_RESET_VAL 1
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__DB_RMASK 0x1
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__DB_MASK  _64bit(0x100000000)
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__DB_FIELD 32,32

#define MPIPE_EDMA_RG_INIT_DAT_THRESH__NT_OVD_SHIFT 33
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__NT_OVD_WIDTH 2
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__NT_OVD_RESET_VAL 2
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__NT_OVD_RMASK 0x3
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__NT_OVD_MASK  _64bit(0x600000000)
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__NT_OVD_FIELD 33,34
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__NT_OVD_VAL_TLB 0x0
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__NT_OVD_VAL_FORCE0 0x2
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__NT_OVD_VAL_FORCE1 0x3

#define MPIPE_EDMA_RG_INIT_DAT_THRESH__HIGH_BW_SHIFT 40
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__HIGH_BW_WIDTH 1
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__HIGH_BW_RESET_VAL 0
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__HIGH_BW_RMASK 0x1
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__HIGH_BW_MASK  _64bit(0x10000000000)
#define MPIPE_EDMA_RG_INIT_DAT_THRESH__HIGH_BW_FIELD 40,40


/*
 * eDMA Stats Counter.
 * Provides count of event selected by EDMA_DIAG_CTL.EVT_CTR_SEL with
 * read-to-clear functionality.
 */
#define MPIPE_EDMA_STAT_CTR 0x2450

#define MPIPE_EDMA_STAT_CTR__VAL_SHIFT 0
#define MPIPE_EDMA_STAT_CTR__VAL_WIDTH 32
#define MPIPE_EDMA_STAT_CTR__VAL_RESET_VAL 0
#define MPIPE_EDMA_STAT_CTR__VAL_RMASK 0xffffffff
#define MPIPE_EDMA_STAT_CTR__VAL_MASK  0xffffffff
#define MPIPE_EDMA_STAT_CTR__VAL_FIELD 0,31


/*
 * eDMA Stats Counter.
 * Provides count of event selected by EDMA_DIAG_CTL.EVT_CTR_SEL
 */
#define MPIPE_EDMA_STAT_CTR_RD 0x2458

#define MPIPE_EDMA_STAT_CTR_RD__VAL_SHIFT 0
#define MPIPE_EDMA_STAT_CTR_RD__VAL_WIDTH 32
#define MPIPE_EDMA_STAT_CTR_RD__VAL_RESET_VAL 0
#define MPIPE_EDMA_STAT_CTR_RD__VAL_RMASK 0xffffffff
#define MPIPE_EDMA_STAT_CTR_RD__VAL_MASK  0xffffffff
#define MPIPE_EDMA_STAT_CTR_RD__VAL_FIELD 0,31


/*
 * eDMA Status.
 * eDMA status
 */
#define MPIPE_EDMA_STS 0x2428

#define MPIPE_EDMA_STS__LAST_INVALID_POST_SHIFT 0
#define MPIPE_EDMA_STS__LAST_INVALID_POST_WIDTH 6
#define MPIPE_EDMA_STS__LAST_INVALID_POST_RESET_VAL 0
#define MPIPE_EDMA_STS__LAST_INVALID_POST_RMASK 0x3f
#define MPIPE_EDMA_STS__LAST_INVALID_POST_MASK  0x3f
#define MPIPE_EDMA_STS__LAST_INVALID_POST_FIELD 0,5

#define MPIPE_EDMA_STS__NUM_EPKT_BLOCKS_SHIFT 8
#define MPIPE_EDMA_STS__NUM_EPKT_BLOCKS_WIDTH 11
#define MPIPE_EDMA_STS__NUM_EPKT_BLOCKS_RESET_VAL 1950
#define MPIPE_EDMA_STS__NUM_EPKT_BLOCKS_RMASK 0x7ff
#define MPIPE_EDMA_STS__NUM_EPKT_BLOCKS_MASK  0x7ff00
#define MPIPE_EDMA_STS__NUM_EPKT_BLOCKS_FIELD 8,18

#define MPIPE_EDMA_STS__MAX_EPKT_BLOCKS_SHIFT 19
#define MPIPE_EDMA_STS__MAX_EPKT_BLOCKS_WIDTH 11
#define MPIPE_EDMA_STS__MAX_EPKT_BLOCKS_RESET_VAL 0
#define MPIPE_EDMA_STS__MAX_EPKT_BLOCKS_RMASK 0x7ff
#define MPIPE_EDMA_STS__MAX_EPKT_BLOCKS_MASK  0x3ff80000
#define MPIPE_EDMA_STS__MAX_EPKT_BLOCKS_FIELD 19,29

#define MPIPE_EDMA_STS__MIN_EPKT_BLOCKS_SHIFT 30
#define MPIPE_EDMA_STS__MIN_EPKT_BLOCKS_WIDTH 11
#define MPIPE_EDMA_STS__MIN_EPKT_BLOCKS_RESET_VAL 0
#define MPIPE_EDMA_STS__MIN_EPKT_BLOCKS_RMASK 0x7ff
#define MPIPE_EDMA_STS__MIN_EPKT_BLOCKS_MASK  _64bit(0x1ffc0000000)
#define MPIPE_EDMA_STS__MIN_EPKT_BLOCKS_FIELD 30,40

#define MPIPE_EDMA_STS__CURR_EPKT_BLOCKS_SHIFT 41
#define MPIPE_EDMA_STS__CURR_EPKT_BLOCKS_WIDTH 11
#define MPIPE_EDMA_STS__CURR_EPKT_BLOCKS_RESET_VAL 0
#define MPIPE_EDMA_STS__CURR_EPKT_BLOCKS_RMASK 0x7ff
#define MPIPE_EDMA_STS__CURR_EPKT_BLOCKS_MASK  _64bit(0xffe0000000000)
#define MPIPE_EDMA_STS__CURR_EPKT_BLOCKS_FIELD 41,51

#define MPIPE_EDMA_STS__LAST_DESC_DISC_SHIFT 56
#define MPIPE_EDMA_STS__LAST_DESC_DISC_WIDTH 6
#define MPIPE_EDMA_STS__LAST_DESC_DISC_RESET_VAL 0
#define MPIPE_EDMA_STS__LAST_DESC_DISC_RMASK 0x3f
#define MPIPE_EDMA_STS__LAST_DESC_DISC_MASK  _64bit(0x3f00000000000000)
#define MPIPE_EDMA_STS__LAST_DESC_DISC_FIELD 56,61


/*
 * Egress byte counter..
 * Provides count of bytes sent to MACs (does not include overhead such as
 * IPG, preamble, or CRC unless those are provided in the data by SW).  Wraps
 * when incremented beyond 2^50.
 */
#define MPIPE_EGRESS_BYTE_COUNT 0x2358

#define MPIPE_EGRESS_BYTE_COUNT__EGRESS_BYTE_COUNT_SHIFT 0
#define MPIPE_EGRESS_BYTE_COUNT__EGRESS_BYTE_COUNT_WIDTH 50
#define MPIPE_EGRESS_BYTE_COUNT__EGRESS_BYTE_COUNT_RESET_VAL 0
#define MPIPE_EGRESS_BYTE_COUNT__EGRESS_BYTE_COUNT_RMASK _64bit(0x3ffffffffffff)
#define MPIPE_EGRESS_BYTE_COUNT__EGRESS_BYTE_COUNT_MASK  _64bit(0x3ffffffffffff)
#define MPIPE_EGRESS_BYTE_COUNT__EGRESS_BYTE_COUNT_FIELD 0,49


/*
 * Egress byte counter with read-to-clear functionality.
 * Provides count of bytes sent to MACs (does not include overhead such as
 * IPG, preamble, or CRC unless those are provided in the data by SW).
 * Clears on read.  Wraps when incremented beyond 2^50.
 */
#define MPIPE_EGRESS_BYTE_COUNT_RC 0x2360

#define MPIPE_EGRESS_BYTE_COUNT_RC__EGRESS_BYTE_COUNT_RC_SHIFT 0
#define MPIPE_EGRESS_BYTE_COUNT_RC__EGRESS_BYTE_COUNT_RC_WIDTH 50
#define MPIPE_EGRESS_BYTE_COUNT_RC__EGRESS_BYTE_COUNT_RC_RESET_VAL 0
#define MPIPE_EGRESS_BYTE_COUNT_RC__EGRESS_BYTE_COUNT_RC_RMASK _64bit(0x3ffffffffffff)
#define MPIPE_EGRESS_BYTE_COUNT_RC__EGRESS_BYTE_COUNT_RC_MASK  _64bit(0x3ffffffffffff)
#define MPIPE_EGRESS_BYTE_COUNT_RC__EGRESS_BYTE_COUNT_RC_FIELD 0,49


/*
 * Egress packet counter.
 * Provides count of all egress packets.  Saturates at all 1's.
 */
#define MPIPE_EGRESS_PKT_COUNT 0x2338

#define MPIPE_EGRESS_PKT_COUNT__EGRESS_PKT_COUNT_SHIFT 0
#define MPIPE_EGRESS_PKT_COUNT__EGRESS_PKT_COUNT_WIDTH 44
#define MPIPE_EGRESS_PKT_COUNT__EGRESS_PKT_COUNT_RESET_VAL 0
#define MPIPE_EGRESS_PKT_COUNT__EGRESS_PKT_COUNT_RMASK _64bit(0xfffffffffff)
#define MPIPE_EGRESS_PKT_COUNT__EGRESS_PKT_COUNT_MASK  _64bit(0xfffffffffff)
#define MPIPE_EGRESS_PKT_COUNT__EGRESS_PKT_COUNT_FIELD 0,43


/*
 * Egress packet counter with read-to-clear functionality.  Saturates at all
 * 1's..
 * Provides count of all egress packets.
 */
#define MPIPE_EGRESS_PKT_COUNT_RC 0x2340

#define MPIPE_EGRESS_PKT_COUNT_RC__EGRESS_PKT_COUNT_RC_SHIFT 0
#define MPIPE_EGRESS_PKT_COUNT_RC__EGRESS_PKT_COUNT_RC_WIDTH 44
#define MPIPE_EGRESS_PKT_COUNT_RC__EGRESS_PKT_COUNT_RC_RESET_VAL 0
#define MPIPE_EGRESS_PKT_COUNT_RC__EGRESS_PKT_COUNT_RC_RMASK _64bit(0xfffffffffff)
#define MPIPE_EGRESS_PKT_COUNT_RC__EGRESS_PKT_COUNT_RC_MASK  _64bit(0xfffffffffff)
#define MPIPE_EGRESS_PKT_COUNT_RC__EGRESS_PKT_COUNT_RC_FIELD 0,43


/*
 * Error Status.
 * Indicators for various fatal and non-fatal MPIPE error conditions
 */
#define MPIPE_ERROR_STATUS 0x0600

#define MPIPE_ERROR_STATUS__MMIO_ILL_OPC_SHIFT 0
#define MPIPE_ERROR_STATUS__MMIO_ILL_OPC_WIDTH 1
#define MPIPE_ERROR_STATUS__MMIO_ILL_OPC_RESET_VAL 0
#define MPIPE_ERROR_STATUS__MMIO_ILL_OPC_RMASK 0x1
#define MPIPE_ERROR_STATUS__MMIO_ILL_OPC_MASK  0x1
#define MPIPE_ERROR_STATUS__MMIO_ILL_OPC_FIELD 0,0


/*
 * MMIO HFH Table Init Control.
 * Initialization control for the hash-for-home tables.  During
 * initialization, all tables may be written simultaneously by setting
 * STRUCT_SEL to ALL.  If access to the tables is required after traffic is
 * active on any of the interfaces, the tables must be accessed individually.
 */
#define MPIPE_HFH_INIT_CTL 0x0050

#define MPIPE_HFH_INIT_CTL__IDX_SHIFT 0
#define MPIPE_HFH_INIT_CTL__IDX_WIDTH 7
#define MPIPE_HFH_INIT_CTL__IDX_RESET_VAL 0
#define MPIPE_HFH_INIT_CTL__IDX_RMASK 0x7f
#define MPIPE_HFH_INIT_CTL__IDX_MASK  0x7f
#define MPIPE_HFH_INIT_CTL__IDX_FIELD 0,6

#define MPIPE_HFH_INIT_CTL__STRUCT_SEL_SHIFT 16
#define MPIPE_HFH_INIT_CTL__STRUCT_SEL_WIDTH 3
#define MPIPE_HFH_INIT_CTL__STRUCT_SEL_RESET_VAL 0
#define MPIPE_HFH_INIT_CTL__STRUCT_SEL_RMASK 0x7
#define MPIPE_HFH_INIT_CTL__STRUCT_SEL_MASK  0x70000
#define MPIPE_HFH_INIT_CTL__STRUCT_SEL_FIELD 16,18
#define MPIPE_HFH_INIT_CTL__STRUCT_SEL_VAL_ALL 0x0
#define MPIPE_HFH_INIT_CTL__STRUCT_SEL_VAL_IDMA 0x1
#define MPIPE_HFH_INIT_CTL__STRUCT_SEL_VAL_BSM 0x2
#define MPIPE_HFH_INIT_CTL__STRUCT_SEL_VAL_NTF 0x3
#define MPIPE_HFH_INIT_CTL__STRUCT_SEL_VAL_NTF_TUP 0x4
#define MPIPE_HFH_INIT_CTL__STRUCT_SEL_VAL_EDMA_DF 0x5
#define MPIPE_HFH_INIT_CTL__STRUCT_SEL_VAL_EDMA_RG 0x6


/*
 * HFH Table Data.
 * Read/Write data for hash-for-home table
 */
#define MPIPE_HFH_INIT_DAT 0x0058

#define MPIPE_HFH_INIT_DAT__FRACT_SHIFT 0
#define MPIPE_HFH_INIT_DAT__FRACT_WIDTH 7
#define MPIPE_HFH_INIT_DAT__FRACT_RMASK 0x7f
#define MPIPE_HFH_INIT_DAT__FRACT_MASK  0x7f
#define MPIPE_HFH_INIT_DAT__FRACT_FIELD 0,6

#define MPIPE_HFH_INIT_DAT__TILEB_SHIFT 7
#define MPIPE_HFH_INIT_DAT__TILEB_WIDTH 8
#define MPIPE_HFH_INIT_DAT__TILEB_RMASK 0xff
#define MPIPE_HFH_INIT_DAT__TILEB_MASK  0x7f80
#define MPIPE_HFH_INIT_DAT__TILEB_FIELD 7,14

#define MPIPE_HFH_INIT_DAT__TILEA_SHIFT 15
#define MPIPE_HFH_INIT_DAT__TILEA_WIDTH 8
#define MPIPE_HFH_INIT_DAT__TILEA_RMASK 0xff
#define MPIPE_HFH_INIT_DAT__TILEA_MASK  0x7f8000
#define MPIPE_HFH_INIT_DAT__TILEA_FIELD 15,22


/*
 * IDMA ASID Fault Mode.
 * Controls the behavior of iDMA when a fault occurs on the associated ASID.
 */
#define MPIPE_IDMA_ASID_FAULT_MODE 0x3fe8

#define MPIPE_IDMA_ASID_FAULT_MODE__FLUSH_SHIFT 0
#define MPIPE_IDMA_ASID_FAULT_MODE__FLUSH_WIDTH 32
#define MPIPE_IDMA_ASID_FAULT_MODE__FLUSH_RESET_VAL 0
#define MPIPE_IDMA_ASID_FAULT_MODE__FLUSH_RMASK 0xffffffff
#define MPIPE_IDMA_ASID_FAULT_MODE__FLUSH_MASK  0xffffffff
#define MPIPE_IDMA_ASID_FAULT_MODE__FLUSH_FIELD 0,31


/*
 * Ingress DMA Control.
 * Controls behavior of the ingress DMA engine.
 */
#define MPIPE_IDMA_CTL 0x1010

#define MPIPE_IDMA_CTL__TEMPORAL_CNT_SHIFT 0
#define MPIPE_IDMA_CTL__TEMPORAL_CNT_WIDTH 4
#define MPIPE_IDMA_CTL__TEMPORAL_CNT_RESET_VAL 2
#define MPIPE_IDMA_CTL__TEMPORAL_CNT_RMASK 0xf
#define MPIPE_IDMA_CTL__TEMPORAL_CNT_MASK  0xf
#define MPIPE_IDMA_CTL__TEMPORAL_CNT_FIELD 0,3

#define MPIPE_IDMA_CTL__DIAG_CTR_SEL_SHIFT 4
#define MPIPE_IDMA_CTL__DIAG_CTR_SEL_WIDTH 4
#define MPIPE_IDMA_CTL__DIAG_CTR_SEL_RESET_VAL 0
#define MPIPE_IDMA_CTL__DIAG_CTR_SEL_RMASK 0xf
#define MPIPE_IDMA_CTL__DIAG_CTR_SEL_MASK  0xf0
#define MPIPE_IDMA_CTL__DIAG_CTR_SEL_FIELD 4,7
#define MPIPE_IDMA_CTL__DIAG_CTR_SEL_VAL_PRQ 0x1
#define MPIPE_IDMA_CTL__DIAG_CTR_SEL_VAL_CHANNEL 0x2
#define MPIPE_IDMA_CTL__DIAG_CTR_SEL_VAL_FL 0x3
#define MPIPE_IDMA_CTL__DIAG_CTR_SEL_VAL_PDB 0x4
#define MPIPE_IDMA_CTL__DIAG_CTR_SEL_VAL_ICMD 0x5
#define MPIPE_IDMA_CTL__DIAG_CTR_SEL_VAL_CLSQ 0x6
#define MPIPE_IDMA_CTL__DIAG_CTR_SEL_VAL_NTF 0x7
#define MPIPE_IDMA_CTL__DIAG_CTR_SEL_VAL_CLSB 0x8

#define MPIPE_IDMA_CTL__DIAG_CTR_IDX_SHIFT 8
#define MPIPE_IDMA_CTL__DIAG_CTR_IDX_WIDTH 5
#define MPIPE_IDMA_CTL__DIAG_CTR_IDX_RESET_VAL 0
#define MPIPE_IDMA_CTL__DIAG_CTR_IDX_RMASK 0x1f
#define MPIPE_IDMA_CTL__DIAG_CTR_IDX_MASK  0x1f00
#define MPIPE_IDMA_CTL__DIAG_CTR_IDX_FIELD 8,12

#define MPIPE_IDMA_CTL__IPKT_EVT_CTR_SEL_SHIFT 16
#define MPIPE_IDMA_CTL__IPKT_EVT_CTR_SEL_WIDTH 2
#define MPIPE_IDMA_CTL__IPKT_EVT_CTR_SEL_RESET_VAL 0
#define MPIPE_IDMA_CTL__IPKT_EVT_CTR_SEL_RMASK 0x3
#define MPIPE_IDMA_CTL__IPKT_EVT_CTR_SEL_MASK  0x30000
#define MPIPE_IDMA_CTL__IPKT_EVT_CTR_SEL_FIELD 16,17
#define MPIPE_IDMA_CTL__IPKT_EVT_CTR_SEL_VAL_DROP_COMB 0x0
#define MPIPE_IDMA_CTL__IPKT_EVT_CTR_SEL_VAL_TRUNC 0x1
#define MPIPE_IDMA_CTL__IPKT_EVT_CTR_SEL_VAL_DROP 0x2
#define MPIPE_IDMA_CTL__IPKT_EVT_CTR_SEL_VAL_PKTS 0x3

#define MPIPE_IDMA_CTL__IDMA_EVT_CTR_SEL_SHIFT 20
#define MPIPE_IDMA_CTL__IDMA_EVT_CTR_SEL_WIDTH 4
#define MPIPE_IDMA_CTL__IDMA_EVT_CTR_SEL_RESET_VAL 0
#define MPIPE_IDMA_CTL__IDMA_EVT_CTR_SEL_RMASK 0xf
#define MPIPE_IDMA_CTL__IDMA_EVT_CTR_SEL_MASK  0xf00000
#define MPIPE_IDMA_CTL__IDMA_EVT_CTR_SEL_FIELD 20,23
#define MPIPE_IDMA_CTL__IDMA_EVT_CTR_SEL_VAL_BE 0x0
#define MPIPE_IDMA_CTL__IDMA_EVT_CTR_SEL_VAL_BSM_STALL 0x1
#define MPIPE_IDMA_CTL__IDMA_EVT_CTR_SEL_VAL_TLB_STALL 0x2
#define MPIPE_IDMA_CTL__IDMA_EVT_CTR_SEL_VAL_PKTS 0x3
#define MPIPE_IDMA_CTL__IDMA_EVT_CTR_SEL_VAL_BUFS 0x4
#define MPIPE_IDMA_CTL__IDMA_EVT_CTR_SEL_VAL_RETRIES 0x5
#define MPIPE_IDMA_CTL__IDMA_EVT_CTR_SEL_VAL_SDN_PKTS 0x6
#define MPIPE_IDMA_CTL__IDMA_EVT_CTR_SEL_VAL_SDN_AF 0x7
#define MPIPE_IDMA_CTL__IDMA_EVT_CTR_SEL_VAL_TRK_AF 0x8
#define MPIPE_IDMA_CTL__IDMA_EVT_CTR_SEL_VAL_NTF_AF 0x9
#define MPIPE_IDMA_CTL__IDMA_EVT_CTR_SEL_VAL_BSM_SPILL 0xa
#define MPIPE_IDMA_CTL__IDMA_EVT_CTR_SEL_VAL_BSM_FILL 0xb
#define MPIPE_IDMA_CTL__IDMA_EVT_CTR_SEL_VAL_BSM_EDMA 0xc


/*
 * iDMA Data Latency.
 * Provides random sample and record of iDMA data write latency
 */
#define MPIPE_IDMA_DAT_LAT 0x1028

#define MPIPE_IDMA_DAT_LAT__MIN_LAT_SHIFT 0
#define MPIPE_IDMA_DAT_LAT__MIN_LAT_WIDTH 15
#define MPIPE_IDMA_DAT_LAT__MIN_LAT_RESET_VAL 32767
#define MPIPE_IDMA_DAT_LAT__MIN_LAT_RMASK 0x7fff
#define MPIPE_IDMA_DAT_LAT__MIN_LAT_MASK  0x7fff
#define MPIPE_IDMA_DAT_LAT__MIN_LAT_FIELD 0,14

#define MPIPE_IDMA_DAT_LAT__MAX_LAT_SHIFT 16
#define MPIPE_IDMA_DAT_LAT__MAX_LAT_WIDTH 15
#define MPIPE_IDMA_DAT_LAT__MAX_LAT_RESET_VAL 0
#define MPIPE_IDMA_DAT_LAT__MAX_LAT_RMASK 0x7fff
#define MPIPE_IDMA_DAT_LAT__MAX_LAT_MASK  0x7fff0000
#define MPIPE_IDMA_DAT_LAT__MAX_LAT_FIELD 16,30

#define MPIPE_IDMA_DAT_LAT__CURR_LAT_SHIFT 32
#define MPIPE_IDMA_DAT_LAT__CURR_LAT_WIDTH 15
#define MPIPE_IDMA_DAT_LAT__CURR_LAT_RESET_VAL 0
#define MPIPE_IDMA_DAT_LAT__CURR_LAT_RMASK 0x7fff
#define MPIPE_IDMA_DAT_LAT__CURR_LAT_MASK  _64bit(0x7fff00000000)
#define MPIPE_IDMA_DAT_LAT__CURR_LAT_FIELD 32,46

#define MPIPE_IDMA_DAT_LAT__CLEAR_SHIFT 48
#define MPIPE_IDMA_DAT_LAT__CLEAR_WIDTH 1
#define MPIPE_IDMA_DAT_LAT__CLEAR_RESET_VAL 0
#define MPIPE_IDMA_DAT_LAT__CLEAR_RMASK 0x1
#define MPIPE_IDMA_DAT_LAT__CLEAR_MASK  _64bit(0x1000000000000)
#define MPIPE_IDMA_DAT_LAT__CLEAR_FIELD 48,48


/*
 * iDMA Info.
 * Constants related to the ingress DMA interface.
 */
#define MPIPE_IDMA_INFO 0x0508

#define MPIPE_IDMA_INFO__NUM_CHANNELS_SHIFT 0
#define MPIPE_IDMA_INFO__NUM_CHANNELS_WIDTH 8
#define MPIPE_IDMA_INFO__NUM_CHANNELS_RESET_VAL 32
#define MPIPE_IDMA_INFO__NUM_CHANNELS_RMASK 0xff
#define MPIPE_IDMA_INFO__NUM_CHANNELS_MASK  0xff
#define MPIPE_IDMA_INFO__NUM_CHANNELS_FIELD 0,7

#define MPIPE_IDMA_INFO__NUM_CLS_SHIFT 8
#define MPIPE_IDMA_INFO__NUM_CLS_WIDTH 8
#define MPIPE_IDMA_INFO__NUM_CLS_RESET_VAL 0
#define MPIPE_IDMA_INFO__NUM_CLS_RMASK 0xff
#define MPIPE_IDMA_INFO__NUM_CLS_MASK  0xff00
#define MPIPE_IDMA_INFO__NUM_CLS_FIELD 8,15

#define MPIPE_IDMA_INFO__EXT_SQN_SUPPORT_SHIFT 24
#define MPIPE_IDMA_INFO__EXT_SQN_SUPPORT_WIDTH 1
#define MPIPE_IDMA_INFO__EXT_SQN_SUPPORT_RMASK 0x1
#define MPIPE_IDMA_INFO__EXT_SQN_SUPPORT_MASK  0x1000000
#define MPIPE_IDMA_INFO__EXT_SQN_SUPPORT_FIELD 24,24


/*
 * iDMA NotifWrite Latency.
 * Provides random sample and record of iDMA descriptor write latency
 */
#define MPIPE_IDMA_NTF_LAT 0x1020

#define MPIPE_IDMA_NTF_LAT__MIN_LAT_SHIFT 0
#define MPIPE_IDMA_NTF_LAT__MIN_LAT_WIDTH 15
#define MPIPE_IDMA_NTF_LAT__MIN_LAT_RESET_VAL 32767
#define MPIPE_IDMA_NTF_LAT__MIN_LAT_RMASK 0x7fff
#define MPIPE_IDMA_NTF_LAT__MIN_LAT_MASK  0x7fff
#define MPIPE_IDMA_NTF_LAT__MIN_LAT_FIELD 0,14

#define MPIPE_IDMA_NTF_LAT__MAX_LAT_SHIFT 16
#define MPIPE_IDMA_NTF_LAT__MAX_LAT_WIDTH 15
#define MPIPE_IDMA_NTF_LAT__MAX_LAT_RESET_VAL 0
#define MPIPE_IDMA_NTF_LAT__MAX_LAT_RMASK 0x7fff
#define MPIPE_IDMA_NTF_LAT__MAX_LAT_MASK  0x7fff0000
#define MPIPE_IDMA_NTF_LAT__MAX_LAT_FIELD 16,30

#define MPIPE_IDMA_NTF_LAT__CURR_LAT_SHIFT 32
#define MPIPE_IDMA_NTF_LAT__CURR_LAT_WIDTH 15
#define MPIPE_IDMA_NTF_LAT__CURR_LAT_RESET_VAL 0
#define MPIPE_IDMA_NTF_LAT__CURR_LAT_RMASK 0x7fff
#define MPIPE_IDMA_NTF_LAT__CURR_LAT_MASK  _64bit(0x7fff00000000)
#define MPIPE_IDMA_NTF_LAT__CURR_LAT_FIELD 32,46

#define MPIPE_IDMA_NTF_LAT__CLEAR_SHIFT 48
#define MPIPE_IDMA_NTF_LAT__CLEAR_WIDTH 1
#define MPIPE_IDMA_NTF_LAT__CLEAR_RESET_VAL 0
#define MPIPE_IDMA_NTF_LAT__CLEAR_RMASK 0x1
#define MPIPE_IDMA_NTF_LAT__CLEAR_MASK  _64bit(0x1000000000000)
#define MPIPE_IDMA_NTF_LAT__CLEAR_FIELD 48,48


/*
 * iDMA Stats Counter.
 * Provides count of event selected by IDMA_CTL.IDMA_EVT_CTR_SEL with
 * read-to-clear functionality.
 */
#define MPIPE_IDMA_STAT_CTR 0x1040

#define MPIPE_IDMA_STAT_CTR__VAL_SHIFT 0
#define MPIPE_IDMA_STAT_CTR__VAL_WIDTH 32
#define MPIPE_IDMA_STAT_CTR__VAL_RESET_VAL 0
#define MPIPE_IDMA_STAT_CTR__VAL_RMASK 0xffffffff
#define MPIPE_IDMA_STAT_CTR__VAL_MASK  0xffffffff
#define MPIPE_IDMA_STAT_CTR__VAL_FIELD 0,31


/*
 * iDMA Stats Counter.
 * Provides count of event selected by IDMA_CTL.IDMA_EVT_CTR_SEL
 */
#define MPIPE_IDMA_STAT_CTR_RD 0x1048

#define MPIPE_IDMA_STAT_CTR_RD__VAL_SHIFT 0
#define MPIPE_IDMA_STAT_CTR_RD__VAL_WIDTH 32
#define MPIPE_IDMA_STAT_CTR_RD__VAL_RESET_VAL 0
#define MPIPE_IDMA_STAT_CTR_RD__VAL_RMASK 0xffffffff
#define MPIPE_IDMA_STAT_CTR_RD__VAL_MASK  0xffffffff
#define MPIPE_IDMA_STAT_CTR_RD__VAL_FIELD 0,31


/*
 * iDMA Status.
 * iDMA status
 */
#define MPIPE_IDMA_STS 0x1018

#define MPIPE_IDMA_STS__DIAG_CTR_VAL_SHIFT 0
#define MPIPE_IDMA_STS__DIAG_CTR_VAL_WIDTH 11
#define MPIPE_IDMA_STS__DIAG_CTR_VAL_RESET_VAL 0
#define MPIPE_IDMA_STS__DIAG_CTR_VAL_RMASK 0x7ff
#define MPIPE_IDMA_STS__DIAG_CTR_VAL_MASK  0x7ff
#define MPIPE_IDMA_STS__DIAG_CTR_VAL_FIELD 0,10


/*
 * Ingress byte counter..
 * Provides count of bytes received from MACs (does not include overhead such
 * as IPG, preamble, or CRC unless those are provided in the data to SW).
 * Wraps when incremented beyond 2^50.
 */
#define MPIPE_INGRESS_BYTE_COUNT 0x2348

#define MPIPE_INGRESS_BYTE_COUNT__INGRESS_BYTE_COUNT_SHIFT 0
#define MPIPE_INGRESS_BYTE_COUNT__INGRESS_BYTE_COUNT_WIDTH 50
#define MPIPE_INGRESS_BYTE_COUNT__INGRESS_BYTE_COUNT_RESET_VAL 0
#define MPIPE_INGRESS_BYTE_COUNT__INGRESS_BYTE_COUNT_RMASK _64bit(0x3ffffffffffff)
#define MPIPE_INGRESS_BYTE_COUNT__INGRESS_BYTE_COUNT_MASK  _64bit(0x3ffffffffffff)
#define MPIPE_INGRESS_BYTE_COUNT__INGRESS_BYTE_COUNT_FIELD 0,49


/*
 * Ingress byte counter with read-to-clear functionality.
 * Provides count of bytes received from MACs (does not include overhead such
 * as IPG, preamble, or CRC unless those are provided in the data to SW).
 * Clears on read.  Wraps when incremented beyond 2^50.
 */
#define MPIPE_INGRESS_BYTE_COUNT_RC 0x2350

#define MPIPE_INGRESS_BYTE_COUNT_RC__INGRESS_BYTE_COUNT_RC_SHIFT 0
#define MPIPE_INGRESS_BYTE_COUNT_RC__INGRESS_BYTE_COUNT_RC_WIDTH 50
#define MPIPE_INGRESS_BYTE_COUNT_RC__INGRESS_BYTE_COUNT_RC_RESET_VAL 0
#define MPIPE_INGRESS_BYTE_COUNT_RC__INGRESS_BYTE_COUNT_RC_RMASK _64bit(0x3ffffffffffff)
#define MPIPE_INGRESS_BYTE_COUNT_RC__INGRESS_BYTE_COUNT_RC_MASK  _64bit(0x3ffffffffffff)
#define MPIPE_INGRESS_BYTE_COUNT_RC__INGRESS_BYTE_COUNT_RC_FIELD 0,49


/*
 * Ingress packet drop counter.
 * Provides count of packets dropped (or not fully delivered) for any reason
 * including iPkt-truncate, iPkt-discard, classifier-discard, load-balancer
 * discard, buffer error, TLB fault drop.  Saturates at all 1's.
 */
#define MPIPE_INGRESS_DROP_COUNT 0x2318

#define MPIPE_INGRESS_DROP_COUNT__INGRESS_DROP_COUNT_SHIFT 0
#define MPIPE_INGRESS_DROP_COUNT__INGRESS_DROP_COUNT_WIDTH 44
#define MPIPE_INGRESS_DROP_COUNT__INGRESS_DROP_COUNT_RESET_VAL 0
#define MPIPE_INGRESS_DROP_COUNT__INGRESS_DROP_COUNT_RMASK _64bit(0xfffffffffff)
#define MPIPE_INGRESS_DROP_COUNT__INGRESS_DROP_COUNT_MASK  _64bit(0xfffffffffff)
#define MPIPE_INGRESS_DROP_COUNT__INGRESS_DROP_COUNT_FIELD 0,43


/*
 * Ingress packet drop counter with read-to-clear functionality.
 * Provides count of packets dropped (or not fully delivered) for any reason
 * including iPkt-truncate, iPkt-discard, classifier-discard, load-balancer
 * discard, buffer error, TLB fault drop.  Saturates at all 1's.
 */
#define MPIPE_INGRESS_DROP_COUNT_RC 0x2320

#define MPIPE_INGRESS_DROP_COUNT_RC__INGRESS_DROP_COUNT_RC_SHIFT 0
#define MPIPE_INGRESS_DROP_COUNT_RC__INGRESS_DROP_COUNT_RC_WIDTH 44
#define MPIPE_INGRESS_DROP_COUNT_RC__INGRESS_DROP_COUNT_RC_RESET_VAL 0
#define MPIPE_INGRESS_DROP_COUNT_RC__INGRESS_DROP_COUNT_RC_RMASK _64bit(0xfffffffffff)
#define MPIPE_INGRESS_DROP_COUNT_RC__INGRESS_DROP_COUNT_RC_MASK  _64bit(0xfffffffffff)
#define MPIPE_INGRESS_DROP_COUNT_RC__INGRESS_DROP_COUNT_RC_FIELD 0,43


/*
 * Ingress packet counter.
 * Provides count of all ingress packets.  Saturates at all 1's.
 */
#define MPIPE_INGRESS_PKT_COUNT 0x2328

#define MPIPE_INGRESS_PKT_COUNT__INGRESS_PKT_COUNT_SHIFT 0
#define MPIPE_INGRESS_PKT_COUNT__INGRESS_PKT_COUNT_WIDTH 44
#define MPIPE_INGRESS_PKT_COUNT__INGRESS_PKT_COUNT_RESET_VAL 0
#define MPIPE_INGRESS_PKT_COUNT__INGRESS_PKT_COUNT_RMASK _64bit(0xfffffffffff)
#define MPIPE_INGRESS_PKT_COUNT__INGRESS_PKT_COUNT_MASK  _64bit(0xfffffffffff)
#define MPIPE_INGRESS_PKT_COUNT__INGRESS_PKT_COUNT_FIELD 0,43


/*
 * Ingress packet counter with read-to-clear functionality.  Saturates at all
 * 1's..
 * Provides count of all ingress packets.
 */
#define MPIPE_INGRESS_PKT_COUNT_RC 0x2330

#define MPIPE_INGRESS_PKT_COUNT_RC__INGRESS_PKT_COUNT_RC_SHIFT 0
#define MPIPE_INGRESS_PKT_COUNT_RC__INGRESS_PKT_COUNT_RC_WIDTH 44
#define MPIPE_INGRESS_PKT_COUNT_RC__INGRESS_PKT_COUNT_RC_RESET_VAL 0
#define MPIPE_INGRESS_PKT_COUNT_RC__INGRESS_PKT_COUNT_RC_RMASK _64bit(0xfffffffffff)
#define MPIPE_INGRESS_PKT_COUNT_RC__INGRESS_PKT_COUNT_RC_MASK  _64bit(0xfffffffffff)
#define MPIPE_INGRESS_PKT_COUNT_RC__INGRESS_PKT_COUNT_RC_FIELD 0,43


/*
 * Bindings for interrupt vectors.
 * This register provides read/write access to all of the interrupt bindings
 * for the MPIPE.  The VEC_SEL field is used to select the vector being
 * configured and the BIND_SEL selects the interrupt within the vector.  To
 * read a binding, first write the VEC_SEL and BIND_SEL fields along with a 1
 * in the NW field.  Then read back the register.
 */
#define MPIPE_INT_BIND 0x3100

#define MPIPE_INT_BIND__ENABLE_SHIFT 0
#define MPIPE_INT_BIND__ENABLE_WIDTH 1
#define MPIPE_INT_BIND__ENABLE_RESET_VAL 0
#define MPIPE_INT_BIND__ENABLE_RMASK 0x1
#define MPIPE_INT_BIND__ENABLE_MASK  0x1
#define MPIPE_INT_BIND__ENABLE_FIELD 0,0

#define MPIPE_INT_BIND__MODE_SHIFT 1
#define MPIPE_INT_BIND__MODE_WIDTH 1
#define MPIPE_INT_BIND__MODE_RESET_VAL 0
#define MPIPE_INT_BIND__MODE_RMASK 0x1
#define MPIPE_INT_BIND__MODE_MASK  0x2
#define MPIPE_INT_BIND__MODE_FIELD 1,1

#define MPIPE_INT_BIND__TILEID_SHIFT 2
#define MPIPE_INT_BIND__TILEID_WIDTH 8
#define MPIPE_INT_BIND__TILEID_RMASK 0xff
#define MPIPE_INT_BIND__TILEID_MASK  0x3fc
#define MPIPE_INT_BIND__TILEID_FIELD 2,9

#define MPIPE_INT_BIND__INT_NUM_SHIFT 10
#define MPIPE_INT_BIND__INT_NUM_WIDTH 2
#define MPIPE_INT_BIND__INT_NUM_RMASK 0x3
#define MPIPE_INT_BIND__INT_NUM_MASK  0xc00
#define MPIPE_INT_BIND__INT_NUM_FIELD 10,11

#define MPIPE_INT_BIND__EVT_NUM_SHIFT 12
#define MPIPE_INT_BIND__EVT_NUM_WIDTH 5
#define MPIPE_INT_BIND__EVT_NUM_RMASK 0x1f
#define MPIPE_INT_BIND__EVT_NUM_MASK  0x1f000
#define MPIPE_INT_BIND__EVT_NUM_FIELD 12,16

#define MPIPE_INT_BIND__VEC_SEL_SHIFT 32
#define MPIPE_INT_BIND__VEC_SEL_WIDTH 4
#define MPIPE_INT_BIND__VEC_SEL_RMASK 0xf
#define MPIPE_INT_BIND__VEC_SEL_MASK  _64bit(0xf00000000)
#define MPIPE_INT_BIND__VEC_SEL_FIELD 32,35
#define MPIPE_INT_BIND__VEC_SEL_VAL_GENERAL_INTS 0x0
#define MPIPE_INT_BIND__VEC_SEL_VAL_IDMA_PKT_CTRS 0x1
#define MPIPE_INT_BIND__VEC_SEL_VAL_EDMA_NOTIF 0x2
#define MPIPE_INT_BIND__VEC_SEL_VAL_IDMA_NOTIF0 0x3
#define MPIPE_INT_BIND__VEC_SEL_VAL_IDMA_NOTIF1 0x4
#define MPIPE_INT_BIND__VEC_SEL_VAL_IDMA_NOTIF2 0x5
#define MPIPE_INT_BIND__VEC_SEL_VAL_IDMA_NOTIF3 0x6
#define MPIPE_INT_BIND__VEC_SEL_VAL_BSM 0x7
#define MPIPE_INT_BIND__VEC_SEL_VAL_MAC 0x8

#define MPIPE_INT_BIND__BIND_SEL_SHIFT 40
#define MPIPE_INT_BIND__BIND_SEL_WIDTH 6
#define MPIPE_INT_BIND__BIND_SEL_RMASK 0x3f
#define MPIPE_INT_BIND__BIND_SEL_MASK  _64bit(0x3f0000000000)
#define MPIPE_INT_BIND__BIND_SEL_FIELD 40,45

#define MPIPE_INT_BIND__NW_SHIFT 48
#define MPIPE_INT_BIND__NW_WIDTH 1
#define MPIPE_INT_BIND__NW_RESET_VAL 0
#define MPIPE_INT_BIND__NW_RMASK 0x1
#define MPIPE_INT_BIND__NW_MASK  _64bit(0x1000000000000)
#define MPIPE_INT_BIND__NW_FIELD 48,48


/*
 * Interrupt vector-0, write-one-to-clear.
 * This describes the interrupt status vector that is accessible through
 * INT_VEC0_W1TC and INT_VEC0_RTC.
 */
#define MPIPE_INT_VEC0 0x3000

#define MPIPE_INT_VEC0__BSM_LIM_ERR_SHIFT 0
#define MPIPE_INT_VEC0__BSM_LIM_ERR_WIDTH 1
#define MPIPE_INT_VEC0__BSM_LIM_ERR_RESET_VAL 0
#define MPIPE_INT_VEC0__BSM_LIM_ERR_RMASK 0x1
#define MPIPE_INT_VEC0__BSM_LIM_ERR_MASK  0x1
#define MPIPE_INT_VEC0__BSM_LIM_ERR_FIELD 0,0

#define MPIPE_INT_VEC0__CLS_TINT_SHIFT 1
#define MPIPE_INT_VEC0__CLS_TINT_WIDTH 1
#define MPIPE_INT_VEC0__CLS_TINT_RESET_VAL 0
#define MPIPE_INT_VEC0__CLS_TINT_RMASK 0x1
#define MPIPE_INT_VEC0__CLS_TINT_MASK  0x2
#define MPIPE_INT_VEC0__CLS_TINT_FIELD 1,1

#define MPIPE_INT_VEC0__EDMA_POST_ERR_SHIFT 2
#define MPIPE_INT_VEC0__EDMA_POST_ERR_WIDTH 1
#define MPIPE_INT_VEC0__EDMA_POST_ERR_RESET_VAL 0
#define MPIPE_INT_VEC0__EDMA_POST_ERR_RMASK 0x1
#define MPIPE_INT_VEC0__EDMA_POST_ERR_MASK  0x4
#define MPIPE_INT_VEC0__EDMA_POST_ERR_FIELD 2,2

#define MPIPE_INT_VEC0__IPKT_SQN_OVERFLOW_SHIFT 3
#define MPIPE_INT_VEC0__IPKT_SQN_OVERFLOW_WIDTH 1
#define MPIPE_INT_VEC0__IPKT_SQN_OVERFLOW_RESET_VAL 0
#define MPIPE_INT_VEC0__IPKT_SQN_OVERFLOW_RMASK 0x1
#define MPIPE_INT_VEC0__IPKT_SQN_OVERFLOW_MASK  0x8
#define MPIPE_INT_VEC0__IPKT_SQN_OVERFLOW_FIELD 3,3

#define MPIPE_INT_VEC0__CLS_CYC_BUDGET_EXPIRED_SHIFT 4
#define MPIPE_INT_VEC0__CLS_CYC_BUDGET_EXPIRED_WIDTH 1
#define MPIPE_INT_VEC0__CLS_CYC_BUDGET_EXPIRED_RESET_VAL 0
#define MPIPE_INT_VEC0__CLS_CYC_BUDGET_EXPIRED_RMASK 0x1
#define MPIPE_INT_VEC0__CLS_CYC_BUDGET_EXPIRED_MASK  0x10
#define MPIPE_INT_VEC0__CLS_CYC_BUDGET_EXPIRED_FIELD 4,4

#define MPIPE_INT_VEC0__MMIO_ERR_SHIFT 5
#define MPIPE_INT_VEC0__MMIO_ERR_WIDTH 1
#define MPIPE_INT_VEC0__MMIO_ERR_RESET_VAL 0
#define MPIPE_INT_VEC0__MMIO_ERR_RMASK 0x1
#define MPIPE_INT_VEC0__MMIO_ERR_MASK  0x20
#define MPIPE_INT_VEC0__MMIO_ERR_FIELD 5,5

#define MPIPE_INT_VEC0__IDMA_TLB_MISS_SHIFT 6
#define MPIPE_INT_VEC0__IDMA_TLB_MISS_WIDTH 1
#define MPIPE_INT_VEC0__IDMA_TLB_MISS_RESET_VAL 0
#define MPIPE_INT_VEC0__IDMA_TLB_MISS_RMASK 0x1
#define MPIPE_INT_VEC0__IDMA_TLB_MISS_MASK  0x40
#define MPIPE_INT_VEC0__IDMA_TLB_MISS_FIELD 6,6

#define MPIPE_INT_VEC0__EDMA_TLB_MISS_SHIFT 7
#define MPIPE_INT_VEC0__EDMA_TLB_MISS_WIDTH 1
#define MPIPE_INT_VEC0__EDMA_TLB_MISS_RESET_VAL 0
#define MPIPE_INT_VEC0__EDMA_TLB_MISS_RMASK 0x1
#define MPIPE_INT_VEC0__EDMA_TLB_MISS_MASK  0x80
#define MPIPE_INT_VEC0__EDMA_TLB_MISS_FIELD 7,7

#define MPIPE_INT_VEC0__EDMA_DESC_DISCARD_SHIFT 8
#define MPIPE_INT_VEC0__EDMA_DESC_DISCARD_WIDTH 1
#define MPIPE_INT_VEC0__EDMA_DESC_DISCARD_RESET_VAL 0
#define MPIPE_INT_VEC0__EDMA_DESC_DISCARD_RMASK 0x1
#define MPIPE_INT_VEC0__EDMA_DESC_DISCARD_MASK  0x100
#define MPIPE_INT_VEC0__EDMA_DESC_DISCARD_FIELD 8,8

#define MPIPE_INT_VEC0__LBL_CTR_OVFL_SHIFT 9
#define MPIPE_INT_VEC0__LBL_CTR_OVFL_WIDTH 1
#define MPIPE_INT_VEC0__LBL_CTR_OVFL_RESET_VAL 0
#define MPIPE_INT_VEC0__LBL_CTR_OVFL_RMASK 0x1
#define MPIPE_INT_VEC0__LBL_CTR_OVFL_MASK  0x200
#define MPIPE_INT_VEC0__LBL_CTR_OVFL_FIELD 9,9

#define MPIPE_INT_VEC0__EDMA_EVT_CTR_OVFL_SHIFT 10
#define MPIPE_INT_VEC0__EDMA_EVT_CTR_OVFL_WIDTH 1
#define MPIPE_INT_VEC0__EDMA_EVT_CTR_OVFL_RESET_VAL 0
#define MPIPE_INT_VEC0__EDMA_EVT_CTR_OVFL_RMASK 0x1
#define MPIPE_INT_VEC0__EDMA_EVT_CTR_OVFL_MASK  0x400
#define MPIPE_INT_VEC0__EDMA_EVT_CTR_OVFL_FIELD 10,10

#define MPIPE_INT_VEC0__IPKT_EVT_CTR_OVFL_SHIFT 11
#define MPIPE_INT_VEC0__IPKT_EVT_CTR_OVFL_WIDTH 1
#define MPIPE_INT_VEC0__IPKT_EVT_CTR_OVFL_RESET_VAL 0
#define MPIPE_INT_VEC0__IPKT_EVT_CTR_OVFL_RMASK 0x1
#define MPIPE_INT_VEC0__IPKT_EVT_CTR_OVFL_MASK  0x800
#define MPIPE_INT_VEC0__IPKT_EVT_CTR_OVFL_FIELD 11,11

#define MPIPE_INT_VEC0__IDMA_EVT_CTR_OVFL_SHIFT 12
#define MPIPE_INT_VEC0__IDMA_EVT_CTR_OVFL_WIDTH 1
#define MPIPE_INT_VEC0__IDMA_EVT_CTR_OVFL_RESET_VAL 0
#define MPIPE_INT_VEC0__IDMA_EVT_CTR_OVFL_RMASK 0x1
#define MPIPE_INT_VEC0__IDMA_EVT_CTR_OVFL_MASK  0x1000
#define MPIPE_INT_VEC0__IDMA_EVT_CTR_OVFL_FIELD 12,12

#define MPIPE_INT_VEC0__LBL_NR_UNDERFLOW_SHIFT 13
#define MPIPE_INT_VEC0__LBL_NR_UNDERFLOW_WIDTH 1
#define MPIPE_INT_VEC0__LBL_NR_UNDERFLOW_RESET_VAL 0
#define MPIPE_INT_VEC0__LBL_NR_UNDERFLOW_RMASK 0x1
#define MPIPE_INT_VEC0__LBL_NR_UNDERFLOW_MASK  0x2000
#define MPIPE_INT_VEC0__LBL_NR_UNDERFLOW_FIELD 13,13

#define MPIPE_INT_VEC0__CFG_PROT_VIOL_SHIFT 14
#define MPIPE_INT_VEC0__CFG_PROT_VIOL_WIDTH 1
#define MPIPE_INT_VEC0__CFG_PROT_VIOL_RESET_VAL 0
#define MPIPE_INT_VEC0__CFG_PROT_VIOL_RMASK 0x1
#define MPIPE_INT_VEC0__CFG_PROT_VIOL_MASK  0x4000
#define MPIPE_INT_VEC0__CFG_PROT_VIOL_FIELD 14,14

#define MPIPE_INT_VEC0__IPKT_DROP_SHIFT 15
#define MPIPE_INT_VEC0__IPKT_DROP_WIDTH 1
#define MPIPE_INT_VEC0__IPKT_DROP_RESET_VAL 0
#define MPIPE_INT_VEC0__IPKT_DROP_RMASK 0x1
#define MPIPE_INT_VEC0__IPKT_DROP_MASK  0x8000
#define MPIPE_INT_VEC0__IPKT_DROP_FIELD 15,15

#define MPIPE_INT_VEC0__LBL_DROP_SHIFT 16
#define MPIPE_INT_VEC0__LBL_DROP_WIDTH 1
#define MPIPE_INT_VEC0__LBL_DROP_RESET_VAL 0
#define MPIPE_INT_VEC0__LBL_DROP_RMASK 0x1
#define MPIPE_INT_VEC0__LBL_DROP_MASK  0x10000
#define MPIPE_INT_VEC0__LBL_DROP_FIELD 16,16

#define MPIPE_INT_VEC0__IDMA_DROP_SHIFT 17
#define MPIPE_INT_VEC0__IDMA_DROP_WIDTH 1
#define MPIPE_INT_VEC0__IDMA_DROP_RESET_VAL 0
#define MPIPE_INT_VEC0__IDMA_DROP_RMASK 0x1
#define MPIPE_INT_VEC0__IDMA_DROP_MASK  0x20000
#define MPIPE_INT_VEC0__IDMA_DROP_FIELD 17,17

#define MPIPE_INT_VEC0__PRQ_FULL_SHIFT 18
#define MPIPE_INT_VEC0__PRQ_FULL_WIDTH 1
#define MPIPE_INT_VEC0__PRQ_FULL_RESET_VAL 0
#define MPIPE_INT_VEC0__PRQ_FULL_RMASK 0x1
#define MPIPE_INT_VEC0__PRQ_FULL_MASK  0x40000
#define MPIPE_INT_VEC0__PRQ_FULL_FIELD 18,18

#define MPIPE_INT_VEC0__MAC_ERR_SHIFT 19
#define MPIPE_INT_VEC0__MAC_ERR_WIDTH 1
#define MPIPE_INT_VEC0__MAC_ERR_RESET_VAL 0
#define MPIPE_INT_VEC0__MAC_ERR_RMASK 0x1
#define MPIPE_INT_VEC0__MAC_ERR_MASK  0x80000
#define MPIPE_INT_VEC0__MAC_ERR_FIELD 19,19


/*
 * Interrupt vector-0, read-to-clear.
 * Interrupt status vector with read-to-clear functionality.  Provides access
 * to the same status bits that are visible in INT_VEC0_W1TC.  Reading this
 * register clears all of the associated interrupts.  Bit definitions are
 * provided in the INT_VEC0 register description.
 */
#define MPIPE_INT_VEC0_RTC 0x3080

#define MPIPE_INT_VEC0_RTC__INT_VEC0_RTC_SHIFT 0
#define MPIPE_INT_VEC0_RTC__INT_VEC0_RTC_WIDTH 21
#define MPIPE_INT_VEC0_RTC__INT_VEC0_RTC_RESET_VAL 0
#define MPIPE_INT_VEC0_RTC__INT_VEC0_RTC_RMASK 0x1fffff
#define MPIPE_INT_VEC0_RTC__INT_VEC0_RTC_MASK  0x1fffff
#define MPIPE_INT_VEC0_RTC__INT_VEC0_RTC_FIELD 0,20


/*
 * Interrupt vector-0, write-one-to-clear.
 * Interrupt status vector with write-one-to-clear functionality.  Provides
 * access to the same status bits that are visible in INT_VEC0_RTC.  Bit
 * definitions are provided in the INT_VEC0 register description.
 */
#define MPIPE_INT_VEC0_W1TC 0x3000

#define MPIPE_INT_VEC0_W1TC__INT_VEC0_W1TC_SHIFT 0
#define MPIPE_INT_VEC0_W1TC__INT_VEC0_W1TC_WIDTH 21
#define MPIPE_INT_VEC0_W1TC__INT_VEC0_W1TC_RESET_VAL 0
#define MPIPE_INT_VEC0_W1TC__INT_VEC0_W1TC_RMASK 0x1fffff
#define MPIPE_INT_VEC0_W1TC__INT_VEC0_W1TC_MASK  0x1fffff
#define MPIPE_INT_VEC0_W1TC__INT_VEC0_W1TC_FIELD 0,20


/*
 * Interrupt vector-1, read-to-clear.
 * Interrupt status vector with read-to-clear functionality.  Provides access
 * to the same status bits that are visible in INT_VEC1_W1TC.  This vector
 * contains the interrupts associated with the 32 packet counters.  Reading
 * this register clears all of the associated interrupts.
 */
#define MPIPE_INT_VEC1_RTC 0x3088

#define MPIPE_INT_VEC1_RTC__INT_VEC1_RTC_SHIFT 0
#define MPIPE_INT_VEC1_RTC__INT_VEC1_RTC_WIDTH 32
#define MPIPE_INT_VEC1_RTC__INT_VEC1_RTC_RESET_VAL 0
#define MPIPE_INT_VEC1_RTC__INT_VEC1_RTC_RMASK 0xffffffff
#define MPIPE_INT_VEC1_RTC__INT_VEC1_RTC_MASK  0xffffffff
#define MPIPE_INT_VEC1_RTC__INT_VEC1_RTC_FIELD 0,31


/*
 * Interrupt vector-1, write-one-to-clear.
 * Interrupt status vector with write-one-to-clear functionality.  Provides
 * access to the same status bits that are visible in INT_VEC1_RTC.  This
 * vector contains the interrupts associated with the 32 packet counters.
 * Writing a 1 clears the status bit.
 */
#define MPIPE_INT_VEC1_W1TC 0x3008

#define MPIPE_INT_VEC1_W1TC__INT_VEC1_W1TC_SHIFT 0
#define MPIPE_INT_VEC1_W1TC__INT_VEC1_W1TC_WIDTH 32
#define MPIPE_INT_VEC1_W1TC__INT_VEC1_W1TC_RESET_VAL 0
#define MPIPE_INT_VEC1_W1TC__INT_VEC1_W1TC_RMASK 0xffffffff
#define MPIPE_INT_VEC1_W1TC__INT_VEC1_W1TC_MASK  0xffffffff
#define MPIPE_INT_VEC1_W1TC__INT_VEC1_W1TC_FIELD 0,31


/*
 * Interrupt vector-2, read-to-clear.
 * Interrupt status vector with read-to-clear functionality.  Provides access
 * to the same status bits that are visible in INT_VEC2_W1TC.  This vector
 * contains the interrupts associated with the eDMA rings.  Reading this
 * register clears all of the associated interrupts.
 */
#define MPIPE_INT_VEC2_RTC 0x3090

#define MPIPE_INT_VEC2_RTC__INT_VEC2_RTC_SHIFT 0
#define MPIPE_INT_VEC2_RTC__INT_VEC2_RTC_WIDTH 64
#define MPIPE_INT_VEC2_RTC__INT_VEC2_RTC_RESET_VAL 0
#define MPIPE_INT_VEC2_RTC__INT_VEC2_RTC_RMASK _64bit(0xffffffffffffffff)
#define MPIPE_INT_VEC2_RTC__INT_VEC2_RTC_MASK  _64bit(0xffffffffffffffff)
#define MPIPE_INT_VEC2_RTC__INT_VEC2_RTC_FIELD 0,63


/*
 * Interrupt vector-2, write-one-to-clear.
 * Interrupt status vector with write-one-to-clear functionality.  Provides
 * access to the same status bits that are visible in INT_VEC2_RTC.  This
 * vector contains the interrupts associated with the eDMA rings.  Writing a
 * 1 clears the status bit.
 */
#define MPIPE_INT_VEC2_W1TC 0x3010

#define MPIPE_INT_VEC2_W1TC__INT_VEC2_W1TC_SHIFT 0
#define MPIPE_INT_VEC2_W1TC__INT_VEC2_W1TC_WIDTH 64
#define MPIPE_INT_VEC2_W1TC__INT_VEC2_W1TC_RESET_VAL 0
#define MPIPE_INT_VEC2_W1TC__INT_VEC2_W1TC_RMASK _64bit(0xffffffffffffffff)
#define MPIPE_INT_VEC2_W1TC__INT_VEC2_W1TC_MASK  _64bit(0xffffffffffffffff)
#define MPIPE_INT_VEC2_W1TC__INT_VEC2_W1TC_FIELD 0,63


/*
 * Interrupt vector 3, read-to-clear.
 * Interrupt status vector with read-to-clear functionality.  Provides access
 * to the same status bits that are visible in INT_VEC3_W1TC.  This vector
 * contains the interrupts associated with the iDMA NotifRings.  Reading this
 * register clears all of the associated interrupts.
 */
#define MPIPE_INT_VEC3_RTC 0x3098

#define MPIPE_INT_VEC3_RTC__INT_VEC3_RTC_SHIFT 0
#define MPIPE_INT_VEC3_RTC__INT_VEC3_RTC_WIDTH 64
#define MPIPE_INT_VEC3_RTC__INT_VEC3_RTC_RESET_VAL 0
#define MPIPE_INT_VEC3_RTC__INT_VEC3_RTC_RMASK _64bit(0xffffffffffffffff)
#define MPIPE_INT_VEC3_RTC__INT_VEC3_RTC_MASK  _64bit(0xffffffffffffffff)
#define MPIPE_INT_VEC3_RTC__INT_VEC3_RTC_FIELD 0,63


/*
 * Interrupt vector 3, write-one-to-clear.
 * Interrupt status vector with write-one-to-clear functionality.  Provides
 * access to the same status bits that are visible in INT_VEC3_RTC.  This
 * vector contains the interrupts associated with the iDMA NotifRings.
 * Writing a 1 clears the status bit.
 */
#define MPIPE_INT_VEC3_W1TC 0x3018

#define MPIPE_INT_VEC3_W1TC__INT_VEC3_W1TC_SHIFT 0
#define MPIPE_INT_VEC3_W1TC__INT_VEC3_W1TC_WIDTH 64
#define MPIPE_INT_VEC3_W1TC__INT_VEC3_W1TC_RESET_VAL 0
#define MPIPE_INT_VEC3_W1TC__INT_VEC3_W1TC_RMASK _64bit(0xffffffffffffffff)
#define MPIPE_INT_VEC3_W1TC__INT_VEC3_W1TC_MASK  _64bit(0xffffffffffffffff)
#define MPIPE_INT_VEC3_W1TC__INT_VEC3_W1TC_FIELD 0,63


/*
 * Interrupt vector 4, read-to-clear.
 * Interrupt status vector with read-to-clear functionality.  Provides access
 * to the same status bits that are visible in INT_VEC4_W1TC.  This vector
 * contains the interrupts associated with the iDMA NotifRings.  Reading this
 * register clears all of the associated interrupts.
 */
#define MPIPE_INT_VEC4_RTC 0x30a0

#define MPIPE_INT_VEC4_RTC__INT_VEC4_RTC_SHIFT 0
#define MPIPE_INT_VEC4_RTC__INT_VEC4_RTC_WIDTH 64
#define MPIPE_INT_VEC4_RTC__INT_VEC4_RTC_RESET_VAL 0
#define MPIPE_INT_VEC4_RTC__INT_VEC4_RTC_RMASK _64bit(0xffffffffffffffff)
#define MPIPE_INT_VEC4_RTC__INT_VEC4_RTC_MASK  _64bit(0xffffffffffffffff)
#define MPIPE_INT_VEC4_RTC__INT_VEC4_RTC_FIELD 0,63


/*
 * Interrupt vector 4, write-one-to-clear.
 * Interrupt status vector with write-one-to-clear functionality.  Provides
 * access to the same status bits that are visible in INT_VEC4_RTC.  This
 * vector contains the interrupts associated with the iDMA NotifRings.
 * Writing a 1 clears the status bit.
 */
#define MPIPE_INT_VEC4_W1TC 0x3020

#define MPIPE_INT_VEC4_W1TC__INT_VEC4_W1TC_SHIFT 0
#define MPIPE_INT_VEC4_W1TC__INT_VEC4_W1TC_WIDTH 64
#define MPIPE_INT_VEC4_W1TC__INT_VEC4_W1TC_RESET_VAL 0
#define MPIPE_INT_VEC4_W1TC__INT_VEC4_W1TC_RMASK _64bit(0xffffffffffffffff)
#define MPIPE_INT_VEC4_W1TC__INT_VEC4_W1TC_MASK  _64bit(0xffffffffffffffff)
#define MPIPE_INT_VEC4_W1TC__INT_VEC4_W1TC_FIELD 0,63


/*
 * Interrupt vector 5, read-to-clear.
 * Interrupt status vector with read-to-clear functionality.  Provides access
 * to the same status bits that are visible in INT_VEC5_W1TC.  This vector
 * contains the interrupts associated with the iDMA NotifRings.  Reading this
 * register clears all of the associated interrupts.
 */
#define MPIPE_INT_VEC5_RTC 0x30a8

#define MPIPE_INT_VEC5_RTC__INT_VEC5_RTC_SHIFT 0
#define MPIPE_INT_VEC5_RTC__INT_VEC5_RTC_WIDTH 64
#define MPIPE_INT_VEC5_RTC__INT_VEC5_RTC_RESET_VAL 0
#define MPIPE_INT_VEC5_RTC__INT_VEC5_RTC_RMASK _64bit(0xffffffffffffffff)
#define MPIPE_INT_VEC5_RTC__INT_VEC5_RTC_MASK  _64bit(0xffffffffffffffff)
#define MPIPE_INT_VEC5_RTC__INT_VEC5_RTC_FIELD 0,63


/*
 * Interrupt vector 5, write-one-to-clear.
 * Interrupt status vector with write-one-to-clear functionality.  Provides
 * access to the same status bits that are visible in INT_VEC5_RTC.  This
 * vector contains the interrupts associated with the iDMA NotifRings.
 * Writing a 1 clears the status bit.
 */
#define MPIPE_INT_VEC5_W1TC 0x3028

#define MPIPE_INT_VEC5_W1TC__INT_VEC5_W1TC_SHIFT 0
#define MPIPE_INT_VEC5_W1TC__INT_VEC5_W1TC_WIDTH 64
#define MPIPE_INT_VEC5_W1TC__INT_VEC5_W1TC_RESET_VAL 0
#define MPIPE_INT_VEC5_W1TC__INT_VEC5_W1TC_RMASK _64bit(0xffffffffffffffff)
#define MPIPE_INT_VEC5_W1TC__INT_VEC5_W1TC_MASK  _64bit(0xffffffffffffffff)
#define MPIPE_INT_VEC5_W1TC__INT_VEC5_W1TC_FIELD 0,63


/*
 * Interrupt vector 6, read-to-clear.
 * Interrupt status vector with read-to-clear functionality.  Provides access
 * to the same status bits that are visible in INT_VEC6_W1TC.  This vector
 * contains the interrupts associated with the iDMA NotifRings.  Reading this
 * register clears all of the associated interrupts.
 */
#define MPIPE_INT_VEC6_RTC 0x30b0

#define MPIPE_INT_VEC6_RTC__INT_VEC6_RTC_SHIFT 0
#define MPIPE_INT_VEC6_RTC__INT_VEC6_RTC_WIDTH 64
#define MPIPE_INT_VEC6_RTC__INT_VEC6_RTC_RESET_VAL 0
#define MPIPE_INT_VEC6_RTC__INT_VEC6_RTC_RMASK _64bit(0xffffffffffffffff)
#define MPIPE_INT_VEC6_RTC__INT_VEC6_RTC_MASK  _64bit(0xffffffffffffffff)
#define MPIPE_INT_VEC6_RTC__INT_VEC6_RTC_FIELD 0,63


/*
 * Interrupt vector 6, write-one-to-clear.
 * Interrupt status vector with write-one-to-clear functionality.  Provides
 * access to the same status bits that are visible in INT_VEC6_RTC.  This
 * vector contains the interrupts associated with the iDMA NotifRings.
 * Writing a 1 clears the status bit.
 */
#define MPIPE_INT_VEC6_W1TC 0x3030

#define MPIPE_INT_VEC6_W1TC__INT_VEC6_W1TC_SHIFT 0
#define MPIPE_INT_VEC6_W1TC__INT_VEC6_W1TC_WIDTH 64
#define MPIPE_INT_VEC6_W1TC__INT_VEC6_W1TC_RESET_VAL 0
#define MPIPE_INT_VEC6_W1TC__INT_VEC6_W1TC_RMASK _64bit(0xffffffffffffffff)
#define MPIPE_INT_VEC6_W1TC__INT_VEC6_W1TC_MASK  _64bit(0xffffffffffffffff)
#define MPIPE_INT_VEC6_W1TC__INT_VEC6_W1TC_FIELD 0,63


/*
 * Interrupt vector 7, read-to-clear.
 * Interrupt status vector with read-to-clear functionality.  Provides access
 * to the same status bits that are visible in INT_VEC7_W1TC.  This vector
 * contains the interrupts associated with the buffer stacks.  Reading this
 * register clears all of the associated interrupts.
 */
#define MPIPE_INT_VEC7_RTC 0x30b8

#define MPIPE_INT_VEC7_RTC__INT_VEC7_RTC_SHIFT 0
#define MPIPE_INT_VEC7_RTC__INT_VEC7_RTC_WIDTH 32
#define MPIPE_INT_VEC7_RTC__INT_VEC7_RTC_RESET_VAL 0
#define MPIPE_INT_VEC7_RTC__INT_VEC7_RTC_RMASK 0xffffffff
#define MPIPE_INT_VEC7_RTC__INT_VEC7_RTC_MASK  0xffffffff
#define MPIPE_INT_VEC7_RTC__INT_VEC7_RTC_FIELD 0,31


/*
 * Interrupt vector 7, write-one-to-clear.
 * Interrupt status vector with write-one-to-clear functionality.  Provides
 * access to the same status bits that are visible in INT_VEC7_RTC.  This
 * vector contains the interrupts associated with the buffer stacks.  Writing
 * a 1 clears the status bit.
 */
#define MPIPE_INT_VEC7_W1TC 0x3038

#define MPIPE_INT_VEC7_W1TC__INT_VEC7_W1TC_SHIFT 0
#define MPIPE_INT_VEC7_W1TC__INT_VEC7_W1TC_WIDTH 32
#define MPIPE_INT_VEC7_W1TC__INT_VEC7_W1TC_RESET_VAL 0
#define MPIPE_INT_VEC7_W1TC__INT_VEC7_W1TC_RMASK 0xffffffff
#define MPIPE_INT_VEC7_W1TC__INT_VEC7_W1TC_MASK  0xffffffff
#define MPIPE_INT_VEC7_W1TC__INT_VEC7_W1TC_FIELD 0,31


/*
 * Ingress Packet Sequence Number.
 * Contains current value for the ingress packet sequence number.
 */
#define MPIPE_IPKT_SQN 0x1008

#define MPIPE_IPKT_SQN__VAL_SHIFT 0
#define MPIPE_IPKT_SQN__VAL_WIDTH 48
#define MPIPE_IPKT_SQN__VAL_RESET_VAL 0
#define MPIPE_IPKT_SQN__VAL_RMASK _64bit(0xffffffffffff)
#define MPIPE_IPKT_SQN__VAL_MASK  _64bit(0xffffffffffff)
#define MPIPE_IPKT_SQN__VAL_FIELD 0,47


/*
 * iPKT Stats Counter.
 * Provides count of event selected by IDMA_CTL.IPKT_EVT_CTR_SEL with
 * read-to-clear functionality
 */
#define MPIPE_IPKT_STAT_CTR 0x1030

#define MPIPE_IPKT_STAT_CTR__VAL_SHIFT 0
#define MPIPE_IPKT_STAT_CTR__VAL_WIDTH 32
#define MPIPE_IPKT_STAT_CTR__VAL_RESET_VAL 0
#define MPIPE_IPKT_STAT_CTR__VAL_RMASK 0xffffffff
#define MPIPE_IPKT_STAT_CTR__VAL_MASK  0xffffffff
#define MPIPE_IPKT_STAT_CTR__VAL_FIELD 0,31


/*
 * iPKT Stats Counter.
 * Provides count of event selected by IDMA_CTL.IPKT_EVT_CTR_SEL
 */
#define MPIPE_IPKT_STAT_CTR_RD 0x1038

#define MPIPE_IPKT_STAT_CTR_RD__VAL_SHIFT 0
#define MPIPE_IPKT_STAT_CTR_RD__VAL_WIDTH 32
#define MPIPE_IPKT_STAT_CTR_RD__VAL_RESET_VAL 0
#define MPIPE_IPKT_STAT_CTR_RD__VAL_RMASK 0xffffffff
#define MPIPE_IPKT_STAT_CTR_RD__VAL_MASK  0xffffffff
#define MPIPE_IPKT_STAT_CTR_RD__VAL_FIELD 0,31


/*
 * iPkt Thresholds.
 * Thresholds for block utilization and cut-through in the iPkt buffer
 */
#define MPIPE_IPKT_THRESH 0x1000

#define MPIPE_IPKT_THRESH__CUTTHROUGH_SHIFT 0
#define MPIPE_IPKT_THRESH__CUTTHROUGH_WIDTH 7
#define MPIPE_IPKT_THRESH__CUTTHROUGH_RESET_VAL 33
#define MPIPE_IPKT_THRESH__CUTTHROUGH_RMASK 0x7f
#define MPIPE_IPKT_THRESH__CUTTHROUGH_MASK  0x7f
#define MPIPE_IPKT_THRESH__CUTTHROUGH_FIELD 0,6

#define MPIPE_IPKT_THRESH__NUM_BLOCKS_SHIFT 32
#define MPIPE_IPKT_THRESH__NUM_BLOCKS_WIDTH 12
#define MPIPE_IPKT_THRESH__NUM_BLOCKS_RESET_VAL 1536
#define MPIPE_IPKT_THRESH__NUM_BLOCKS_RMASK 0xfff
#define MPIPE_IPKT_THRESH__NUM_BLOCKS_MASK  _64bit(0xfff00000000)
#define MPIPE_IPKT_THRESH__NUM_BLOCKS_FIELD 32,43

#define MPIPE_IPKT_THRESH__CLSQ_HWM_SHIFT 44
#define MPIPE_IPKT_THRESH__CLSQ_HWM_WIDTH 11
#define MPIPE_IPKT_THRESH__CLSQ_HWM_RESET_VAL 1023
#define MPIPE_IPKT_THRESH__CLSQ_HWM_RMASK 0x7ff
#define MPIPE_IPKT_THRESH__CLSQ_HWM_MASK  _64bit(0x7ff00000000000)
#define MPIPE_IPKT_THRESH__CLSQ_HWM_FIELD 44,54


/*
 * Classifier Clock Control.
 * Provides control over the classifier PLL.  This PLL should be configured
 * prior to enabling high-bandwidth traffic.  When disabled, the classifier
 * will operate at 125 MHz.  The classifier must never be slower than 1/10th
 * the pclk speed.  To change the kclk frequency, the following procedure
 * must be used:
 *
 *   - Write CLS_ENABLE.DISABLE with all 1's to temporarily disable new
 * packets from being sent to the classifiers.
 *
 *   - Write the new PLL settings into this register
 *
 *   - MF to insure that write has completed
 *
 *   - Wait at least 100 ns to allow the clock control hardware to begin
 * changing the PLL frequency and clear CLOCK_READY
 *
 *   - Poll CLOCK_READY until it is set
 *
 *   - Write CLS_ENABLE.ENABLE to reenable the classifiers.
 */
#define MPIPE_KCLK_CONTROL 0x0100

#define MPIPE_KCLK_CONTROL__ENA_SHIFT 0
#define MPIPE_KCLK_CONTROL__ENA_WIDTH 1
#define MPIPE_KCLK_CONTROL__ENA_RESET_VAL 0
#define MPIPE_KCLK_CONTROL__ENA_RMASK 0x1
#define MPIPE_KCLK_CONTROL__ENA_MASK  0x1
#define MPIPE_KCLK_CONTROL__ENA_FIELD 0,0

#define MPIPE_KCLK_CONTROL__PLL_RANGE_SHIFT 1
#define MPIPE_KCLK_CONTROL__PLL_RANGE_WIDTH 3
#define MPIPE_KCLK_CONTROL__PLL_RANGE_RESET_VAL 0
#define MPIPE_KCLK_CONTROL__PLL_RANGE_RMASK 0x7
#define MPIPE_KCLK_CONTROL__PLL_RANGE_MASK  0xe
#define MPIPE_KCLK_CONTROL__PLL_RANGE_FIELD 1,3
#define MPIPE_KCLK_CONTROL__PLL_RANGE_VAL_BYP 0x0
#define MPIPE_KCLK_CONTROL__PLL_RANGE_VAL_R14_16 0x1
#define MPIPE_KCLK_CONTROL__PLL_RANGE_VAL_R16_26 0x2
#define MPIPE_KCLK_CONTROL__PLL_RANGE_VAL_R26_42 0x3
#define MPIPE_KCLK_CONTROL__PLL_RANGE_VAL_R42_65 0x4
#define MPIPE_KCLK_CONTROL__PLL_RANGE_VAL_R65_104 0x5
#define MPIPE_KCLK_CONTROL__PLL_RANGE_VAL_R104_166 0x6
#define MPIPE_KCLK_CONTROL__PLL_RANGE_VAL_R166_200 0x7

#define MPIPE_KCLK_CONTROL__PLL_Q_SHIFT 4
#define MPIPE_KCLK_CONTROL__PLL_Q_WIDTH 3
#define MPIPE_KCLK_CONTROL__PLL_Q_RESET_VAL 0
#define MPIPE_KCLK_CONTROL__PLL_Q_RMASK 0x7
#define MPIPE_KCLK_CONTROL__PLL_Q_MASK  0x70
#define MPIPE_KCLK_CONTROL__PLL_Q_FIELD 4,6

#define MPIPE_KCLK_CONTROL__PLL_N_SHIFT 7
#define MPIPE_KCLK_CONTROL__PLL_N_WIDTH 6
#define MPIPE_KCLK_CONTROL__PLL_N_RESET_VAL 0
#define MPIPE_KCLK_CONTROL__PLL_N_RMASK 0x3f
#define MPIPE_KCLK_CONTROL__PLL_N_MASK  0x1f80
#define MPIPE_KCLK_CONTROL__PLL_N_FIELD 7,12

#define MPIPE_KCLK_CONTROL__PLL_M_SHIFT 13
#define MPIPE_KCLK_CONTROL__PLL_M_WIDTH 8
#define MPIPE_KCLK_CONTROL__PLL_M_RESET_VAL 0
#define MPIPE_KCLK_CONTROL__PLL_M_RMASK 0xff
#define MPIPE_KCLK_CONTROL__PLL_M_MASK  0x1fe000
#define MPIPE_KCLK_CONTROL__PLL_M_FIELD 13,20

#define MPIPE_KCLK_CONTROL__CLOCK_READY_SHIFT 31
#define MPIPE_KCLK_CONTROL__CLOCK_READY_WIDTH 1
#define MPIPE_KCLK_CONTROL__CLOCK_READY_RESET_VAL 0
#define MPIPE_KCLK_CONTROL__CLOCK_READY_RMASK 0x1
#define MPIPE_KCLK_CONTROL__CLOCK_READY_MASK  0x80000000
#define MPIPE_KCLK_CONTROL__CLOCK_READY_FIELD 31,31


/*
 * Classifier Clock Count.
 * Provides relative clock frequency between core (classifier-kclk) domain
 * and device (pclk) clock domain.
 */
#define MPIPE_KCLK_COUNT 0x0110

#define MPIPE_KCLK_COUNT__RUN_SHIFT 0
#define MPIPE_KCLK_COUNT__RUN_WIDTH 1
#define MPIPE_KCLK_COUNT__RUN_RESET_VAL 0
#define MPIPE_KCLK_COUNT__RUN_RMASK 0x1
#define MPIPE_KCLK_COUNT__RUN_MASK  0x1
#define MPIPE_KCLK_COUNT__RUN_FIELD 0,0

#define MPIPE_KCLK_COUNT__COUNT_SHIFT 1
#define MPIPE_KCLK_COUNT__COUNT_WIDTH 15
#define MPIPE_KCLK_COUNT__COUNT_RESET_VAL 0
#define MPIPE_KCLK_COUNT__COUNT_RMASK 0x7fff
#define MPIPE_KCLK_COUNT__COUNT_MASK  0xfffe
#define MPIPE_KCLK_COUNT__COUNT_FIELD 1,15


/*
 * Load Balancer Control.
 * Control load balancer functionality
 */
#define MPIPE_LBL_CTL 0x2120

#define MPIPE_LBL_CTL__FREEZE_SHIFT 0
#define MPIPE_LBL_CTL__FREEZE_WIDTH 1
#define MPIPE_LBL_CTL__FREEZE_RESET_VAL 0
#define MPIPE_LBL_CTL__FREEZE_RMASK 0x1
#define MPIPE_LBL_CTL__FREEZE_MASK  0x1
#define MPIPE_LBL_CTL__FREEZE_FIELD 0,0

#define MPIPE_LBL_CTL__CTR_SEL_SHIFT 4
#define MPIPE_LBL_CTL__CTR_SEL_WIDTH 4
#define MPIPE_LBL_CTL__CTR_SEL_RESET_VAL 0
#define MPIPE_LBL_CTL__CTR_SEL_RMASK 0xf
#define MPIPE_LBL_CTL__CTR_SEL_MASK  0xf0
#define MPIPE_LBL_CTL__CTR_SEL_FIELD 4,7
#define MPIPE_LBL_CTL__CTR_SEL_VAL_DROP 0x0
#define MPIPE_LBL_CTL__CTR_SEL_VAL_DROP_LBL_ONLY 0x1
#define MPIPE_LBL_CTL__CTR_SEL_VAL_DROP_BKT 0x2
#define MPIPE_LBL_CTL__CTR_SEL_VAL_DROP_NR 0x3
#define MPIPE_LBL_CTL__CTR_SEL_VAL_STICKY_PICK 0x4
#define MPIPE_LBL_CTL__CTR_SEL_VAL_PKTS 0x5

#define MPIPE_LBL_CTL__SRAND_THRESH_SHIFT 16
#define MPIPE_LBL_CTL__SRAND_THRESH_WIDTH 12
#define MPIPE_LBL_CTL__SRAND_THRESH_RESET_VAL 4
#define MPIPE_LBL_CTL__SRAND_THRESH_RMASK 0xfff
#define MPIPE_LBL_CTL__SRAND_THRESH_MASK  0xfff0000
#define MPIPE_LBL_CTL__SRAND_THRESH_FIELD 16,27


/*
 * Load Balancer Info.
 * Constants related to the load balancer.
 */
#define MPIPE_LBL_INFO 0x0510

#define MPIPE_LBL_INFO__NUM_NR_SHIFT 0
#define MPIPE_LBL_INFO__NUM_NR_WIDTH 16
#define MPIPE_LBL_INFO__NUM_NR_RESET_VAL 256
#define MPIPE_LBL_INFO__NUM_NR_RMASK 0xffff
#define MPIPE_LBL_INFO__NUM_NR_MASK  0xffff
#define MPIPE_LBL_INFO__NUM_NR_FIELD 0,15

#define MPIPE_LBL_INFO__NUM_GROUPS_SHIFT 16
#define MPIPE_LBL_INFO__NUM_GROUPS_WIDTH 8
#define MPIPE_LBL_INFO__NUM_GROUPS_RESET_VAL 32
#define MPIPE_LBL_INFO__NUM_GROUPS_RMASK 0xff
#define MPIPE_LBL_INFO__NUM_GROUPS_MASK  0xff0000
#define MPIPE_LBL_INFO__NUM_GROUPS_FIELD 16,23

#define MPIPE_LBL_INFO__NUM_BUCKETS_SHIFT 24
#define MPIPE_LBL_INFO__NUM_BUCKETS_WIDTH 16
#define MPIPE_LBL_INFO__NUM_BUCKETS_RESET_VAL 4160
#define MPIPE_LBL_INFO__NUM_BUCKETS_RMASK 0xffff
#define MPIPE_LBL_INFO__NUM_BUCKETS_MASK  _64bit(0xffff000000)
#define MPIPE_LBL_INFO__NUM_BUCKETS_FIELD 24,39

#define MPIPE_LBL_INFO__DIRECT_SWITCH_SUPPORT_SHIFT 44
#define MPIPE_LBL_INFO__DIRECT_SWITCH_SUPPORT_WIDTH 1
#define MPIPE_LBL_INFO__DIRECT_SWITCH_SUPPORT_RMASK 0x1
#define MPIPE_LBL_INFO__DIRECT_SWITCH_SUPPORT_MASK  _64bit(0x100000000000)
#define MPIPE_LBL_INFO__DIRECT_SWITCH_SUPPORT_FIELD 44,44


/*
 * Load Balancer Initialization Control.
 * Initialization control for the load balancer data structures
 * (bucket-status, groups, notif-rings).   Note that all structures
 * associated with any buckets that are going to be used MUST be initialized
 * by software prior to packets entering the load balancer.
 */
#define MPIPE_LBL_INIT_CTL 0x2100

#define MPIPE_LBL_INIT_CTL__IDX_SHIFT 0
#define MPIPE_LBL_INIT_CTL__IDX_WIDTH 13
#define MPIPE_LBL_INIT_CTL__IDX_RESET_VAL 0
#define MPIPE_LBL_INIT_CTL__IDX_RMASK 0x1fff
#define MPIPE_LBL_INIT_CTL__IDX_MASK  0x1fff
#define MPIPE_LBL_INIT_CTL__IDX_FIELD 0,12

#define MPIPE_LBL_INIT_CTL__STRUCT_SEL_SHIFT 16
#define MPIPE_LBL_INIT_CTL__STRUCT_SEL_WIDTH 2
#define MPIPE_LBL_INIT_CTL__STRUCT_SEL_RESET_VAL 0
#define MPIPE_LBL_INIT_CTL__STRUCT_SEL_RMASK 0x3
#define MPIPE_LBL_INIT_CTL__STRUCT_SEL_MASK  0x30000
#define MPIPE_LBL_INIT_CTL__STRUCT_SEL_FIELD 16,17
#define MPIPE_LBL_INIT_CTL__STRUCT_SEL_VAL_GROUP_TBL 0x0
#define MPIPE_LBL_INIT_CTL__STRUCT_SEL_VAL_BSTS_TBL 0x1
#define MPIPE_LBL_INIT_CTL__STRUCT_SEL_VAL_NR_TBL 0x2
#define MPIPE_LBL_INIT_CTL__STRUCT_SEL_VAL_INFL_CNT 0x3


/*
 * Load Balancer Data.
 * Read/Write data for load balancer initialization (BucketSTS Table,
 * NotifGroup Table, and NotifRing table)
 */
#define MPIPE_LBL_INIT_DAT 0x2108

#define MPIPE_LBL_INIT_DAT__DAT_SHIFT 0
#define MPIPE_LBL_INIT_DAT__DAT_WIDTH 64
#define MPIPE_LBL_INIT_DAT__DAT_RESET_VAL 0
#define MPIPE_LBL_INIT_DAT__DAT_RMASK _64bit(0xffffffffffffffff)
#define MPIPE_LBL_INIT_DAT__DAT_MASK  _64bit(0xffffffffffffffff)
#define MPIPE_LBL_INIT_DAT__DAT_FIELD 0,63


/*
 * Load Balancer Bucket Status Data.
 * Read/Write data for load balancer Bucket-Status Table. 4160 entries
 * indexed by LBL_INIT_CTL.IDX when LBL_INIT_CTL.STRUCT_SEL is BSTS_TBL
 */
#define MPIPE_LBL_INIT_DAT_BSTS_TBL 0x2108

#define MPIPE_LBL_INIT_DAT_BSTS_TBL__NOTIFRING_SHIFT 0
#define MPIPE_LBL_INIT_DAT_BSTS_TBL__NOTIFRING_WIDTH 8
#define MPIPE_LBL_INIT_DAT_BSTS_TBL__NOTIFRING_RMASK 0xff
#define MPIPE_LBL_INIT_DAT_BSTS_TBL__NOTIFRING_MASK  0xff
#define MPIPE_LBL_INIT_DAT_BSTS_TBL__NOTIFRING_FIELD 0,7

#define MPIPE_LBL_INIT_DAT_BSTS_TBL__COUNT_SHIFT 8
#define MPIPE_LBL_INIT_DAT_BSTS_TBL__COUNT_WIDTH 16
#define MPIPE_LBL_INIT_DAT_BSTS_TBL__COUNT_RMASK 0xffff
#define MPIPE_LBL_INIT_DAT_BSTS_TBL__COUNT_MASK  0xffff00
#define MPIPE_LBL_INIT_DAT_BSTS_TBL__COUNT_FIELD 8,23

#define MPIPE_LBL_INIT_DAT_BSTS_TBL__GROUP_SHIFT 24
#define MPIPE_LBL_INIT_DAT_BSTS_TBL__GROUP_WIDTH 5
#define MPIPE_LBL_INIT_DAT_BSTS_TBL__GROUP_RMASK 0x1f
#define MPIPE_LBL_INIT_DAT_BSTS_TBL__GROUP_MASK  0x1f000000
#define MPIPE_LBL_INIT_DAT_BSTS_TBL__GROUP_FIELD 24,28

#define MPIPE_LBL_INIT_DAT_BSTS_TBL__MODE_SHIFT 29
#define MPIPE_LBL_INIT_DAT_BSTS_TBL__MODE_WIDTH 3
#define MPIPE_LBL_INIT_DAT_BSTS_TBL__MODE_RMASK 0x7
#define MPIPE_LBL_INIT_DAT_BSTS_TBL__MODE_MASK  0xe0000000
#define MPIPE_LBL_INIT_DAT_BSTS_TBL__MODE_FIELD 29,31
#define MPIPE_LBL_INIT_DAT_BSTS_TBL__MODE_VAL_DFA 0x0
#define MPIPE_LBL_INIT_DAT_BSTS_TBL__MODE_VAL_FIXED 0x1
#define MPIPE_LBL_INIT_DAT_BSTS_TBL__MODE_VAL_ALWAYS_PICK 0x2
#define MPIPE_LBL_INIT_DAT_BSTS_TBL__MODE_VAL_STICKY 0x3
#define MPIPE_LBL_INIT_DAT_BSTS_TBL__MODE_VAL_STICKY_RAND 0x7


/*
 * Load Balancer Group Table Data.
 * Read/Write data for load balancer Group Table. 256 sets of 4 entries each.
 * Entries indexed by LBL_INIT_CTL.IDX when LBL_INIT_CTL.STRUCT_SEL is
 * GROUP_TBL.  Each set of 4 contiguous entries form a logical NotifGroup
 * entry.  The low two bits of LBL_INIT_CTL.IDX select which entry of the
 * NotifGroup set is accessed.
 */
#define MPIPE_LBL_INIT_DAT_GROUP_TBL 0x2108

#define MPIPE_LBL_INIT_DAT_GROUP_TBL__NR_ENABLE_SHIFT 0
#define MPIPE_LBL_INIT_DAT_GROUP_TBL__NR_ENABLE_WIDTH 64
#define MPIPE_LBL_INIT_DAT_GROUP_TBL__NR_ENABLE_RMASK _64bit(0xffffffffffffffff)
#define MPIPE_LBL_INIT_DAT_GROUP_TBL__NR_ENABLE_MASK  _64bit(0xffffffffffffffff)
#define MPIPE_LBL_INIT_DAT_GROUP_TBL__NR_ENABLE_FIELD 0,63


/*
 * Load Balancer NotifRing Inflight Count.
 * Read/Write data for load NotifRing Table.   NotifRing Inflight Counters
 * table contains 256 entries.   This structure is accessed when
 * LBL_INIT_CTL.STRUCT_SEL is INFL_CNT.
 */
#define MPIPE_LBL_INIT_DAT_INFL_CNT 0x2108

#define MPIPE_LBL_INIT_DAT_INFL_CNT__COUNT_SHIFT 0
#define MPIPE_LBL_INIT_DAT_INFL_CNT__COUNT_WIDTH 11
#define MPIPE_LBL_INIT_DAT_INFL_CNT__COUNT_RESET_VAL 0
#define MPIPE_LBL_INIT_DAT_INFL_CNT__COUNT_RMASK 0x7ff
#define MPIPE_LBL_INIT_DAT_INFL_CNT__COUNT_MASK  0x7ff
#define MPIPE_LBL_INIT_DAT_INFL_CNT__COUNT_FIELD 0,10


/*
 * Load Balancer NotifRing Table Low Half.
 * Read/Write data for the NotifRing Table.   NotifRing Table contains 256
 * entries divided into LO/HI based on the LSB of LBL_INIT_CTL.IDX.   This
 * structure is accessed when LBL_INIT_CTL.STRUCT_SEL is NR_TBL and the LSB
 * of LBL_INIT_CTL.IDX is zero.
 */
#define MPIPE_LBL_INIT_DAT_NR_TBL_0 0x2108

#define MPIPE_LBL_INIT_DAT_NR_TBL_0__TAIL_SHIFT 0
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__TAIL_WIDTH 16
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__TAIL_RMASK 0xffff
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__TAIL_MASK  0xffff
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__TAIL_FIELD 0,15

#define MPIPE_LBL_INIT_DAT_NR_TBL_0__BASE_PA_SHIFT 16
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__BASE_PA_WIDTH 28
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__BASE_PA_RMASK 0xfffffff
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__BASE_PA_MASK  _64bit(0xfffffff0000)
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__BASE_PA_FIELD 16,43

#define MPIPE_LBL_INIT_DAT_NR_TBL_0__HFH_SHIFT 44
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__HFH_WIDTH 1
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__HFH_RMASK 0x1
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__HFH_MASK  _64bit(0x100000000000)
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__HFH_FIELD 44,44

#define MPIPE_LBL_INIT_DAT_NR_TBL_0__NT_HINT_SHIFT 45
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__NT_HINT_WIDTH 1
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__NT_HINT_RMASK 0x1
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__NT_HINT_MASK  _64bit(0x200000000000)
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__NT_HINT_FIELD 45,45

#define MPIPE_LBL_INIT_DAT_NR_TBL_0__PIN_SHIFT 46
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__PIN_WIDTH 1
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__PIN_RMASK 0x1
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__PIN_MASK  _64bit(0x400000000000)
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__PIN_FIELD 46,46

#define MPIPE_LBL_INIT_DAT_NR_TBL_0__TILEID_SHIFT 47
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__TILEID_WIDTH 8
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__TILEID_RMASK 0xff
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__TILEID_MASK  _64bit(0x7f800000000000)
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__TILEID_FIELD 47,54

#define MPIPE_LBL_INIT_DAT_NR_TBL_0__SIZE_SHIFT 55
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__SIZE_WIDTH 2
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__SIZE_RMASK 0x3
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__SIZE_MASK  _64bit(0x180000000000000)
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__SIZE_FIELD 55,56
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__SIZE_VAL_SIZE128 0x0
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__SIZE_VAL_SIZE512 0x1
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__SIZE_VAL_SIZE2K 0x2
#define MPIPE_LBL_INIT_DAT_NR_TBL_0__SIZE_VAL_SIZE64K 0x3


/*
 * Load Balancer NotifRing Table High Half.
 * Read/Write data for the NotifRing Table.   NotifRing Table contains 256
 * entries divided into LO/HI based on the LSB of LBL_INIT_CTL.IDX.   This
 * structure is accessed when LBL_INIT_CTL.STRUCT_SEL is NR_TBL and the LSB
 * of LBL_INIT_CTL.IDX is one.
 */
#define MPIPE_LBL_INIT_DAT_NR_TBL_1 0x2108

#define MPIPE_LBL_INIT_DAT_NR_TBL_1__COUNT_SHIFT 0
#define MPIPE_LBL_INIT_DAT_NR_TBL_1__COUNT_WIDTH 16
#define MPIPE_LBL_INIT_DAT_NR_TBL_1__COUNT_RMASK 0xffff
#define MPIPE_LBL_INIT_DAT_NR_TBL_1__COUNT_MASK  0xffff
#define MPIPE_LBL_INIT_DAT_NR_TBL_1__COUNT_FIELD 0,15

#define MPIPE_LBL_INIT_DAT_NR_TBL_1__SIZE_SHIFT 16
#define MPIPE_LBL_INIT_DAT_NR_TBL_1__SIZE_WIDTH 2
#define MPIPE_LBL_INIT_DAT_NR_TBL_1__SIZE_RMASK 0x3
#define MPIPE_LBL_INIT_DAT_NR_TBL_1__SIZE_MASK  0x30000
#define MPIPE_LBL_INIT_DAT_NR_TBL_1__SIZE_FIELD 16,17
#define MPIPE_LBL_INIT_DAT_NR_TBL_1__SIZE_VAL_SIZE128 0x0
#define MPIPE_LBL_INIT_DAT_NR_TBL_1__SIZE_VAL_SIZE512 0x1
#define MPIPE_LBL_INIT_DAT_NR_TBL_1__SIZE_VAL_SIZE2K 0x2
#define MPIPE_LBL_INIT_DAT_NR_TBL_1__SIZE_VAL_SIZE64K 0x3


/*
 * Load Balancer NotifRing State.
 * Provides fullness of each NotifRing.  There are 16 registers.  Each
 * register contains the state of 16 NotifRings.
 */
#define MPIPE_LBL_NR_STATE__FIRST_WORD 0x2138
#define MPIPE_LBL_NR_STATE__LAST_WORD 0x21b0

#define MPIPE_LBL_NR_STATE__NR0_SHIFT 0
#define MPIPE_LBL_NR_STATE__NR0_WIDTH 3
#define MPIPE_LBL_NR_STATE__NR0_RESET_VAL 0
#define MPIPE_LBL_NR_STATE__NR0_RMASK 0x7
#define MPIPE_LBL_NR_STATE__NR0_MASK  0x7
#define MPIPE_LBL_NR_STATE__NR0_FIELD 0,2

#define MPIPE_LBL_NR_STATE__NR1_SHIFT 4
#define MPIPE_LBL_NR_STATE__NR1_WIDTH 3
#define MPIPE_LBL_NR_STATE__NR1_RESET_VAL 0
#define MPIPE_LBL_NR_STATE__NR1_RMASK 0x7
#define MPIPE_LBL_NR_STATE__NR1_MASK  0x70
#define MPIPE_LBL_NR_STATE__NR1_FIELD 4,6

#define MPIPE_LBL_NR_STATE__NR2_SHIFT 8
#define MPIPE_LBL_NR_STATE__NR2_WIDTH 3
#define MPIPE_LBL_NR_STATE__NR2_RESET_VAL 0
#define MPIPE_LBL_NR_STATE__NR2_RMASK 0x7
#define MPIPE_LBL_NR_STATE__NR2_MASK  0x700
#define MPIPE_LBL_NR_STATE__NR2_FIELD 8,10

#define MPIPE_LBL_NR_STATE__NR3_SHIFT 12
#define MPIPE_LBL_NR_STATE__NR3_WIDTH 3
#define MPIPE_LBL_NR_STATE__NR3_RESET_VAL 0
#define MPIPE_LBL_NR_STATE__NR3_RMASK 0x7
#define MPIPE_LBL_NR_STATE__NR3_MASK  0x7000
#define MPIPE_LBL_NR_STATE__NR3_FIELD 12,14

#define MPIPE_LBL_NR_STATE__NR4_SHIFT 16
#define MPIPE_LBL_NR_STATE__NR4_WIDTH 3
#define MPIPE_LBL_NR_STATE__NR4_RESET_VAL 0
#define MPIPE_LBL_NR_STATE__NR4_RMASK 0x7
#define MPIPE_LBL_NR_STATE__NR4_MASK  0x70000
#define MPIPE_LBL_NR_STATE__NR4_FIELD 16,18

#define MPIPE_LBL_NR_STATE__NR5_SHIFT 20
#define MPIPE_LBL_NR_STATE__NR5_WIDTH 3
#define MPIPE_LBL_NR_STATE__NR5_RESET_VAL 0
#define MPIPE_LBL_NR_STATE__NR5_RMASK 0x7
#define MPIPE_LBL_NR_STATE__NR5_MASK  0x700000
#define MPIPE_LBL_NR_STATE__NR5_FIELD 20,22

#define MPIPE_LBL_NR_STATE__NR6_SHIFT 24
#define MPIPE_LBL_NR_STATE__NR6_WIDTH 3
#define MPIPE_LBL_NR_STATE__NR6_RESET_VAL 0
#define MPIPE_LBL_NR_STATE__NR6_RMASK 0x7
#define MPIPE_LBL_NR_STATE__NR6_MASK  0x7000000
#define MPIPE_LBL_NR_STATE__NR6_FIELD 24,26

#define MPIPE_LBL_NR_STATE__NR7_SHIFT 28
#define MPIPE_LBL_NR_STATE__NR7_WIDTH 3
#define MPIPE_LBL_NR_STATE__NR7_RESET_VAL 0
#define MPIPE_LBL_NR_STATE__NR7_RMASK 0x7
#define MPIPE_LBL_NR_STATE__NR7_MASK  0x70000000
#define MPIPE_LBL_NR_STATE__NR7_FIELD 28,30

#define MPIPE_LBL_NR_STATE__NR8_SHIFT 32
#define MPIPE_LBL_NR_STATE__NR8_WIDTH 3
#define MPIPE_LBL_NR_STATE__NR8_RESET_VAL 0
#define MPIPE_LBL_NR_STATE__NR8_RMASK 0x7
#define MPIPE_LBL_NR_STATE__NR8_MASK  _64bit(0x700000000)
#define MPIPE_LBL_NR_STATE__NR8_FIELD 32,34

#define MPIPE_LBL_NR_STATE__NR9_SHIFT 36
#define MPIPE_LBL_NR_STATE__NR9_WIDTH 3
#define MPIPE_LBL_NR_STATE__NR9_RESET_VAL 0
#define MPIPE_LBL_NR_STATE__NR9_RMASK 0x7
#define MPIPE_LBL_NR_STATE__NR9_MASK  _64bit(0x7000000000)
#define MPIPE_LBL_NR_STATE__NR9_FIELD 36,38

#define MPIPE_LBL_NR_STATE__NR10_SHIFT 40
#define MPIPE_LBL_NR_STATE__NR10_WIDTH 3
#define MPIPE_LBL_NR_STATE__NR10_RESET_VAL 0
#define MPIPE_LBL_NR_STATE__NR10_RMASK 0x7
#define MPIPE_LBL_NR_STATE__NR10_MASK  _64bit(0x70000000000)
#define MPIPE_LBL_NR_STATE__NR10_FIELD 40,42

#define MPIPE_LBL_NR_STATE__NR11_SHIFT 44
#define MPIPE_LBL_NR_STATE__NR11_WIDTH 3
#define MPIPE_LBL_NR_STATE__NR11_RESET_VAL 0
#define MPIPE_LBL_NR_STATE__NR11_RMASK 0x7
#define MPIPE_LBL_NR_STATE__NR11_MASK  _64bit(0x700000000000)
#define MPIPE_LBL_NR_STATE__NR11_FIELD 44,46

#define MPIPE_LBL_NR_STATE__NR12_SHIFT 48
#define MPIPE_LBL_NR_STATE__NR12_WIDTH 3
#define MPIPE_LBL_NR_STATE__NR12_RESET_VAL 0
#define MPIPE_LBL_NR_STATE__NR12_RMASK 0x7
#define MPIPE_LBL_NR_STATE__NR12_MASK  _64bit(0x7000000000000)
#define MPIPE_LBL_NR_STATE__NR12_FIELD 48,50

#define MPIPE_LBL_NR_STATE__NR13_SHIFT 52
#define MPIPE_LBL_NR_STATE__NR13_WIDTH 3
#define MPIPE_LBL_NR_STATE__NR13_RESET_VAL 0
#define MPIPE_LBL_NR_STATE__NR13_RMASK 0x7
#define MPIPE_LBL_NR_STATE__NR13_MASK  _64bit(0x70000000000000)
#define MPIPE_LBL_NR_STATE__NR13_FIELD 52,54

#define MPIPE_LBL_NR_STATE__NR14_SHIFT 56
#define MPIPE_LBL_NR_STATE__NR14_WIDTH 3
#define MPIPE_LBL_NR_STATE__NR14_RESET_VAL 0
#define MPIPE_LBL_NR_STATE__NR14_RMASK 0x7
#define MPIPE_LBL_NR_STATE__NR14_MASK  _64bit(0x700000000000000)
#define MPIPE_LBL_NR_STATE__NR14_FIELD 56,58

#define MPIPE_LBL_NR_STATE__NR15_SHIFT 60
#define MPIPE_LBL_NR_STATE__NR15_WIDTH 3
#define MPIPE_LBL_NR_STATE__NR15_RESET_VAL 0
#define MPIPE_LBL_NR_STATE__NR15_RMASK 0x7
#define MPIPE_LBL_NR_STATE__NR15_MASK  _64bit(0x7000000000000000)
#define MPIPE_LBL_NR_STATE__NR15_FIELD 60,62


/*
 * Load Balancer NotifRing State.
 * Provides fullness of each NotifRing.  There are 16 registers.  Each
 * register contains the state of 16 NotifRings.
 */
#define MPIPE_LBL_NR_STATE_1__FIRST_WORD 0x2140
#define MPIPE_LBL_NR_STATE_1__LAST_WORD 0x21b8

#define MPIPE_LBL_NR_STATE_1__NR0_SHIFT 0
#define MPIPE_LBL_NR_STATE_1__NR0_WIDTH 3
#define MPIPE_LBL_NR_STATE_1__NR0_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_1__NR0_RMASK 0x7
#define MPIPE_LBL_NR_STATE_1__NR0_MASK  0x7
#define MPIPE_LBL_NR_STATE_1__NR0_FIELD 0,2

#define MPIPE_LBL_NR_STATE_1__NR1_SHIFT 4
#define MPIPE_LBL_NR_STATE_1__NR1_WIDTH 3
#define MPIPE_LBL_NR_STATE_1__NR1_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_1__NR1_RMASK 0x7
#define MPIPE_LBL_NR_STATE_1__NR1_MASK  0x70
#define MPIPE_LBL_NR_STATE_1__NR1_FIELD 4,6

#define MPIPE_LBL_NR_STATE_1__NR2_SHIFT 8
#define MPIPE_LBL_NR_STATE_1__NR2_WIDTH 3
#define MPIPE_LBL_NR_STATE_1__NR2_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_1__NR2_RMASK 0x7
#define MPIPE_LBL_NR_STATE_1__NR2_MASK  0x700
#define MPIPE_LBL_NR_STATE_1__NR2_FIELD 8,10

#define MPIPE_LBL_NR_STATE_1__NR3_SHIFT 12
#define MPIPE_LBL_NR_STATE_1__NR3_WIDTH 3
#define MPIPE_LBL_NR_STATE_1__NR3_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_1__NR3_RMASK 0x7
#define MPIPE_LBL_NR_STATE_1__NR3_MASK  0x7000
#define MPIPE_LBL_NR_STATE_1__NR3_FIELD 12,14

#define MPIPE_LBL_NR_STATE_1__NR4_SHIFT 16
#define MPIPE_LBL_NR_STATE_1__NR4_WIDTH 3
#define MPIPE_LBL_NR_STATE_1__NR4_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_1__NR4_RMASK 0x7
#define MPIPE_LBL_NR_STATE_1__NR4_MASK  0x70000
#define MPIPE_LBL_NR_STATE_1__NR4_FIELD 16,18

#define MPIPE_LBL_NR_STATE_1__NR5_SHIFT 20
#define MPIPE_LBL_NR_STATE_1__NR5_WIDTH 3
#define MPIPE_LBL_NR_STATE_1__NR5_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_1__NR5_RMASK 0x7
#define MPIPE_LBL_NR_STATE_1__NR5_MASK  0x700000
#define MPIPE_LBL_NR_STATE_1__NR5_FIELD 20,22

#define MPIPE_LBL_NR_STATE_1__NR6_SHIFT 24
#define MPIPE_LBL_NR_STATE_1__NR6_WIDTH 3
#define MPIPE_LBL_NR_STATE_1__NR6_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_1__NR6_RMASK 0x7
#define MPIPE_LBL_NR_STATE_1__NR6_MASK  0x7000000
#define MPIPE_LBL_NR_STATE_1__NR6_FIELD 24,26

#define MPIPE_LBL_NR_STATE_1__NR7_SHIFT 28
#define MPIPE_LBL_NR_STATE_1__NR7_WIDTH 3
#define MPIPE_LBL_NR_STATE_1__NR7_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_1__NR7_RMASK 0x7
#define MPIPE_LBL_NR_STATE_1__NR7_MASK  0x70000000
#define MPIPE_LBL_NR_STATE_1__NR7_FIELD 28,30

#define MPIPE_LBL_NR_STATE_1__NR8_SHIFT 32
#define MPIPE_LBL_NR_STATE_1__NR8_WIDTH 3
#define MPIPE_LBL_NR_STATE_1__NR8_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_1__NR8_RMASK 0x7
#define MPIPE_LBL_NR_STATE_1__NR8_MASK  _64bit(0x700000000)
#define MPIPE_LBL_NR_STATE_1__NR8_FIELD 32,34

#define MPIPE_LBL_NR_STATE_1__NR9_SHIFT 36
#define MPIPE_LBL_NR_STATE_1__NR9_WIDTH 3
#define MPIPE_LBL_NR_STATE_1__NR9_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_1__NR9_RMASK 0x7
#define MPIPE_LBL_NR_STATE_1__NR9_MASK  _64bit(0x7000000000)
#define MPIPE_LBL_NR_STATE_1__NR9_FIELD 36,38

#define MPIPE_LBL_NR_STATE_1__NR10_SHIFT 40
#define MPIPE_LBL_NR_STATE_1__NR10_WIDTH 3
#define MPIPE_LBL_NR_STATE_1__NR10_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_1__NR10_RMASK 0x7
#define MPIPE_LBL_NR_STATE_1__NR10_MASK  _64bit(0x70000000000)
#define MPIPE_LBL_NR_STATE_1__NR10_FIELD 40,42

#define MPIPE_LBL_NR_STATE_1__NR11_SHIFT 44
#define MPIPE_LBL_NR_STATE_1__NR11_WIDTH 3
#define MPIPE_LBL_NR_STATE_1__NR11_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_1__NR11_RMASK 0x7
#define MPIPE_LBL_NR_STATE_1__NR11_MASK  _64bit(0x700000000000)
#define MPIPE_LBL_NR_STATE_1__NR11_FIELD 44,46

#define MPIPE_LBL_NR_STATE_1__NR12_SHIFT 48
#define MPIPE_LBL_NR_STATE_1__NR12_WIDTH 3
#define MPIPE_LBL_NR_STATE_1__NR12_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_1__NR12_RMASK 0x7
#define MPIPE_LBL_NR_STATE_1__NR12_MASK  _64bit(0x7000000000000)
#define MPIPE_LBL_NR_STATE_1__NR12_FIELD 48,50

#define MPIPE_LBL_NR_STATE_1__NR13_SHIFT 52
#define MPIPE_LBL_NR_STATE_1__NR13_WIDTH 3
#define MPIPE_LBL_NR_STATE_1__NR13_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_1__NR13_RMASK 0x7
#define MPIPE_LBL_NR_STATE_1__NR13_MASK  _64bit(0x70000000000000)
#define MPIPE_LBL_NR_STATE_1__NR13_FIELD 52,54

#define MPIPE_LBL_NR_STATE_1__NR14_SHIFT 56
#define MPIPE_LBL_NR_STATE_1__NR14_WIDTH 3
#define MPIPE_LBL_NR_STATE_1__NR14_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_1__NR14_RMASK 0x7
#define MPIPE_LBL_NR_STATE_1__NR14_MASK  _64bit(0x700000000000000)
#define MPIPE_LBL_NR_STATE_1__NR14_FIELD 56,58

#define MPIPE_LBL_NR_STATE_1__NR15_SHIFT 60
#define MPIPE_LBL_NR_STATE_1__NR15_WIDTH 3
#define MPIPE_LBL_NR_STATE_1__NR15_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_1__NR15_RMASK 0x7
#define MPIPE_LBL_NR_STATE_1__NR15_MASK  _64bit(0x7000000000000000)
#define MPIPE_LBL_NR_STATE_1__NR15_FIELD 60,62


/*
 * Load Balancer NotifRing State.
 * Provides fullness of each NotifRing.  There are 16 registers.  Each
 * register contains the state of 16 NotifRings.
 */
#define MPIPE_LBL_NR_STATE_10__FIRST_WORD 0x2188
#define MPIPE_LBL_NR_STATE_10__LAST_WORD 0x2200

#define MPIPE_LBL_NR_STATE_10__NR0_SHIFT 0
#define MPIPE_LBL_NR_STATE_10__NR0_WIDTH 3
#define MPIPE_LBL_NR_STATE_10__NR0_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_10__NR0_RMASK 0x7
#define MPIPE_LBL_NR_STATE_10__NR0_MASK  0x7
#define MPIPE_LBL_NR_STATE_10__NR0_FIELD 0,2

#define MPIPE_LBL_NR_STATE_10__NR1_SHIFT 4
#define MPIPE_LBL_NR_STATE_10__NR1_WIDTH 3
#define MPIPE_LBL_NR_STATE_10__NR1_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_10__NR1_RMASK 0x7
#define MPIPE_LBL_NR_STATE_10__NR1_MASK  0x70
#define MPIPE_LBL_NR_STATE_10__NR1_FIELD 4,6

#define MPIPE_LBL_NR_STATE_10__NR2_SHIFT 8
#define MPIPE_LBL_NR_STATE_10__NR2_WIDTH 3
#define MPIPE_LBL_NR_STATE_10__NR2_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_10__NR2_RMASK 0x7
#define MPIPE_LBL_NR_STATE_10__NR2_MASK  0x700
#define MPIPE_LBL_NR_STATE_10__NR2_FIELD 8,10

#define MPIPE_LBL_NR_STATE_10__NR3_SHIFT 12
#define MPIPE_LBL_NR_STATE_10__NR3_WIDTH 3
#define MPIPE_LBL_NR_STATE_10__NR3_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_10__NR3_RMASK 0x7
#define MPIPE_LBL_NR_STATE_10__NR3_MASK  0x7000
#define MPIPE_LBL_NR_STATE_10__NR3_FIELD 12,14

#define MPIPE_LBL_NR_STATE_10__NR4_SHIFT 16
#define MPIPE_LBL_NR_STATE_10__NR4_WIDTH 3
#define MPIPE_LBL_NR_STATE_10__NR4_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_10__NR4_RMASK 0x7
#define MPIPE_LBL_NR_STATE_10__NR4_MASK  0x70000
#define MPIPE_LBL_NR_STATE_10__NR4_FIELD 16,18

#define MPIPE_LBL_NR_STATE_10__NR5_SHIFT 20
#define MPIPE_LBL_NR_STATE_10__NR5_WIDTH 3
#define MPIPE_LBL_NR_STATE_10__NR5_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_10__NR5_RMASK 0x7
#define MPIPE_LBL_NR_STATE_10__NR5_MASK  0x700000
#define MPIPE_LBL_NR_STATE_10__NR5_FIELD 20,22

#define MPIPE_LBL_NR_STATE_10__NR6_SHIFT 24
#define MPIPE_LBL_NR_STATE_10__NR6_WIDTH 3
#define MPIPE_LBL_NR_STATE_10__NR6_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_10__NR6_RMASK 0x7
#define MPIPE_LBL_NR_STATE_10__NR6_MASK  0x7000000
#define MPIPE_LBL_NR_STATE_10__NR6_FIELD 24,26

#define MPIPE_LBL_NR_STATE_10__NR7_SHIFT 28
#define MPIPE_LBL_NR_STATE_10__NR7_WIDTH 3
#define MPIPE_LBL_NR_STATE_10__NR7_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_10__NR7_RMASK 0x7
#define MPIPE_LBL_NR_STATE_10__NR7_MASK  0x70000000
#define MPIPE_LBL_NR_STATE_10__NR7_FIELD 28,30

#define MPIPE_LBL_NR_STATE_10__NR8_SHIFT 32
#define MPIPE_LBL_NR_STATE_10__NR8_WIDTH 3
#define MPIPE_LBL_NR_STATE_10__NR8_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_10__NR8_RMASK 0x7
#define MPIPE_LBL_NR_STATE_10__NR8_MASK  _64bit(0x700000000)
#define MPIPE_LBL_NR_STATE_10__NR8_FIELD 32,34

#define MPIPE_LBL_NR_STATE_10__NR9_SHIFT 36
#define MPIPE_LBL_NR_STATE_10__NR9_WIDTH 3
#define MPIPE_LBL_NR_STATE_10__NR9_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_10__NR9_RMASK 0x7
#define MPIPE_LBL_NR_STATE_10__NR9_MASK  _64bit(0x7000000000)
#define MPIPE_LBL_NR_STATE_10__NR9_FIELD 36,38

#define MPIPE_LBL_NR_STATE_10__NR10_SHIFT 40
#define MPIPE_LBL_NR_STATE_10__NR10_WIDTH 3
#define MPIPE_LBL_NR_STATE_10__NR10_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_10__NR10_RMASK 0x7
#define MPIPE_LBL_NR_STATE_10__NR10_MASK  _64bit(0x70000000000)
#define MPIPE_LBL_NR_STATE_10__NR10_FIELD 40,42

#define MPIPE_LBL_NR_STATE_10__NR11_SHIFT 44
#define MPIPE_LBL_NR_STATE_10__NR11_WIDTH 3
#define MPIPE_LBL_NR_STATE_10__NR11_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_10__NR11_RMASK 0x7
#define MPIPE_LBL_NR_STATE_10__NR11_MASK  _64bit(0x700000000000)
#define MPIPE_LBL_NR_STATE_10__NR11_FIELD 44,46

#define MPIPE_LBL_NR_STATE_10__NR12_SHIFT 48
#define MPIPE_LBL_NR_STATE_10__NR12_WIDTH 3
#define MPIPE_LBL_NR_STATE_10__NR12_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_10__NR12_RMASK 0x7
#define MPIPE_LBL_NR_STATE_10__NR12_MASK  _64bit(0x7000000000000)
#define MPIPE_LBL_NR_STATE_10__NR12_FIELD 48,50

#define MPIPE_LBL_NR_STATE_10__NR13_SHIFT 52
#define MPIPE_LBL_NR_STATE_10__NR13_WIDTH 3
#define MPIPE_LBL_NR_STATE_10__NR13_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_10__NR13_RMASK 0x7
#define MPIPE_LBL_NR_STATE_10__NR13_MASK  _64bit(0x70000000000000)
#define MPIPE_LBL_NR_STATE_10__NR13_FIELD 52,54

#define MPIPE_LBL_NR_STATE_10__NR14_SHIFT 56
#define MPIPE_LBL_NR_STATE_10__NR14_WIDTH 3
#define MPIPE_LBL_NR_STATE_10__NR14_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_10__NR14_RMASK 0x7
#define MPIPE_LBL_NR_STATE_10__NR14_MASK  _64bit(0x700000000000000)
#define MPIPE_LBL_NR_STATE_10__NR14_FIELD 56,58

#define MPIPE_LBL_NR_STATE_10__NR15_SHIFT 60
#define MPIPE_LBL_NR_STATE_10__NR15_WIDTH 3
#define MPIPE_LBL_NR_STATE_10__NR15_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_10__NR15_RMASK 0x7
#define MPIPE_LBL_NR_STATE_10__NR15_MASK  _64bit(0x7000000000000000)
#define MPIPE_LBL_NR_STATE_10__NR15_FIELD 60,62


/*
 * Load Balancer NotifRing State.
 * Provides fullness of each NotifRing.  There are 16 registers.  Each
 * register contains the state of 16 NotifRings.
 */
#define MPIPE_LBL_NR_STATE_11__FIRST_WORD 0x2190
#define MPIPE_LBL_NR_STATE_11__LAST_WORD 0x2208

#define MPIPE_LBL_NR_STATE_11__NR0_SHIFT 0
#define MPIPE_LBL_NR_STATE_11__NR0_WIDTH 3
#define MPIPE_LBL_NR_STATE_11__NR0_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_11__NR0_RMASK 0x7
#define MPIPE_LBL_NR_STATE_11__NR0_MASK  0x7
#define MPIPE_LBL_NR_STATE_11__NR0_FIELD 0,2

#define MPIPE_LBL_NR_STATE_11__NR1_SHIFT 4
#define MPIPE_LBL_NR_STATE_11__NR1_WIDTH 3
#define MPIPE_LBL_NR_STATE_11__NR1_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_11__NR1_RMASK 0x7
#define MPIPE_LBL_NR_STATE_11__NR1_MASK  0x70
#define MPIPE_LBL_NR_STATE_11__NR1_FIELD 4,6

#define MPIPE_LBL_NR_STATE_11__NR2_SHIFT 8
#define MPIPE_LBL_NR_STATE_11__NR2_WIDTH 3
#define MPIPE_LBL_NR_STATE_11__NR2_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_11__NR2_RMASK 0x7
#define MPIPE_LBL_NR_STATE_11__NR2_MASK  0x700
#define MPIPE_LBL_NR_STATE_11__NR2_FIELD 8,10

#define MPIPE_LBL_NR_STATE_11__NR3_SHIFT 12
#define MPIPE_LBL_NR_STATE_11__NR3_WIDTH 3
#define MPIPE_LBL_NR_STATE_11__NR3_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_11__NR3_RMASK 0x7
#define MPIPE_LBL_NR_STATE_11__NR3_MASK  0x7000
#define MPIPE_LBL_NR_STATE_11__NR3_FIELD 12,14

#define MPIPE_LBL_NR_STATE_11__NR4_SHIFT 16
#define MPIPE_LBL_NR_STATE_11__NR4_WIDTH 3
#define MPIPE_LBL_NR_STATE_11__NR4_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_11__NR4_RMASK 0x7
#define MPIPE_LBL_NR_STATE_11__NR4_MASK  0x70000
#define MPIPE_LBL_NR_STATE_11__NR4_FIELD 16,18

#define MPIPE_LBL_NR_STATE_11__NR5_SHIFT 20
#define MPIPE_LBL_NR_STATE_11__NR5_WIDTH 3
#define MPIPE_LBL_NR_STATE_11__NR5_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_11__NR5_RMASK 0x7
#define MPIPE_LBL_NR_STATE_11__NR5_MASK  0x700000
#define MPIPE_LBL_NR_STATE_11__NR5_FIELD 20,22

#define MPIPE_LBL_NR_STATE_11__NR6_SHIFT 24
#define MPIPE_LBL_NR_STATE_11__NR6_WIDTH 3
#define MPIPE_LBL_NR_STATE_11__NR6_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_11__NR6_RMASK 0x7
#define MPIPE_LBL_NR_STATE_11__NR6_MASK  0x7000000
#define MPIPE_LBL_NR_STATE_11__NR6_FIELD 24,26

#define MPIPE_LBL_NR_STATE_11__NR7_SHIFT 28
#define MPIPE_LBL_NR_STATE_11__NR7_WIDTH 3
#define MPIPE_LBL_NR_STATE_11__NR7_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_11__NR7_RMASK 0x7
#define MPIPE_LBL_NR_STATE_11__NR7_MASK  0x70000000
#define MPIPE_LBL_NR_STATE_11__NR7_FIELD 28,30

#define MPIPE_LBL_NR_STATE_11__NR8_SHIFT 32
#define MPIPE_LBL_NR_STATE_11__NR8_WIDTH 3
#define MPIPE_LBL_NR_STATE_11__NR8_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_11__NR8_RMASK 0x7
#define MPIPE_LBL_NR_STATE_11__NR8_MASK  _64bit(0x700000000)
#define MPIPE_LBL_NR_STATE_11__NR8_FIELD 32,34

#define MPIPE_LBL_NR_STATE_11__NR9_SHIFT 36
#define MPIPE_LBL_NR_STATE_11__NR9_WIDTH 3
#define MPIPE_LBL_NR_STATE_11__NR9_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_11__NR9_RMASK 0x7
#define MPIPE_LBL_NR_STATE_11__NR9_MASK  _64bit(0x7000000000)
#define MPIPE_LBL_NR_STATE_11__NR9_FIELD 36,38

#define MPIPE_LBL_NR_STATE_11__NR10_SHIFT 40
#define MPIPE_LBL_NR_STATE_11__NR10_WIDTH 3
#define MPIPE_LBL_NR_STATE_11__NR10_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_11__NR10_RMASK 0x7
#define MPIPE_LBL_NR_STATE_11__NR10_MASK  _64bit(0x70000000000)
#define MPIPE_LBL_NR_STATE_11__NR10_FIELD 40,42

#define MPIPE_LBL_NR_STATE_11__NR11_SHIFT 44
#define MPIPE_LBL_NR_STATE_11__NR11_WIDTH 3
#define MPIPE_LBL_NR_STATE_11__NR11_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_11__NR11_RMASK 0x7
#define MPIPE_LBL_NR_STATE_11__NR11_MASK  _64bit(0x700000000000)
#define MPIPE_LBL_NR_STATE_11__NR11_FIELD 44,46

#define MPIPE_LBL_NR_STATE_11__NR12_SHIFT 48
#define MPIPE_LBL_NR_STATE_11__NR12_WIDTH 3
#define MPIPE_LBL_NR_STATE_11__NR12_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_11__NR12_RMASK 0x7
#define MPIPE_LBL_NR_STATE_11__NR12_MASK  _64bit(0x7000000000000)
#define MPIPE_LBL_NR_STATE_11__NR12_FIELD 48,50

#define MPIPE_LBL_NR_STATE_11__NR13_SHIFT 52
#define MPIPE_LBL_NR_STATE_11__NR13_WIDTH 3
#define MPIPE_LBL_NR_STATE_11__NR13_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_11__NR13_RMASK 0x7
#define MPIPE_LBL_NR_STATE_11__NR13_MASK  _64bit(0x70000000000000)
#define MPIPE_LBL_NR_STATE_11__NR13_FIELD 52,54

#define MPIPE_LBL_NR_STATE_11__NR14_SHIFT 56
#define MPIPE_LBL_NR_STATE_11__NR14_WIDTH 3
#define MPIPE_LBL_NR_STATE_11__NR14_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_11__NR14_RMASK 0x7
#define MPIPE_LBL_NR_STATE_11__NR14_MASK  _64bit(0x700000000000000)
#define MPIPE_LBL_NR_STATE_11__NR14_FIELD 56,58

#define MPIPE_LBL_NR_STATE_11__NR15_SHIFT 60
#define MPIPE_LBL_NR_STATE_11__NR15_WIDTH 3
#define MPIPE_LBL_NR_STATE_11__NR15_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_11__NR15_RMASK 0x7
#define MPIPE_LBL_NR_STATE_11__NR15_MASK  _64bit(0x7000000000000000)
#define MPIPE_LBL_NR_STATE_11__NR15_FIELD 60,62


/*
 * Load Balancer NotifRing State.
 * Provides fullness of each NotifRing.  There are 16 registers.  Each
 * register contains the state of 16 NotifRings.
 */
#define MPIPE_LBL_NR_STATE_12__FIRST_WORD 0x2198
#define MPIPE_LBL_NR_STATE_12__LAST_WORD 0x2210

#define MPIPE_LBL_NR_STATE_12__NR0_SHIFT 0
#define MPIPE_LBL_NR_STATE_12__NR0_WIDTH 3
#define MPIPE_LBL_NR_STATE_12__NR0_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_12__NR0_RMASK 0x7
#define MPIPE_LBL_NR_STATE_12__NR0_MASK  0x7
#define MPIPE_LBL_NR_STATE_12__NR0_FIELD 0,2

#define MPIPE_LBL_NR_STATE_12__NR1_SHIFT 4
#define MPIPE_LBL_NR_STATE_12__NR1_WIDTH 3
#define MPIPE_LBL_NR_STATE_12__NR1_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_12__NR1_RMASK 0x7
#define MPIPE_LBL_NR_STATE_12__NR1_MASK  0x70
#define MPIPE_LBL_NR_STATE_12__NR1_FIELD 4,6

#define MPIPE_LBL_NR_STATE_12__NR2_SHIFT 8
#define MPIPE_LBL_NR_STATE_12__NR2_WIDTH 3
#define MPIPE_LBL_NR_STATE_12__NR2_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_12__NR2_RMASK 0x7
#define MPIPE_LBL_NR_STATE_12__NR2_MASK  0x700
#define MPIPE_LBL_NR_STATE_12__NR2_FIELD 8,10

#define MPIPE_LBL_NR_STATE_12__NR3_SHIFT 12
#define MPIPE_LBL_NR_STATE_12__NR3_WIDTH 3
#define MPIPE_LBL_NR_STATE_12__NR3_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_12__NR3_RMASK 0x7
#define MPIPE_LBL_NR_STATE_12__NR3_MASK  0x7000
#define MPIPE_LBL_NR_STATE_12__NR3_FIELD 12,14

#define MPIPE_LBL_NR_STATE_12__NR4_SHIFT 16
#define MPIPE_LBL_NR_STATE_12__NR4_WIDTH 3
#define MPIPE_LBL_NR_STATE_12__NR4_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_12__NR4_RMASK 0x7
#define MPIPE_LBL_NR_STATE_12__NR4_MASK  0x70000
#define MPIPE_LBL_NR_STATE_12__NR4_FIELD 16,18

#define MPIPE_LBL_NR_STATE_12__NR5_SHIFT 20
#define MPIPE_LBL_NR_STATE_12__NR5_WIDTH 3
#define MPIPE_LBL_NR_STATE_12__NR5_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_12__NR5_RMASK 0x7
#define MPIPE_LBL_NR_STATE_12__NR5_MASK  0x700000
#define MPIPE_LBL_NR_STATE_12__NR5_FIELD 20,22

#define MPIPE_LBL_NR_STATE_12__NR6_SHIFT 24
#define MPIPE_LBL_NR_STATE_12__NR6_WIDTH 3
#define MPIPE_LBL_NR_STATE_12__NR6_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_12__NR6_RMASK 0x7
#define MPIPE_LBL_NR_STATE_12__NR6_MASK  0x7000000
#define MPIPE_LBL_NR_STATE_12__NR6_FIELD 24,26

#define MPIPE_LBL_NR_STATE_12__NR7_SHIFT 28
#define MPIPE_LBL_NR_STATE_12__NR7_WIDTH 3
#define MPIPE_LBL_NR_STATE_12__NR7_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_12__NR7_RMASK 0x7
#define MPIPE_LBL_NR_STATE_12__NR7_MASK  0x70000000
#define MPIPE_LBL_NR_STATE_12__NR7_FIELD 28,30

#define MPIPE_LBL_NR_STATE_12__NR8_SHIFT 32
#define MPIPE_LBL_NR_STATE_12__NR8_WIDTH 3
#define MPIPE_LBL_NR_STATE_12__NR8_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_12__NR8_RMASK 0x7
#define MPIPE_LBL_NR_STATE_12__NR8_MASK  _64bit(0x700000000)
#define MPIPE_LBL_NR_STATE_12__NR8_FIELD 32,34

#define MPIPE_LBL_NR_STATE_12__NR9_SHIFT 36
#define MPIPE_LBL_NR_STATE_12__NR9_WIDTH 3
#define MPIPE_LBL_NR_STATE_12__NR9_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_12__NR9_RMASK 0x7
#define MPIPE_LBL_NR_STATE_12__NR9_MASK  _64bit(0x7000000000)
#define MPIPE_LBL_NR_STATE_12__NR9_FIELD 36,38

#define MPIPE_LBL_NR_STATE_12__NR10_SHIFT 40
#define MPIPE_LBL_NR_STATE_12__NR10_WIDTH 3
#define MPIPE_LBL_NR_STATE_12__NR10_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_12__NR10_RMASK 0x7
#define MPIPE_LBL_NR_STATE_12__NR10_MASK  _64bit(0x70000000000)
#define MPIPE_LBL_NR_STATE_12__NR10_FIELD 40,42

#define MPIPE_LBL_NR_STATE_12__NR11_SHIFT 44
#define MPIPE_LBL_NR_STATE_12__NR11_WIDTH 3
#define MPIPE_LBL_NR_STATE_12__NR11_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_12__NR11_RMASK 0x7
#define MPIPE_LBL_NR_STATE_12__NR11_MASK  _64bit(0x700000000000)
#define MPIPE_LBL_NR_STATE_12__NR11_FIELD 44,46

#define MPIPE_LBL_NR_STATE_12__NR12_SHIFT 48
#define MPIPE_LBL_NR_STATE_12__NR12_WIDTH 3
#define MPIPE_LBL_NR_STATE_12__NR12_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_12__NR12_RMASK 0x7
#define MPIPE_LBL_NR_STATE_12__NR12_MASK  _64bit(0x7000000000000)
#define MPIPE_LBL_NR_STATE_12__NR12_FIELD 48,50

#define MPIPE_LBL_NR_STATE_12__NR13_SHIFT 52
#define MPIPE_LBL_NR_STATE_12__NR13_WIDTH 3
#define MPIPE_LBL_NR_STATE_12__NR13_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_12__NR13_RMASK 0x7
#define MPIPE_LBL_NR_STATE_12__NR13_MASK  _64bit(0x70000000000000)
#define MPIPE_LBL_NR_STATE_12__NR13_FIELD 52,54

#define MPIPE_LBL_NR_STATE_12__NR14_SHIFT 56
#define MPIPE_LBL_NR_STATE_12__NR14_WIDTH 3
#define MPIPE_LBL_NR_STATE_12__NR14_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_12__NR14_RMASK 0x7
#define MPIPE_LBL_NR_STATE_12__NR14_MASK  _64bit(0x700000000000000)
#define MPIPE_LBL_NR_STATE_12__NR14_FIELD 56,58

#define MPIPE_LBL_NR_STATE_12__NR15_SHIFT 60
#define MPIPE_LBL_NR_STATE_12__NR15_WIDTH 3
#define MPIPE_LBL_NR_STATE_12__NR15_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_12__NR15_RMASK 0x7
#define MPIPE_LBL_NR_STATE_12__NR15_MASK  _64bit(0x7000000000000000)
#define MPIPE_LBL_NR_STATE_12__NR15_FIELD 60,62


/*
 * Load Balancer NotifRing State.
 * Provides fullness of each NotifRing.  There are 16 registers.  Each
 * register contains the state of 16 NotifRings.
 */
#define MPIPE_LBL_NR_STATE_13__FIRST_WORD 0x21a0
#define MPIPE_LBL_NR_STATE_13__LAST_WORD 0x2218

#define MPIPE_LBL_NR_STATE_13__NR0_SHIFT 0
#define MPIPE_LBL_NR_STATE_13__NR0_WIDTH 3
#define MPIPE_LBL_NR_STATE_13__NR0_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_13__NR0_RMASK 0x7
#define MPIPE_LBL_NR_STATE_13__NR0_MASK  0x7
#define MPIPE_LBL_NR_STATE_13__NR0_FIELD 0,2

#define MPIPE_LBL_NR_STATE_13__NR1_SHIFT 4
#define MPIPE_LBL_NR_STATE_13__NR1_WIDTH 3
#define MPIPE_LBL_NR_STATE_13__NR1_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_13__NR1_RMASK 0x7
#define MPIPE_LBL_NR_STATE_13__NR1_MASK  0x70
#define MPIPE_LBL_NR_STATE_13__NR1_FIELD 4,6

#define MPIPE_LBL_NR_STATE_13__NR2_SHIFT 8
#define MPIPE_LBL_NR_STATE_13__NR2_WIDTH 3
#define MPIPE_LBL_NR_STATE_13__NR2_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_13__NR2_RMASK 0x7
#define MPIPE_LBL_NR_STATE_13__NR2_MASK  0x700
#define MPIPE_LBL_NR_STATE_13__NR2_FIELD 8,10

#define MPIPE_LBL_NR_STATE_13__NR3_SHIFT 12
#define MPIPE_LBL_NR_STATE_13__NR3_WIDTH 3
#define MPIPE_LBL_NR_STATE_13__NR3_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_13__NR3_RMASK 0x7
#define MPIPE_LBL_NR_STATE_13__NR3_MASK  0x7000
#define MPIPE_LBL_NR_STATE_13__NR3_FIELD 12,14

#define MPIPE_LBL_NR_STATE_13__NR4_SHIFT 16
#define MPIPE_LBL_NR_STATE_13__NR4_WIDTH 3
#define MPIPE_LBL_NR_STATE_13__NR4_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_13__NR4_RMASK 0x7
#define MPIPE_LBL_NR_STATE_13__NR4_MASK  0x70000
#define MPIPE_LBL_NR_STATE_13__NR4_FIELD 16,18

#define MPIPE_LBL_NR_STATE_13__NR5_SHIFT 20
#define MPIPE_LBL_NR_STATE_13__NR5_WIDTH 3
#define MPIPE_LBL_NR_STATE_13__NR5_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_13__NR5_RMASK 0x7
#define MPIPE_LBL_NR_STATE_13__NR5_MASK  0x700000
#define MPIPE_LBL_NR_STATE_13__NR5_FIELD 20,22

#define MPIPE_LBL_NR_STATE_13__NR6_SHIFT 24
#define MPIPE_LBL_NR_STATE_13__NR6_WIDTH 3
#define MPIPE_LBL_NR_STATE_13__NR6_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_13__NR6_RMASK 0x7
#define MPIPE_LBL_NR_STATE_13__NR6_MASK  0x7000000
#define MPIPE_LBL_NR_STATE_13__NR6_FIELD 24,26

#define MPIPE_LBL_NR_STATE_13__NR7_SHIFT 28
#define MPIPE_LBL_NR_STATE_13__NR7_WIDTH 3
#define MPIPE_LBL_NR_STATE_13__NR7_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_13__NR7_RMASK 0x7
#define MPIPE_LBL_NR_STATE_13__NR7_MASK  0x70000000
#define MPIPE_LBL_NR_STATE_13__NR7_FIELD 28,30

#define MPIPE_LBL_NR_STATE_13__NR8_SHIFT 32
#define MPIPE_LBL_NR_STATE_13__NR8_WIDTH 3
#define MPIPE_LBL_NR_STATE_13__NR8_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_13__NR8_RMASK 0x7
#define MPIPE_LBL_NR_STATE_13__NR8_MASK  _64bit(0x700000000)
#define MPIPE_LBL_NR_STATE_13__NR8_FIELD 32,34

#define MPIPE_LBL_NR_STATE_13__NR9_SHIFT 36
#define MPIPE_LBL_NR_STATE_13__NR9_WIDTH 3
#define MPIPE_LBL_NR_STATE_13__NR9_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_13__NR9_RMASK 0x7
#define MPIPE_LBL_NR_STATE_13__NR9_MASK  _64bit(0x7000000000)
#define MPIPE_LBL_NR_STATE_13__NR9_FIELD 36,38

#define MPIPE_LBL_NR_STATE_13__NR10_SHIFT 40
#define MPIPE_LBL_NR_STATE_13__NR10_WIDTH 3
#define MPIPE_LBL_NR_STATE_13__NR10_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_13__NR10_RMASK 0x7
#define MPIPE_LBL_NR_STATE_13__NR10_MASK  _64bit(0x70000000000)
#define MPIPE_LBL_NR_STATE_13__NR10_FIELD 40,42

#define MPIPE_LBL_NR_STATE_13__NR11_SHIFT 44
#define MPIPE_LBL_NR_STATE_13__NR11_WIDTH 3
#define MPIPE_LBL_NR_STATE_13__NR11_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_13__NR11_RMASK 0x7
#define MPIPE_LBL_NR_STATE_13__NR11_MASK  _64bit(0x700000000000)
#define MPIPE_LBL_NR_STATE_13__NR11_FIELD 44,46

#define MPIPE_LBL_NR_STATE_13__NR12_SHIFT 48
#define MPIPE_LBL_NR_STATE_13__NR12_WIDTH 3
#define MPIPE_LBL_NR_STATE_13__NR12_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_13__NR12_RMASK 0x7
#define MPIPE_LBL_NR_STATE_13__NR12_MASK  _64bit(0x7000000000000)
#define MPIPE_LBL_NR_STATE_13__NR12_FIELD 48,50

#define MPIPE_LBL_NR_STATE_13__NR13_SHIFT 52
#define MPIPE_LBL_NR_STATE_13__NR13_WIDTH 3
#define MPIPE_LBL_NR_STATE_13__NR13_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_13__NR13_RMASK 0x7
#define MPIPE_LBL_NR_STATE_13__NR13_MASK  _64bit(0x70000000000000)
#define MPIPE_LBL_NR_STATE_13__NR13_FIELD 52,54

#define MPIPE_LBL_NR_STATE_13__NR14_SHIFT 56
#define MPIPE_LBL_NR_STATE_13__NR14_WIDTH 3
#define MPIPE_LBL_NR_STATE_13__NR14_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_13__NR14_RMASK 0x7
#define MPIPE_LBL_NR_STATE_13__NR14_MASK  _64bit(0x700000000000000)
#define MPIPE_LBL_NR_STATE_13__NR14_FIELD 56,58

#define MPIPE_LBL_NR_STATE_13__NR15_SHIFT 60
#define MPIPE_LBL_NR_STATE_13__NR15_WIDTH 3
#define MPIPE_LBL_NR_STATE_13__NR15_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_13__NR15_RMASK 0x7
#define MPIPE_LBL_NR_STATE_13__NR15_MASK  _64bit(0x7000000000000000)
#define MPIPE_LBL_NR_STATE_13__NR15_FIELD 60,62


/*
 * Load Balancer NotifRing State.
 * Provides fullness of each NotifRing.  There are 16 registers.  Each
 * register contains the state of 16 NotifRings.
 */
#define MPIPE_LBL_NR_STATE_14__FIRST_WORD 0x21a8
#define MPIPE_LBL_NR_STATE_14__LAST_WORD 0x2220

#define MPIPE_LBL_NR_STATE_14__NR0_SHIFT 0
#define MPIPE_LBL_NR_STATE_14__NR0_WIDTH 3
#define MPIPE_LBL_NR_STATE_14__NR0_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_14__NR0_RMASK 0x7
#define MPIPE_LBL_NR_STATE_14__NR0_MASK  0x7
#define MPIPE_LBL_NR_STATE_14__NR0_FIELD 0,2

#define MPIPE_LBL_NR_STATE_14__NR1_SHIFT 4
#define MPIPE_LBL_NR_STATE_14__NR1_WIDTH 3
#define MPIPE_LBL_NR_STATE_14__NR1_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_14__NR1_RMASK 0x7
#define MPIPE_LBL_NR_STATE_14__NR1_MASK  0x70
#define MPIPE_LBL_NR_STATE_14__NR1_FIELD 4,6

#define MPIPE_LBL_NR_STATE_14__NR2_SHIFT 8
#define MPIPE_LBL_NR_STATE_14__NR2_WIDTH 3
#define MPIPE_LBL_NR_STATE_14__NR2_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_14__NR2_RMASK 0x7
#define MPIPE_LBL_NR_STATE_14__NR2_MASK  0x700
#define MPIPE_LBL_NR_STATE_14__NR2_FIELD 8,10

#define MPIPE_LBL_NR_STATE_14__NR3_SHIFT 12
#define MPIPE_LBL_NR_STATE_14__NR3_WIDTH 3
#define MPIPE_LBL_NR_STATE_14__NR3_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_14__NR3_RMASK 0x7
#define MPIPE_LBL_NR_STATE_14__NR3_MASK  0x7000
#define MPIPE_LBL_NR_STATE_14__NR3_FIELD 12,14

#define MPIPE_LBL_NR_STATE_14__NR4_SHIFT 16
#define MPIPE_LBL_NR_STATE_14__NR4_WIDTH 3
#define MPIPE_LBL_NR_STATE_14__NR4_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_14__NR4_RMASK 0x7
#define MPIPE_LBL_NR_STATE_14__NR4_MASK  0x70000
#define MPIPE_LBL_NR_STATE_14__NR4_FIELD 16,18

#define MPIPE_LBL_NR_STATE_14__NR5_SHIFT 20
#define MPIPE_LBL_NR_STATE_14__NR5_WIDTH 3
#define MPIPE_LBL_NR_STATE_14__NR5_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_14__NR5_RMASK 0x7
#define MPIPE_LBL_NR_STATE_14__NR5_MASK  0x700000
#define MPIPE_LBL_NR_STATE_14__NR5_FIELD 20,22

#define MPIPE_LBL_NR_STATE_14__NR6_SHIFT 24
#define MPIPE_LBL_NR_STATE_14__NR6_WIDTH 3
#define MPIPE_LBL_NR_STATE_14__NR6_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_14__NR6_RMASK 0x7
#define MPIPE_LBL_NR_STATE_14__NR6_MASK  0x7000000
#define MPIPE_LBL_NR_STATE_14__NR6_FIELD 24,26

#define MPIPE_LBL_NR_STATE_14__NR7_SHIFT 28
#define MPIPE_LBL_NR_STATE_14__NR7_WIDTH 3
#define MPIPE_LBL_NR_STATE_14__NR7_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_14__NR7_RMASK 0x7
#define MPIPE_LBL_NR_STATE_14__NR7_MASK  0x70000000
#define MPIPE_LBL_NR_STATE_14__NR7_FIELD 28,30

#define MPIPE_LBL_NR_STATE_14__NR8_SHIFT 32
#define MPIPE_LBL_NR_STATE_14__NR8_WIDTH 3
#define MPIPE_LBL_NR_STATE_14__NR8_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_14__NR8_RMASK 0x7
#define MPIPE_LBL_NR_STATE_14__NR8_MASK  _64bit(0x700000000)
#define MPIPE_LBL_NR_STATE_14__NR8_FIELD 32,34

#define MPIPE_LBL_NR_STATE_14__NR9_SHIFT 36
#define MPIPE_LBL_NR_STATE_14__NR9_WIDTH 3
#define MPIPE_LBL_NR_STATE_14__NR9_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_14__NR9_RMASK 0x7
#define MPIPE_LBL_NR_STATE_14__NR9_MASK  _64bit(0x7000000000)
#define MPIPE_LBL_NR_STATE_14__NR9_FIELD 36,38

#define MPIPE_LBL_NR_STATE_14__NR10_SHIFT 40
#define MPIPE_LBL_NR_STATE_14__NR10_WIDTH 3
#define MPIPE_LBL_NR_STATE_14__NR10_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_14__NR10_RMASK 0x7
#define MPIPE_LBL_NR_STATE_14__NR10_MASK  _64bit(0x70000000000)
#define MPIPE_LBL_NR_STATE_14__NR10_FIELD 40,42

#define MPIPE_LBL_NR_STATE_14__NR11_SHIFT 44
#define MPIPE_LBL_NR_STATE_14__NR11_WIDTH 3
#define MPIPE_LBL_NR_STATE_14__NR11_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_14__NR11_RMASK 0x7
#define MPIPE_LBL_NR_STATE_14__NR11_MASK  _64bit(0x700000000000)
#define MPIPE_LBL_NR_STATE_14__NR11_FIELD 44,46

#define MPIPE_LBL_NR_STATE_14__NR12_SHIFT 48
#define MPIPE_LBL_NR_STATE_14__NR12_WIDTH 3
#define MPIPE_LBL_NR_STATE_14__NR12_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_14__NR12_RMASK 0x7
#define MPIPE_LBL_NR_STATE_14__NR12_MASK  _64bit(0x7000000000000)
#define MPIPE_LBL_NR_STATE_14__NR12_FIELD 48,50

#define MPIPE_LBL_NR_STATE_14__NR13_SHIFT 52
#define MPIPE_LBL_NR_STATE_14__NR13_WIDTH 3
#define MPIPE_LBL_NR_STATE_14__NR13_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_14__NR13_RMASK 0x7
#define MPIPE_LBL_NR_STATE_14__NR13_MASK  _64bit(0x70000000000000)
#define MPIPE_LBL_NR_STATE_14__NR13_FIELD 52,54

#define MPIPE_LBL_NR_STATE_14__NR14_SHIFT 56
#define MPIPE_LBL_NR_STATE_14__NR14_WIDTH 3
#define MPIPE_LBL_NR_STATE_14__NR14_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_14__NR14_RMASK 0x7
#define MPIPE_LBL_NR_STATE_14__NR14_MASK  _64bit(0x700000000000000)
#define MPIPE_LBL_NR_STATE_14__NR14_FIELD 56,58

#define MPIPE_LBL_NR_STATE_14__NR15_SHIFT 60
#define MPIPE_LBL_NR_STATE_14__NR15_WIDTH 3
#define MPIPE_LBL_NR_STATE_14__NR15_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_14__NR15_RMASK 0x7
#define MPIPE_LBL_NR_STATE_14__NR15_MASK  _64bit(0x7000000000000000)
#define MPIPE_LBL_NR_STATE_14__NR15_FIELD 60,62


/*
 * Load Balancer NotifRing State.
 * Provides fullness of each NotifRing.  There are 16 registers.  Each
 * register contains the state of 16 NotifRings.
 */
#define MPIPE_LBL_NR_STATE_15__FIRST_WORD 0x21b0
#define MPIPE_LBL_NR_STATE_15__LAST_WORD 0x2228

#define MPIPE_LBL_NR_STATE_15__NR0_SHIFT 0
#define MPIPE_LBL_NR_STATE_15__NR0_WIDTH 3
#define MPIPE_LBL_NR_STATE_15__NR0_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_15__NR0_RMASK 0x7
#define MPIPE_LBL_NR_STATE_15__NR0_MASK  0x7
#define MPIPE_LBL_NR_STATE_15__NR0_FIELD 0,2

#define MPIPE_LBL_NR_STATE_15__NR1_SHIFT 4
#define MPIPE_LBL_NR_STATE_15__NR1_WIDTH 3
#define MPIPE_LBL_NR_STATE_15__NR1_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_15__NR1_RMASK 0x7
#define MPIPE_LBL_NR_STATE_15__NR1_MASK  0x70
#define MPIPE_LBL_NR_STATE_15__NR1_FIELD 4,6

#define MPIPE_LBL_NR_STATE_15__NR2_SHIFT 8
#define MPIPE_LBL_NR_STATE_15__NR2_WIDTH 3
#define MPIPE_LBL_NR_STATE_15__NR2_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_15__NR2_RMASK 0x7
#define MPIPE_LBL_NR_STATE_15__NR2_MASK  0x700
#define MPIPE_LBL_NR_STATE_15__NR2_FIELD 8,10

#define MPIPE_LBL_NR_STATE_15__NR3_SHIFT 12
#define MPIPE_LBL_NR_STATE_15__NR3_WIDTH 3
#define MPIPE_LBL_NR_STATE_15__NR3_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_15__NR3_RMASK 0x7
#define MPIPE_LBL_NR_STATE_15__NR3_MASK  0x7000
#define MPIPE_LBL_NR_STATE_15__NR3_FIELD 12,14

#define MPIPE_LBL_NR_STATE_15__NR4_SHIFT 16
#define MPIPE_LBL_NR_STATE_15__NR4_WIDTH 3
#define MPIPE_LBL_NR_STATE_15__NR4_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_15__NR4_RMASK 0x7
#define MPIPE_LBL_NR_STATE_15__NR4_MASK  0x70000
#define MPIPE_LBL_NR_STATE_15__NR4_FIELD 16,18

#define MPIPE_LBL_NR_STATE_15__NR5_SHIFT 20
#define MPIPE_LBL_NR_STATE_15__NR5_WIDTH 3
#define MPIPE_LBL_NR_STATE_15__NR5_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_15__NR5_RMASK 0x7
#define MPIPE_LBL_NR_STATE_15__NR5_MASK  0x700000
#define MPIPE_LBL_NR_STATE_15__NR5_FIELD 20,22

#define MPIPE_LBL_NR_STATE_15__NR6_SHIFT 24
#define MPIPE_LBL_NR_STATE_15__NR6_WIDTH 3
#define MPIPE_LBL_NR_STATE_15__NR6_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_15__NR6_RMASK 0x7
#define MPIPE_LBL_NR_STATE_15__NR6_MASK  0x7000000
#define MPIPE_LBL_NR_STATE_15__NR6_FIELD 24,26

#define MPIPE_LBL_NR_STATE_15__NR7_SHIFT 28
#define MPIPE_LBL_NR_STATE_15__NR7_WIDTH 3
#define MPIPE_LBL_NR_STATE_15__NR7_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_15__NR7_RMASK 0x7
#define MPIPE_LBL_NR_STATE_15__NR7_MASK  0x70000000
#define MPIPE_LBL_NR_STATE_15__NR7_FIELD 28,30

#define MPIPE_LBL_NR_STATE_15__NR8_SHIFT 32
#define MPIPE_LBL_NR_STATE_15__NR8_WIDTH 3
#define MPIPE_LBL_NR_STATE_15__NR8_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_15__NR8_RMASK 0x7
#define MPIPE_LBL_NR_STATE_15__NR8_MASK  _64bit(0x700000000)
#define MPIPE_LBL_NR_STATE_15__NR8_FIELD 32,34

#define MPIPE_LBL_NR_STATE_15__NR9_SHIFT 36
#define MPIPE_LBL_NR_STATE_15__NR9_WIDTH 3
#define MPIPE_LBL_NR_STATE_15__NR9_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_15__NR9_RMASK 0x7
#define MPIPE_LBL_NR_STATE_15__NR9_MASK  _64bit(0x7000000000)
#define MPIPE_LBL_NR_STATE_15__NR9_FIELD 36,38

#define MPIPE_LBL_NR_STATE_15__NR10_SHIFT 40
#define MPIPE_LBL_NR_STATE_15__NR10_WIDTH 3
#define MPIPE_LBL_NR_STATE_15__NR10_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_15__NR10_RMASK 0x7
#define MPIPE_LBL_NR_STATE_15__NR10_MASK  _64bit(0x70000000000)
#define MPIPE_LBL_NR_STATE_15__NR10_FIELD 40,42

#define MPIPE_LBL_NR_STATE_15__NR11_SHIFT 44
#define MPIPE_LBL_NR_STATE_15__NR11_WIDTH 3
#define MPIPE_LBL_NR_STATE_15__NR11_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_15__NR11_RMASK 0x7
#define MPIPE_LBL_NR_STATE_15__NR11_MASK  _64bit(0x700000000000)
#define MPIPE_LBL_NR_STATE_15__NR11_FIELD 44,46

#define MPIPE_LBL_NR_STATE_15__NR12_SHIFT 48
#define MPIPE_LBL_NR_STATE_15__NR12_WIDTH 3
#define MPIPE_LBL_NR_STATE_15__NR12_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_15__NR12_RMASK 0x7
#define MPIPE_LBL_NR_STATE_15__NR12_MASK  _64bit(0x7000000000000)
#define MPIPE_LBL_NR_STATE_15__NR12_FIELD 48,50

#define MPIPE_LBL_NR_STATE_15__NR13_SHIFT 52
#define MPIPE_LBL_NR_STATE_15__NR13_WIDTH 3
#define MPIPE_LBL_NR_STATE_15__NR13_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_15__NR13_RMASK 0x7
#define MPIPE_LBL_NR_STATE_15__NR13_MASK  _64bit(0x70000000000000)
#define MPIPE_LBL_NR_STATE_15__NR13_FIELD 52,54

#define MPIPE_LBL_NR_STATE_15__NR14_SHIFT 56
#define MPIPE_LBL_NR_STATE_15__NR14_WIDTH 3
#define MPIPE_LBL_NR_STATE_15__NR14_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_15__NR14_RMASK 0x7
#define MPIPE_LBL_NR_STATE_15__NR14_MASK  _64bit(0x700000000000000)
#define MPIPE_LBL_NR_STATE_15__NR14_FIELD 56,58

#define MPIPE_LBL_NR_STATE_15__NR15_SHIFT 60
#define MPIPE_LBL_NR_STATE_15__NR15_WIDTH 3
#define MPIPE_LBL_NR_STATE_15__NR15_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_15__NR15_RMASK 0x7
#define MPIPE_LBL_NR_STATE_15__NR15_MASK  _64bit(0x7000000000000000)
#define MPIPE_LBL_NR_STATE_15__NR15_FIELD 60,62


/*
 * Load Balancer NotifRing State.
 * Provides fullness of each NotifRing.  There are 16 registers.  Each
 * register contains the state of 16 NotifRings.
 */
#define MPIPE_LBL_NR_STATE_2__FIRST_WORD 0x2148
#define MPIPE_LBL_NR_STATE_2__LAST_WORD 0x21c0

#define MPIPE_LBL_NR_STATE_2__NR0_SHIFT 0
#define MPIPE_LBL_NR_STATE_2__NR0_WIDTH 3
#define MPIPE_LBL_NR_STATE_2__NR0_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_2__NR0_RMASK 0x7
#define MPIPE_LBL_NR_STATE_2__NR0_MASK  0x7
#define MPIPE_LBL_NR_STATE_2__NR0_FIELD 0,2

#define MPIPE_LBL_NR_STATE_2__NR1_SHIFT 4
#define MPIPE_LBL_NR_STATE_2__NR1_WIDTH 3
#define MPIPE_LBL_NR_STATE_2__NR1_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_2__NR1_RMASK 0x7
#define MPIPE_LBL_NR_STATE_2__NR1_MASK  0x70
#define MPIPE_LBL_NR_STATE_2__NR1_FIELD 4,6

#define MPIPE_LBL_NR_STATE_2__NR2_SHIFT 8
#define MPIPE_LBL_NR_STATE_2__NR2_WIDTH 3
#define MPIPE_LBL_NR_STATE_2__NR2_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_2__NR2_RMASK 0x7
#define MPIPE_LBL_NR_STATE_2__NR2_MASK  0x700
#define MPIPE_LBL_NR_STATE_2__NR2_FIELD 8,10

#define MPIPE_LBL_NR_STATE_2__NR3_SHIFT 12
#define MPIPE_LBL_NR_STATE_2__NR3_WIDTH 3
#define MPIPE_LBL_NR_STATE_2__NR3_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_2__NR3_RMASK 0x7
#define MPIPE_LBL_NR_STATE_2__NR3_MASK  0x7000
#define MPIPE_LBL_NR_STATE_2__NR3_FIELD 12,14

#define MPIPE_LBL_NR_STATE_2__NR4_SHIFT 16
#define MPIPE_LBL_NR_STATE_2__NR4_WIDTH 3
#define MPIPE_LBL_NR_STATE_2__NR4_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_2__NR4_RMASK 0x7
#define MPIPE_LBL_NR_STATE_2__NR4_MASK  0x70000
#define MPIPE_LBL_NR_STATE_2__NR4_FIELD 16,18

#define MPIPE_LBL_NR_STATE_2__NR5_SHIFT 20
#define MPIPE_LBL_NR_STATE_2__NR5_WIDTH 3
#define MPIPE_LBL_NR_STATE_2__NR5_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_2__NR5_RMASK 0x7
#define MPIPE_LBL_NR_STATE_2__NR5_MASK  0x700000
#define MPIPE_LBL_NR_STATE_2__NR5_FIELD 20,22

#define MPIPE_LBL_NR_STATE_2__NR6_SHIFT 24
#define MPIPE_LBL_NR_STATE_2__NR6_WIDTH 3
#define MPIPE_LBL_NR_STATE_2__NR6_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_2__NR6_RMASK 0x7
#define MPIPE_LBL_NR_STATE_2__NR6_MASK  0x7000000
#define MPIPE_LBL_NR_STATE_2__NR6_FIELD 24,26

#define MPIPE_LBL_NR_STATE_2__NR7_SHIFT 28
#define MPIPE_LBL_NR_STATE_2__NR7_WIDTH 3
#define MPIPE_LBL_NR_STATE_2__NR7_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_2__NR7_RMASK 0x7
#define MPIPE_LBL_NR_STATE_2__NR7_MASK  0x70000000
#define MPIPE_LBL_NR_STATE_2__NR7_FIELD 28,30

#define MPIPE_LBL_NR_STATE_2__NR8_SHIFT 32
#define MPIPE_LBL_NR_STATE_2__NR8_WIDTH 3
#define MPIPE_LBL_NR_STATE_2__NR8_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_2__NR8_RMASK 0x7
#define MPIPE_LBL_NR_STATE_2__NR8_MASK  _64bit(0x700000000)
#define MPIPE_LBL_NR_STATE_2__NR8_FIELD 32,34

#define MPIPE_LBL_NR_STATE_2__NR9_SHIFT 36
#define MPIPE_LBL_NR_STATE_2__NR9_WIDTH 3
#define MPIPE_LBL_NR_STATE_2__NR9_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_2__NR9_RMASK 0x7
#define MPIPE_LBL_NR_STATE_2__NR9_MASK  _64bit(0x7000000000)
#define MPIPE_LBL_NR_STATE_2__NR9_FIELD 36,38

#define MPIPE_LBL_NR_STATE_2__NR10_SHIFT 40
#define MPIPE_LBL_NR_STATE_2__NR10_WIDTH 3
#define MPIPE_LBL_NR_STATE_2__NR10_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_2__NR10_RMASK 0x7
#define MPIPE_LBL_NR_STATE_2__NR10_MASK  _64bit(0x70000000000)
#define MPIPE_LBL_NR_STATE_2__NR10_FIELD 40,42

#define MPIPE_LBL_NR_STATE_2__NR11_SHIFT 44
#define MPIPE_LBL_NR_STATE_2__NR11_WIDTH 3
#define MPIPE_LBL_NR_STATE_2__NR11_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_2__NR11_RMASK 0x7
#define MPIPE_LBL_NR_STATE_2__NR11_MASK  _64bit(0x700000000000)
#define MPIPE_LBL_NR_STATE_2__NR11_FIELD 44,46

#define MPIPE_LBL_NR_STATE_2__NR12_SHIFT 48
#define MPIPE_LBL_NR_STATE_2__NR12_WIDTH 3
#define MPIPE_LBL_NR_STATE_2__NR12_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_2__NR12_RMASK 0x7
#define MPIPE_LBL_NR_STATE_2__NR12_MASK  _64bit(0x7000000000000)
#define MPIPE_LBL_NR_STATE_2__NR12_FIELD 48,50

#define MPIPE_LBL_NR_STATE_2__NR13_SHIFT 52
#define MPIPE_LBL_NR_STATE_2__NR13_WIDTH 3
#define MPIPE_LBL_NR_STATE_2__NR13_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_2__NR13_RMASK 0x7
#define MPIPE_LBL_NR_STATE_2__NR13_MASK  _64bit(0x70000000000000)
#define MPIPE_LBL_NR_STATE_2__NR13_FIELD 52,54

#define MPIPE_LBL_NR_STATE_2__NR14_SHIFT 56
#define MPIPE_LBL_NR_STATE_2__NR14_WIDTH 3
#define MPIPE_LBL_NR_STATE_2__NR14_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_2__NR14_RMASK 0x7
#define MPIPE_LBL_NR_STATE_2__NR14_MASK  _64bit(0x700000000000000)
#define MPIPE_LBL_NR_STATE_2__NR14_FIELD 56,58

#define MPIPE_LBL_NR_STATE_2__NR15_SHIFT 60
#define MPIPE_LBL_NR_STATE_2__NR15_WIDTH 3
#define MPIPE_LBL_NR_STATE_2__NR15_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_2__NR15_RMASK 0x7
#define MPIPE_LBL_NR_STATE_2__NR15_MASK  _64bit(0x7000000000000000)
#define MPIPE_LBL_NR_STATE_2__NR15_FIELD 60,62


/*
 * Load Balancer NotifRing State.
 * Provides fullness of each NotifRing.  There are 16 registers.  Each
 * register contains the state of 16 NotifRings.
 */
#define MPIPE_LBL_NR_STATE_3__FIRST_WORD 0x2150
#define MPIPE_LBL_NR_STATE_3__LAST_WORD 0x21c8

#define MPIPE_LBL_NR_STATE_3__NR0_SHIFT 0
#define MPIPE_LBL_NR_STATE_3__NR0_WIDTH 3
#define MPIPE_LBL_NR_STATE_3__NR0_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_3__NR0_RMASK 0x7
#define MPIPE_LBL_NR_STATE_3__NR0_MASK  0x7
#define MPIPE_LBL_NR_STATE_3__NR0_FIELD 0,2

#define MPIPE_LBL_NR_STATE_3__NR1_SHIFT 4
#define MPIPE_LBL_NR_STATE_3__NR1_WIDTH 3
#define MPIPE_LBL_NR_STATE_3__NR1_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_3__NR1_RMASK 0x7
#define MPIPE_LBL_NR_STATE_3__NR1_MASK  0x70
#define MPIPE_LBL_NR_STATE_3__NR1_FIELD 4,6

#define MPIPE_LBL_NR_STATE_3__NR2_SHIFT 8
#define MPIPE_LBL_NR_STATE_3__NR2_WIDTH 3
#define MPIPE_LBL_NR_STATE_3__NR2_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_3__NR2_RMASK 0x7
#define MPIPE_LBL_NR_STATE_3__NR2_MASK  0x700
#define MPIPE_LBL_NR_STATE_3__NR2_FIELD 8,10

#define MPIPE_LBL_NR_STATE_3__NR3_SHIFT 12
#define MPIPE_LBL_NR_STATE_3__NR3_WIDTH 3
#define MPIPE_LBL_NR_STATE_3__NR3_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_3__NR3_RMASK 0x7
#define MPIPE_LBL_NR_STATE_3__NR3_MASK  0x7000
#define MPIPE_LBL_NR_STATE_3__NR3_FIELD 12,14

#define MPIPE_LBL_NR_STATE_3__NR4_SHIFT 16
#define MPIPE_LBL_NR_STATE_3__NR4_WIDTH 3
#define MPIPE_LBL_NR_STATE_3__NR4_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_3__NR4_RMASK 0x7
#define MPIPE_LBL_NR_STATE_3__NR4_MASK  0x70000
#define MPIPE_LBL_NR_STATE_3__NR4_FIELD 16,18

#define MPIPE_LBL_NR_STATE_3__NR5_SHIFT 20
#define MPIPE_LBL_NR_STATE_3__NR5_WIDTH 3
#define MPIPE_LBL_NR_STATE_3__NR5_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_3__NR5_RMASK 0x7
#define MPIPE_LBL_NR_STATE_3__NR5_MASK  0x700000
#define MPIPE_LBL_NR_STATE_3__NR5_FIELD 20,22

#define MPIPE_LBL_NR_STATE_3__NR6_SHIFT 24
#define MPIPE_LBL_NR_STATE_3__NR6_WIDTH 3
#define MPIPE_LBL_NR_STATE_3__NR6_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_3__NR6_RMASK 0x7
#define MPIPE_LBL_NR_STATE_3__NR6_MASK  0x7000000
#define MPIPE_LBL_NR_STATE_3__NR6_FIELD 24,26

#define MPIPE_LBL_NR_STATE_3__NR7_SHIFT 28
#define MPIPE_LBL_NR_STATE_3__NR7_WIDTH 3
#define MPIPE_LBL_NR_STATE_3__NR7_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_3__NR7_RMASK 0x7
#define MPIPE_LBL_NR_STATE_3__NR7_MASK  0x70000000
#define MPIPE_LBL_NR_STATE_3__NR7_FIELD 28,30

#define MPIPE_LBL_NR_STATE_3__NR8_SHIFT 32
#define MPIPE_LBL_NR_STATE_3__NR8_WIDTH 3
#define MPIPE_LBL_NR_STATE_3__NR8_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_3__NR8_RMASK 0x7
#define MPIPE_LBL_NR_STATE_3__NR8_MASK  _64bit(0x700000000)
#define MPIPE_LBL_NR_STATE_3__NR8_FIELD 32,34

#define MPIPE_LBL_NR_STATE_3__NR9_SHIFT 36
#define MPIPE_LBL_NR_STATE_3__NR9_WIDTH 3
#define MPIPE_LBL_NR_STATE_3__NR9_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_3__NR9_RMASK 0x7
#define MPIPE_LBL_NR_STATE_3__NR9_MASK  _64bit(0x7000000000)
#define MPIPE_LBL_NR_STATE_3__NR9_FIELD 36,38

#define MPIPE_LBL_NR_STATE_3__NR10_SHIFT 40
#define MPIPE_LBL_NR_STATE_3__NR10_WIDTH 3
#define MPIPE_LBL_NR_STATE_3__NR10_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_3__NR10_RMASK 0x7
#define MPIPE_LBL_NR_STATE_3__NR10_MASK  _64bit(0x70000000000)
#define MPIPE_LBL_NR_STATE_3__NR10_FIELD 40,42

#define MPIPE_LBL_NR_STATE_3__NR11_SHIFT 44
#define MPIPE_LBL_NR_STATE_3__NR11_WIDTH 3
#define MPIPE_LBL_NR_STATE_3__NR11_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_3__NR11_RMASK 0x7
#define MPIPE_LBL_NR_STATE_3__NR11_MASK  _64bit(0x700000000000)
#define MPIPE_LBL_NR_STATE_3__NR11_FIELD 44,46

#define MPIPE_LBL_NR_STATE_3__NR12_SHIFT 48
#define MPIPE_LBL_NR_STATE_3__NR12_WIDTH 3
#define MPIPE_LBL_NR_STATE_3__NR12_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_3__NR12_RMASK 0x7
#define MPIPE_LBL_NR_STATE_3__NR12_MASK  _64bit(0x7000000000000)
#define MPIPE_LBL_NR_STATE_3__NR12_FIELD 48,50

#define MPIPE_LBL_NR_STATE_3__NR13_SHIFT 52
#define MPIPE_LBL_NR_STATE_3__NR13_WIDTH 3
#define MPIPE_LBL_NR_STATE_3__NR13_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_3__NR13_RMASK 0x7
#define MPIPE_LBL_NR_STATE_3__NR13_MASK  _64bit(0x70000000000000)
#define MPIPE_LBL_NR_STATE_3__NR13_FIELD 52,54

#define MPIPE_LBL_NR_STATE_3__NR14_SHIFT 56
#define MPIPE_LBL_NR_STATE_3__NR14_WIDTH 3
#define MPIPE_LBL_NR_STATE_3__NR14_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_3__NR14_RMASK 0x7
#define MPIPE_LBL_NR_STATE_3__NR14_MASK  _64bit(0x700000000000000)
#define MPIPE_LBL_NR_STATE_3__NR14_FIELD 56,58

#define MPIPE_LBL_NR_STATE_3__NR15_SHIFT 60
#define MPIPE_LBL_NR_STATE_3__NR15_WIDTH 3
#define MPIPE_LBL_NR_STATE_3__NR15_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_3__NR15_RMASK 0x7
#define MPIPE_LBL_NR_STATE_3__NR15_MASK  _64bit(0x7000000000000000)
#define MPIPE_LBL_NR_STATE_3__NR15_FIELD 60,62


/*
 * Load Balancer NotifRing State.
 * Provides fullness of each NotifRing.  There are 16 registers.  Each
 * register contains the state of 16 NotifRings.
 */
#define MPIPE_LBL_NR_STATE_4__FIRST_WORD 0x2158
#define MPIPE_LBL_NR_STATE_4__LAST_WORD 0x21d0

#define MPIPE_LBL_NR_STATE_4__NR0_SHIFT 0
#define MPIPE_LBL_NR_STATE_4__NR0_WIDTH 3
#define MPIPE_LBL_NR_STATE_4__NR0_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_4__NR0_RMASK 0x7
#define MPIPE_LBL_NR_STATE_4__NR0_MASK  0x7
#define MPIPE_LBL_NR_STATE_4__NR0_FIELD 0,2

#define MPIPE_LBL_NR_STATE_4__NR1_SHIFT 4
#define MPIPE_LBL_NR_STATE_4__NR1_WIDTH 3
#define MPIPE_LBL_NR_STATE_4__NR1_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_4__NR1_RMASK 0x7
#define MPIPE_LBL_NR_STATE_4__NR1_MASK  0x70
#define MPIPE_LBL_NR_STATE_4__NR1_FIELD 4,6

#define MPIPE_LBL_NR_STATE_4__NR2_SHIFT 8
#define MPIPE_LBL_NR_STATE_4__NR2_WIDTH 3
#define MPIPE_LBL_NR_STATE_4__NR2_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_4__NR2_RMASK 0x7
#define MPIPE_LBL_NR_STATE_4__NR2_MASK  0x700
#define MPIPE_LBL_NR_STATE_4__NR2_FIELD 8,10

#define MPIPE_LBL_NR_STATE_4__NR3_SHIFT 12
#define MPIPE_LBL_NR_STATE_4__NR3_WIDTH 3
#define MPIPE_LBL_NR_STATE_4__NR3_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_4__NR3_RMASK 0x7
#define MPIPE_LBL_NR_STATE_4__NR3_MASK  0x7000
#define MPIPE_LBL_NR_STATE_4__NR3_FIELD 12,14

#define MPIPE_LBL_NR_STATE_4__NR4_SHIFT 16
#define MPIPE_LBL_NR_STATE_4__NR4_WIDTH 3
#define MPIPE_LBL_NR_STATE_4__NR4_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_4__NR4_RMASK 0x7
#define MPIPE_LBL_NR_STATE_4__NR4_MASK  0x70000
#define MPIPE_LBL_NR_STATE_4__NR4_FIELD 16,18

#define MPIPE_LBL_NR_STATE_4__NR5_SHIFT 20
#define MPIPE_LBL_NR_STATE_4__NR5_WIDTH 3
#define MPIPE_LBL_NR_STATE_4__NR5_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_4__NR5_RMASK 0x7
#define MPIPE_LBL_NR_STATE_4__NR5_MASK  0x700000
#define MPIPE_LBL_NR_STATE_4__NR5_FIELD 20,22

#define MPIPE_LBL_NR_STATE_4__NR6_SHIFT 24
#define MPIPE_LBL_NR_STATE_4__NR6_WIDTH 3
#define MPIPE_LBL_NR_STATE_4__NR6_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_4__NR6_RMASK 0x7
#define MPIPE_LBL_NR_STATE_4__NR6_MASK  0x7000000
#define MPIPE_LBL_NR_STATE_4__NR6_FIELD 24,26

#define MPIPE_LBL_NR_STATE_4__NR7_SHIFT 28
#define MPIPE_LBL_NR_STATE_4__NR7_WIDTH 3
#define MPIPE_LBL_NR_STATE_4__NR7_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_4__NR7_RMASK 0x7
#define MPIPE_LBL_NR_STATE_4__NR7_MASK  0x70000000
#define MPIPE_LBL_NR_STATE_4__NR7_FIELD 28,30

#define MPIPE_LBL_NR_STATE_4__NR8_SHIFT 32
#define MPIPE_LBL_NR_STATE_4__NR8_WIDTH 3
#define MPIPE_LBL_NR_STATE_4__NR8_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_4__NR8_RMASK 0x7
#define MPIPE_LBL_NR_STATE_4__NR8_MASK  _64bit(0x700000000)
#define MPIPE_LBL_NR_STATE_4__NR8_FIELD 32,34

#define MPIPE_LBL_NR_STATE_4__NR9_SHIFT 36
#define MPIPE_LBL_NR_STATE_4__NR9_WIDTH 3
#define MPIPE_LBL_NR_STATE_4__NR9_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_4__NR9_RMASK 0x7
#define MPIPE_LBL_NR_STATE_4__NR9_MASK  _64bit(0x7000000000)
#define MPIPE_LBL_NR_STATE_4__NR9_FIELD 36,38

#define MPIPE_LBL_NR_STATE_4__NR10_SHIFT 40
#define MPIPE_LBL_NR_STATE_4__NR10_WIDTH 3
#define MPIPE_LBL_NR_STATE_4__NR10_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_4__NR10_RMASK 0x7
#define MPIPE_LBL_NR_STATE_4__NR10_MASK  _64bit(0x70000000000)
#define MPIPE_LBL_NR_STATE_4__NR10_FIELD 40,42

#define MPIPE_LBL_NR_STATE_4__NR11_SHIFT 44
#define MPIPE_LBL_NR_STATE_4__NR11_WIDTH 3
#define MPIPE_LBL_NR_STATE_4__NR11_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_4__NR11_RMASK 0x7
#define MPIPE_LBL_NR_STATE_4__NR11_MASK  _64bit(0x700000000000)
#define MPIPE_LBL_NR_STATE_4__NR11_FIELD 44,46

#define MPIPE_LBL_NR_STATE_4__NR12_SHIFT 48
#define MPIPE_LBL_NR_STATE_4__NR12_WIDTH 3
#define MPIPE_LBL_NR_STATE_4__NR12_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_4__NR12_RMASK 0x7
#define MPIPE_LBL_NR_STATE_4__NR12_MASK  _64bit(0x7000000000000)
#define MPIPE_LBL_NR_STATE_4__NR12_FIELD 48,50

#define MPIPE_LBL_NR_STATE_4__NR13_SHIFT 52
#define MPIPE_LBL_NR_STATE_4__NR13_WIDTH 3
#define MPIPE_LBL_NR_STATE_4__NR13_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_4__NR13_RMASK 0x7
#define MPIPE_LBL_NR_STATE_4__NR13_MASK  _64bit(0x70000000000000)
#define MPIPE_LBL_NR_STATE_4__NR13_FIELD 52,54

#define MPIPE_LBL_NR_STATE_4__NR14_SHIFT 56
#define MPIPE_LBL_NR_STATE_4__NR14_WIDTH 3
#define MPIPE_LBL_NR_STATE_4__NR14_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_4__NR14_RMASK 0x7
#define MPIPE_LBL_NR_STATE_4__NR14_MASK  _64bit(0x700000000000000)
#define MPIPE_LBL_NR_STATE_4__NR14_FIELD 56,58

#define MPIPE_LBL_NR_STATE_4__NR15_SHIFT 60
#define MPIPE_LBL_NR_STATE_4__NR15_WIDTH 3
#define MPIPE_LBL_NR_STATE_4__NR15_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_4__NR15_RMASK 0x7
#define MPIPE_LBL_NR_STATE_4__NR15_MASK  _64bit(0x7000000000000000)
#define MPIPE_LBL_NR_STATE_4__NR15_FIELD 60,62


/*
 * Load Balancer NotifRing State.
 * Provides fullness of each NotifRing.  There are 16 registers.  Each
 * register contains the state of 16 NotifRings.
 */
#define MPIPE_LBL_NR_STATE_5__FIRST_WORD 0x2160
#define MPIPE_LBL_NR_STATE_5__LAST_WORD 0x21d8

#define MPIPE_LBL_NR_STATE_5__NR0_SHIFT 0
#define MPIPE_LBL_NR_STATE_5__NR0_WIDTH 3
#define MPIPE_LBL_NR_STATE_5__NR0_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_5__NR0_RMASK 0x7
#define MPIPE_LBL_NR_STATE_5__NR0_MASK  0x7
#define MPIPE_LBL_NR_STATE_5__NR0_FIELD 0,2

#define MPIPE_LBL_NR_STATE_5__NR1_SHIFT 4
#define MPIPE_LBL_NR_STATE_5__NR1_WIDTH 3
#define MPIPE_LBL_NR_STATE_5__NR1_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_5__NR1_RMASK 0x7
#define MPIPE_LBL_NR_STATE_5__NR1_MASK  0x70
#define MPIPE_LBL_NR_STATE_5__NR1_FIELD 4,6

#define MPIPE_LBL_NR_STATE_5__NR2_SHIFT 8
#define MPIPE_LBL_NR_STATE_5__NR2_WIDTH 3
#define MPIPE_LBL_NR_STATE_5__NR2_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_5__NR2_RMASK 0x7
#define MPIPE_LBL_NR_STATE_5__NR2_MASK  0x700
#define MPIPE_LBL_NR_STATE_5__NR2_FIELD 8,10

#define MPIPE_LBL_NR_STATE_5__NR3_SHIFT 12
#define MPIPE_LBL_NR_STATE_5__NR3_WIDTH 3
#define MPIPE_LBL_NR_STATE_5__NR3_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_5__NR3_RMASK 0x7
#define MPIPE_LBL_NR_STATE_5__NR3_MASK  0x7000
#define MPIPE_LBL_NR_STATE_5__NR3_FIELD 12,14

#define MPIPE_LBL_NR_STATE_5__NR4_SHIFT 16
#define MPIPE_LBL_NR_STATE_5__NR4_WIDTH 3
#define MPIPE_LBL_NR_STATE_5__NR4_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_5__NR4_RMASK 0x7
#define MPIPE_LBL_NR_STATE_5__NR4_MASK  0x70000
#define MPIPE_LBL_NR_STATE_5__NR4_FIELD 16,18

#define MPIPE_LBL_NR_STATE_5__NR5_SHIFT 20
#define MPIPE_LBL_NR_STATE_5__NR5_WIDTH 3
#define MPIPE_LBL_NR_STATE_5__NR5_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_5__NR5_RMASK 0x7
#define MPIPE_LBL_NR_STATE_5__NR5_MASK  0x700000
#define MPIPE_LBL_NR_STATE_5__NR5_FIELD 20,22

#define MPIPE_LBL_NR_STATE_5__NR6_SHIFT 24
#define MPIPE_LBL_NR_STATE_5__NR6_WIDTH 3
#define MPIPE_LBL_NR_STATE_5__NR6_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_5__NR6_RMASK 0x7
#define MPIPE_LBL_NR_STATE_5__NR6_MASK  0x7000000
#define MPIPE_LBL_NR_STATE_5__NR6_FIELD 24,26

#define MPIPE_LBL_NR_STATE_5__NR7_SHIFT 28
#define MPIPE_LBL_NR_STATE_5__NR7_WIDTH 3
#define MPIPE_LBL_NR_STATE_5__NR7_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_5__NR7_RMASK 0x7
#define MPIPE_LBL_NR_STATE_5__NR7_MASK  0x70000000
#define MPIPE_LBL_NR_STATE_5__NR7_FIELD 28,30

#define MPIPE_LBL_NR_STATE_5__NR8_SHIFT 32
#define MPIPE_LBL_NR_STATE_5__NR8_WIDTH 3
#define MPIPE_LBL_NR_STATE_5__NR8_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_5__NR8_RMASK 0x7
#define MPIPE_LBL_NR_STATE_5__NR8_MASK  _64bit(0x700000000)
#define MPIPE_LBL_NR_STATE_5__NR8_FIELD 32,34

#define MPIPE_LBL_NR_STATE_5__NR9_SHIFT 36
#define MPIPE_LBL_NR_STATE_5__NR9_WIDTH 3
#define MPIPE_LBL_NR_STATE_5__NR9_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_5__NR9_RMASK 0x7
#define MPIPE_LBL_NR_STATE_5__NR9_MASK  _64bit(0x7000000000)
#define MPIPE_LBL_NR_STATE_5__NR9_FIELD 36,38

#define MPIPE_LBL_NR_STATE_5__NR10_SHIFT 40
#define MPIPE_LBL_NR_STATE_5__NR10_WIDTH 3
#define MPIPE_LBL_NR_STATE_5__NR10_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_5__NR10_RMASK 0x7
#define MPIPE_LBL_NR_STATE_5__NR10_MASK  _64bit(0x70000000000)
#define MPIPE_LBL_NR_STATE_5__NR10_FIELD 40,42

#define MPIPE_LBL_NR_STATE_5__NR11_SHIFT 44
#define MPIPE_LBL_NR_STATE_5__NR11_WIDTH 3
#define MPIPE_LBL_NR_STATE_5__NR11_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_5__NR11_RMASK 0x7
#define MPIPE_LBL_NR_STATE_5__NR11_MASK  _64bit(0x700000000000)
#define MPIPE_LBL_NR_STATE_5__NR11_FIELD 44,46

#define MPIPE_LBL_NR_STATE_5__NR12_SHIFT 48
#define MPIPE_LBL_NR_STATE_5__NR12_WIDTH 3
#define MPIPE_LBL_NR_STATE_5__NR12_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_5__NR12_RMASK 0x7
#define MPIPE_LBL_NR_STATE_5__NR12_MASK  _64bit(0x7000000000000)
#define MPIPE_LBL_NR_STATE_5__NR12_FIELD 48,50

#define MPIPE_LBL_NR_STATE_5__NR13_SHIFT 52
#define MPIPE_LBL_NR_STATE_5__NR13_WIDTH 3
#define MPIPE_LBL_NR_STATE_5__NR13_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_5__NR13_RMASK 0x7
#define MPIPE_LBL_NR_STATE_5__NR13_MASK  _64bit(0x70000000000000)
#define MPIPE_LBL_NR_STATE_5__NR13_FIELD 52,54

#define MPIPE_LBL_NR_STATE_5__NR14_SHIFT 56
#define MPIPE_LBL_NR_STATE_5__NR14_WIDTH 3
#define MPIPE_LBL_NR_STATE_5__NR14_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_5__NR14_RMASK 0x7
#define MPIPE_LBL_NR_STATE_5__NR14_MASK  _64bit(0x700000000000000)
#define MPIPE_LBL_NR_STATE_5__NR14_FIELD 56,58

#define MPIPE_LBL_NR_STATE_5__NR15_SHIFT 60
#define MPIPE_LBL_NR_STATE_5__NR15_WIDTH 3
#define MPIPE_LBL_NR_STATE_5__NR15_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_5__NR15_RMASK 0x7
#define MPIPE_LBL_NR_STATE_5__NR15_MASK  _64bit(0x7000000000000000)
#define MPIPE_LBL_NR_STATE_5__NR15_FIELD 60,62


/*
 * Load Balancer NotifRing State.
 * Provides fullness of each NotifRing.  There are 16 registers.  Each
 * register contains the state of 16 NotifRings.
 */
#define MPIPE_LBL_NR_STATE_6__FIRST_WORD 0x2168
#define MPIPE_LBL_NR_STATE_6__LAST_WORD 0x21e0

#define MPIPE_LBL_NR_STATE_6__NR0_SHIFT 0
#define MPIPE_LBL_NR_STATE_6__NR0_WIDTH 3
#define MPIPE_LBL_NR_STATE_6__NR0_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_6__NR0_RMASK 0x7
#define MPIPE_LBL_NR_STATE_6__NR0_MASK  0x7
#define MPIPE_LBL_NR_STATE_6__NR0_FIELD 0,2

#define MPIPE_LBL_NR_STATE_6__NR1_SHIFT 4
#define MPIPE_LBL_NR_STATE_6__NR1_WIDTH 3
#define MPIPE_LBL_NR_STATE_6__NR1_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_6__NR1_RMASK 0x7
#define MPIPE_LBL_NR_STATE_6__NR1_MASK  0x70
#define MPIPE_LBL_NR_STATE_6__NR1_FIELD 4,6

#define MPIPE_LBL_NR_STATE_6__NR2_SHIFT 8
#define MPIPE_LBL_NR_STATE_6__NR2_WIDTH 3
#define MPIPE_LBL_NR_STATE_6__NR2_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_6__NR2_RMASK 0x7
#define MPIPE_LBL_NR_STATE_6__NR2_MASK  0x700
#define MPIPE_LBL_NR_STATE_6__NR2_FIELD 8,10

#define MPIPE_LBL_NR_STATE_6__NR3_SHIFT 12
#define MPIPE_LBL_NR_STATE_6__NR3_WIDTH 3
#define MPIPE_LBL_NR_STATE_6__NR3_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_6__NR3_RMASK 0x7
#define MPIPE_LBL_NR_STATE_6__NR3_MASK  0x7000
#define MPIPE_LBL_NR_STATE_6__NR3_FIELD 12,14

#define MPIPE_LBL_NR_STATE_6__NR4_SHIFT 16
#define MPIPE_LBL_NR_STATE_6__NR4_WIDTH 3
#define MPIPE_LBL_NR_STATE_6__NR4_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_6__NR4_RMASK 0x7
#define MPIPE_LBL_NR_STATE_6__NR4_MASK  0x70000
#define MPIPE_LBL_NR_STATE_6__NR4_FIELD 16,18

#define MPIPE_LBL_NR_STATE_6__NR5_SHIFT 20
#define MPIPE_LBL_NR_STATE_6__NR5_WIDTH 3
#define MPIPE_LBL_NR_STATE_6__NR5_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_6__NR5_RMASK 0x7
#define MPIPE_LBL_NR_STATE_6__NR5_MASK  0x700000
#define MPIPE_LBL_NR_STATE_6__NR5_FIELD 20,22

#define MPIPE_LBL_NR_STATE_6__NR6_SHIFT 24
#define MPIPE_LBL_NR_STATE_6__NR6_WIDTH 3
#define MPIPE_LBL_NR_STATE_6__NR6_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_6__NR6_RMASK 0x7
#define MPIPE_LBL_NR_STATE_6__NR6_MASK  0x7000000
#define MPIPE_LBL_NR_STATE_6__NR6_FIELD 24,26

#define MPIPE_LBL_NR_STATE_6__NR7_SHIFT 28
#define MPIPE_LBL_NR_STATE_6__NR7_WIDTH 3
#define MPIPE_LBL_NR_STATE_6__NR7_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_6__NR7_RMASK 0x7
#define MPIPE_LBL_NR_STATE_6__NR7_MASK  0x70000000
#define MPIPE_LBL_NR_STATE_6__NR7_FIELD 28,30

#define MPIPE_LBL_NR_STATE_6__NR8_SHIFT 32
#define MPIPE_LBL_NR_STATE_6__NR8_WIDTH 3
#define MPIPE_LBL_NR_STATE_6__NR8_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_6__NR8_RMASK 0x7
#define MPIPE_LBL_NR_STATE_6__NR8_MASK  _64bit(0x700000000)
#define MPIPE_LBL_NR_STATE_6__NR8_FIELD 32,34

#define MPIPE_LBL_NR_STATE_6__NR9_SHIFT 36
#define MPIPE_LBL_NR_STATE_6__NR9_WIDTH 3
#define MPIPE_LBL_NR_STATE_6__NR9_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_6__NR9_RMASK 0x7
#define MPIPE_LBL_NR_STATE_6__NR9_MASK  _64bit(0x7000000000)
#define MPIPE_LBL_NR_STATE_6__NR9_FIELD 36,38

#define MPIPE_LBL_NR_STATE_6__NR10_SHIFT 40
#define MPIPE_LBL_NR_STATE_6__NR10_WIDTH 3
#define MPIPE_LBL_NR_STATE_6__NR10_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_6__NR10_RMASK 0x7
#define MPIPE_LBL_NR_STATE_6__NR10_MASK  _64bit(0x70000000000)
#define MPIPE_LBL_NR_STATE_6__NR10_FIELD 40,42

#define MPIPE_LBL_NR_STATE_6__NR11_SHIFT 44
#define MPIPE_LBL_NR_STATE_6__NR11_WIDTH 3
#define MPIPE_LBL_NR_STATE_6__NR11_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_6__NR11_RMASK 0x7
#define MPIPE_LBL_NR_STATE_6__NR11_MASK  _64bit(0x700000000000)
#define MPIPE_LBL_NR_STATE_6__NR11_FIELD 44,46

#define MPIPE_LBL_NR_STATE_6__NR12_SHIFT 48
#define MPIPE_LBL_NR_STATE_6__NR12_WIDTH 3
#define MPIPE_LBL_NR_STATE_6__NR12_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_6__NR12_RMASK 0x7
#define MPIPE_LBL_NR_STATE_6__NR12_MASK  _64bit(0x7000000000000)
#define MPIPE_LBL_NR_STATE_6__NR12_FIELD 48,50

#define MPIPE_LBL_NR_STATE_6__NR13_SHIFT 52
#define MPIPE_LBL_NR_STATE_6__NR13_WIDTH 3
#define MPIPE_LBL_NR_STATE_6__NR13_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_6__NR13_RMASK 0x7
#define MPIPE_LBL_NR_STATE_6__NR13_MASK  _64bit(0x70000000000000)
#define MPIPE_LBL_NR_STATE_6__NR13_FIELD 52,54

#define MPIPE_LBL_NR_STATE_6__NR14_SHIFT 56
#define MPIPE_LBL_NR_STATE_6__NR14_WIDTH 3
#define MPIPE_LBL_NR_STATE_6__NR14_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_6__NR14_RMASK 0x7
#define MPIPE_LBL_NR_STATE_6__NR14_MASK  _64bit(0x700000000000000)
#define MPIPE_LBL_NR_STATE_6__NR14_FIELD 56,58

#define MPIPE_LBL_NR_STATE_6__NR15_SHIFT 60
#define MPIPE_LBL_NR_STATE_6__NR15_WIDTH 3
#define MPIPE_LBL_NR_STATE_6__NR15_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_6__NR15_RMASK 0x7
#define MPIPE_LBL_NR_STATE_6__NR15_MASK  _64bit(0x7000000000000000)
#define MPIPE_LBL_NR_STATE_6__NR15_FIELD 60,62


/*
 * Load Balancer NotifRing State.
 * Provides fullness of each NotifRing.  There are 16 registers.  Each
 * register contains the state of 16 NotifRings.
 */
#define MPIPE_LBL_NR_STATE_7__FIRST_WORD 0x2170
#define MPIPE_LBL_NR_STATE_7__LAST_WORD 0x21e8

#define MPIPE_LBL_NR_STATE_7__NR0_SHIFT 0
#define MPIPE_LBL_NR_STATE_7__NR0_WIDTH 3
#define MPIPE_LBL_NR_STATE_7__NR0_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_7__NR0_RMASK 0x7
#define MPIPE_LBL_NR_STATE_7__NR0_MASK  0x7
#define MPIPE_LBL_NR_STATE_7__NR0_FIELD 0,2

#define MPIPE_LBL_NR_STATE_7__NR1_SHIFT 4
#define MPIPE_LBL_NR_STATE_7__NR1_WIDTH 3
#define MPIPE_LBL_NR_STATE_7__NR1_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_7__NR1_RMASK 0x7
#define MPIPE_LBL_NR_STATE_7__NR1_MASK  0x70
#define MPIPE_LBL_NR_STATE_7__NR1_FIELD 4,6

#define MPIPE_LBL_NR_STATE_7__NR2_SHIFT 8
#define MPIPE_LBL_NR_STATE_7__NR2_WIDTH 3
#define MPIPE_LBL_NR_STATE_7__NR2_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_7__NR2_RMASK 0x7
#define MPIPE_LBL_NR_STATE_7__NR2_MASK  0x700
#define MPIPE_LBL_NR_STATE_7__NR2_FIELD 8,10

#define MPIPE_LBL_NR_STATE_7__NR3_SHIFT 12
#define MPIPE_LBL_NR_STATE_7__NR3_WIDTH 3
#define MPIPE_LBL_NR_STATE_7__NR3_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_7__NR3_RMASK 0x7
#define MPIPE_LBL_NR_STATE_7__NR3_MASK  0x7000
#define MPIPE_LBL_NR_STATE_7__NR3_FIELD 12,14

#define MPIPE_LBL_NR_STATE_7__NR4_SHIFT 16
#define MPIPE_LBL_NR_STATE_7__NR4_WIDTH 3
#define MPIPE_LBL_NR_STATE_7__NR4_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_7__NR4_RMASK 0x7
#define MPIPE_LBL_NR_STATE_7__NR4_MASK  0x70000
#define MPIPE_LBL_NR_STATE_7__NR4_FIELD 16,18

#define MPIPE_LBL_NR_STATE_7__NR5_SHIFT 20
#define MPIPE_LBL_NR_STATE_7__NR5_WIDTH 3
#define MPIPE_LBL_NR_STATE_7__NR5_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_7__NR5_RMASK 0x7
#define MPIPE_LBL_NR_STATE_7__NR5_MASK  0x700000
#define MPIPE_LBL_NR_STATE_7__NR5_FIELD 20,22

#define MPIPE_LBL_NR_STATE_7__NR6_SHIFT 24
#define MPIPE_LBL_NR_STATE_7__NR6_WIDTH 3
#define MPIPE_LBL_NR_STATE_7__NR6_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_7__NR6_RMASK 0x7
#define MPIPE_LBL_NR_STATE_7__NR6_MASK  0x7000000
#define MPIPE_LBL_NR_STATE_7__NR6_FIELD 24,26

#define MPIPE_LBL_NR_STATE_7__NR7_SHIFT 28
#define MPIPE_LBL_NR_STATE_7__NR7_WIDTH 3
#define MPIPE_LBL_NR_STATE_7__NR7_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_7__NR7_RMASK 0x7
#define MPIPE_LBL_NR_STATE_7__NR7_MASK  0x70000000
#define MPIPE_LBL_NR_STATE_7__NR7_FIELD 28,30

#define MPIPE_LBL_NR_STATE_7__NR8_SHIFT 32
#define MPIPE_LBL_NR_STATE_7__NR8_WIDTH 3
#define MPIPE_LBL_NR_STATE_7__NR8_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_7__NR8_RMASK 0x7
#define MPIPE_LBL_NR_STATE_7__NR8_MASK  _64bit(0x700000000)
#define MPIPE_LBL_NR_STATE_7__NR8_FIELD 32,34

#define MPIPE_LBL_NR_STATE_7__NR9_SHIFT 36
#define MPIPE_LBL_NR_STATE_7__NR9_WIDTH 3
#define MPIPE_LBL_NR_STATE_7__NR9_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_7__NR9_RMASK 0x7
#define MPIPE_LBL_NR_STATE_7__NR9_MASK  _64bit(0x7000000000)
#define MPIPE_LBL_NR_STATE_7__NR9_FIELD 36,38

#define MPIPE_LBL_NR_STATE_7__NR10_SHIFT 40
#define MPIPE_LBL_NR_STATE_7__NR10_WIDTH 3
#define MPIPE_LBL_NR_STATE_7__NR10_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_7__NR10_RMASK 0x7
#define MPIPE_LBL_NR_STATE_7__NR10_MASK  _64bit(0x70000000000)
#define MPIPE_LBL_NR_STATE_7__NR10_FIELD 40,42

#define MPIPE_LBL_NR_STATE_7__NR11_SHIFT 44
#define MPIPE_LBL_NR_STATE_7__NR11_WIDTH 3
#define MPIPE_LBL_NR_STATE_7__NR11_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_7__NR11_RMASK 0x7
#define MPIPE_LBL_NR_STATE_7__NR11_MASK  _64bit(0x700000000000)
#define MPIPE_LBL_NR_STATE_7__NR11_FIELD 44,46

#define MPIPE_LBL_NR_STATE_7__NR12_SHIFT 48
#define MPIPE_LBL_NR_STATE_7__NR12_WIDTH 3
#define MPIPE_LBL_NR_STATE_7__NR12_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_7__NR12_RMASK 0x7
#define MPIPE_LBL_NR_STATE_7__NR12_MASK  _64bit(0x7000000000000)
#define MPIPE_LBL_NR_STATE_7__NR12_FIELD 48,50

#define MPIPE_LBL_NR_STATE_7__NR13_SHIFT 52
#define MPIPE_LBL_NR_STATE_7__NR13_WIDTH 3
#define MPIPE_LBL_NR_STATE_7__NR13_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_7__NR13_RMASK 0x7
#define MPIPE_LBL_NR_STATE_7__NR13_MASK  _64bit(0x70000000000000)
#define MPIPE_LBL_NR_STATE_7__NR13_FIELD 52,54

#define MPIPE_LBL_NR_STATE_7__NR14_SHIFT 56
#define MPIPE_LBL_NR_STATE_7__NR14_WIDTH 3
#define MPIPE_LBL_NR_STATE_7__NR14_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_7__NR14_RMASK 0x7
#define MPIPE_LBL_NR_STATE_7__NR14_MASK  _64bit(0x700000000000000)
#define MPIPE_LBL_NR_STATE_7__NR14_FIELD 56,58

#define MPIPE_LBL_NR_STATE_7__NR15_SHIFT 60
#define MPIPE_LBL_NR_STATE_7__NR15_WIDTH 3
#define MPIPE_LBL_NR_STATE_7__NR15_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_7__NR15_RMASK 0x7
#define MPIPE_LBL_NR_STATE_7__NR15_MASK  _64bit(0x7000000000000000)
#define MPIPE_LBL_NR_STATE_7__NR15_FIELD 60,62


/*
 * Load Balancer NotifRing State.
 * Provides fullness of each NotifRing.  There are 16 registers.  Each
 * register contains the state of 16 NotifRings.
 */
#define MPIPE_LBL_NR_STATE_8__FIRST_WORD 0x2178
#define MPIPE_LBL_NR_STATE_8__LAST_WORD 0x21f0

#define MPIPE_LBL_NR_STATE_8__NR0_SHIFT 0
#define MPIPE_LBL_NR_STATE_8__NR0_WIDTH 3
#define MPIPE_LBL_NR_STATE_8__NR0_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_8__NR0_RMASK 0x7
#define MPIPE_LBL_NR_STATE_8__NR0_MASK  0x7
#define MPIPE_LBL_NR_STATE_8__NR0_FIELD 0,2

#define MPIPE_LBL_NR_STATE_8__NR1_SHIFT 4
#define MPIPE_LBL_NR_STATE_8__NR1_WIDTH 3
#define MPIPE_LBL_NR_STATE_8__NR1_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_8__NR1_RMASK 0x7
#define MPIPE_LBL_NR_STATE_8__NR1_MASK  0x70
#define MPIPE_LBL_NR_STATE_8__NR1_FIELD 4,6

#define MPIPE_LBL_NR_STATE_8__NR2_SHIFT 8
#define MPIPE_LBL_NR_STATE_8__NR2_WIDTH 3
#define MPIPE_LBL_NR_STATE_8__NR2_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_8__NR2_RMASK 0x7
#define MPIPE_LBL_NR_STATE_8__NR2_MASK  0x700
#define MPIPE_LBL_NR_STATE_8__NR2_FIELD 8,10

#define MPIPE_LBL_NR_STATE_8__NR3_SHIFT 12
#define MPIPE_LBL_NR_STATE_8__NR3_WIDTH 3
#define MPIPE_LBL_NR_STATE_8__NR3_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_8__NR3_RMASK 0x7
#define MPIPE_LBL_NR_STATE_8__NR3_MASK  0x7000
#define MPIPE_LBL_NR_STATE_8__NR3_FIELD 12,14

#define MPIPE_LBL_NR_STATE_8__NR4_SHIFT 16
#define MPIPE_LBL_NR_STATE_8__NR4_WIDTH 3
#define MPIPE_LBL_NR_STATE_8__NR4_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_8__NR4_RMASK 0x7
#define MPIPE_LBL_NR_STATE_8__NR4_MASK  0x70000
#define MPIPE_LBL_NR_STATE_8__NR4_FIELD 16,18

#define MPIPE_LBL_NR_STATE_8__NR5_SHIFT 20
#define MPIPE_LBL_NR_STATE_8__NR5_WIDTH 3
#define MPIPE_LBL_NR_STATE_8__NR5_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_8__NR5_RMASK 0x7
#define MPIPE_LBL_NR_STATE_8__NR5_MASK  0x700000
#define MPIPE_LBL_NR_STATE_8__NR5_FIELD 20,22

#define MPIPE_LBL_NR_STATE_8__NR6_SHIFT 24
#define MPIPE_LBL_NR_STATE_8__NR6_WIDTH 3
#define MPIPE_LBL_NR_STATE_8__NR6_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_8__NR6_RMASK 0x7
#define MPIPE_LBL_NR_STATE_8__NR6_MASK  0x7000000
#define MPIPE_LBL_NR_STATE_8__NR6_FIELD 24,26

#define MPIPE_LBL_NR_STATE_8__NR7_SHIFT 28
#define MPIPE_LBL_NR_STATE_8__NR7_WIDTH 3
#define MPIPE_LBL_NR_STATE_8__NR7_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_8__NR7_RMASK 0x7
#define MPIPE_LBL_NR_STATE_8__NR7_MASK  0x70000000
#define MPIPE_LBL_NR_STATE_8__NR7_FIELD 28,30

#define MPIPE_LBL_NR_STATE_8__NR8_SHIFT 32
#define MPIPE_LBL_NR_STATE_8__NR8_WIDTH 3
#define MPIPE_LBL_NR_STATE_8__NR8_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_8__NR8_RMASK 0x7
#define MPIPE_LBL_NR_STATE_8__NR8_MASK  _64bit(0x700000000)
#define MPIPE_LBL_NR_STATE_8__NR8_FIELD 32,34

#define MPIPE_LBL_NR_STATE_8__NR9_SHIFT 36
#define MPIPE_LBL_NR_STATE_8__NR9_WIDTH 3
#define MPIPE_LBL_NR_STATE_8__NR9_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_8__NR9_RMASK 0x7
#define MPIPE_LBL_NR_STATE_8__NR9_MASK  _64bit(0x7000000000)
#define MPIPE_LBL_NR_STATE_8__NR9_FIELD 36,38

#define MPIPE_LBL_NR_STATE_8__NR10_SHIFT 40
#define MPIPE_LBL_NR_STATE_8__NR10_WIDTH 3
#define MPIPE_LBL_NR_STATE_8__NR10_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_8__NR10_RMASK 0x7
#define MPIPE_LBL_NR_STATE_8__NR10_MASK  _64bit(0x70000000000)
#define MPIPE_LBL_NR_STATE_8__NR10_FIELD 40,42

#define MPIPE_LBL_NR_STATE_8__NR11_SHIFT 44
#define MPIPE_LBL_NR_STATE_8__NR11_WIDTH 3
#define MPIPE_LBL_NR_STATE_8__NR11_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_8__NR11_RMASK 0x7
#define MPIPE_LBL_NR_STATE_8__NR11_MASK  _64bit(0x700000000000)
#define MPIPE_LBL_NR_STATE_8__NR11_FIELD 44,46

#define MPIPE_LBL_NR_STATE_8__NR12_SHIFT 48
#define MPIPE_LBL_NR_STATE_8__NR12_WIDTH 3
#define MPIPE_LBL_NR_STATE_8__NR12_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_8__NR12_RMASK 0x7
#define MPIPE_LBL_NR_STATE_8__NR12_MASK  _64bit(0x7000000000000)
#define MPIPE_LBL_NR_STATE_8__NR12_FIELD 48,50

#define MPIPE_LBL_NR_STATE_8__NR13_SHIFT 52
#define MPIPE_LBL_NR_STATE_8__NR13_WIDTH 3
#define MPIPE_LBL_NR_STATE_8__NR13_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_8__NR13_RMASK 0x7
#define MPIPE_LBL_NR_STATE_8__NR13_MASK  _64bit(0x70000000000000)
#define MPIPE_LBL_NR_STATE_8__NR13_FIELD 52,54

#define MPIPE_LBL_NR_STATE_8__NR14_SHIFT 56
#define MPIPE_LBL_NR_STATE_8__NR14_WIDTH 3
#define MPIPE_LBL_NR_STATE_8__NR14_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_8__NR14_RMASK 0x7
#define MPIPE_LBL_NR_STATE_8__NR14_MASK  _64bit(0x700000000000000)
#define MPIPE_LBL_NR_STATE_8__NR14_FIELD 56,58

#define MPIPE_LBL_NR_STATE_8__NR15_SHIFT 60
#define MPIPE_LBL_NR_STATE_8__NR15_WIDTH 3
#define MPIPE_LBL_NR_STATE_8__NR15_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_8__NR15_RMASK 0x7
#define MPIPE_LBL_NR_STATE_8__NR15_MASK  _64bit(0x7000000000000000)
#define MPIPE_LBL_NR_STATE_8__NR15_FIELD 60,62


/*
 * Load Balancer NotifRing State.
 * Provides fullness of each NotifRing.  There are 16 registers.  Each
 * register contains the state of 16 NotifRings.
 */
#define MPIPE_LBL_NR_STATE_9__FIRST_WORD 0x2180
#define MPIPE_LBL_NR_STATE_9__LAST_WORD 0x21f8

#define MPIPE_LBL_NR_STATE_9__NR0_SHIFT 0
#define MPIPE_LBL_NR_STATE_9__NR0_WIDTH 3
#define MPIPE_LBL_NR_STATE_9__NR0_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_9__NR0_RMASK 0x7
#define MPIPE_LBL_NR_STATE_9__NR0_MASK  0x7
#define MPIPE_LBL_NR_STATE_9__NR0_FIELD 0,2

#define MPIPE_LBL_NR_STATE_9__NR1_SHIFT 4
#define MPIPE_LBL_NR_STATE_9__NR1_WIDTH 3
#define MPIPE_LBL_NR_STATE_9__NR1_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_9__NR1_RMASK 0x7
#define MPIPE_LBL_NR_STATE_9__NR1_MASK  0x70
#define MPIPE_LBL_NR_STATE_9__NR1_FIELD 4,6

#define MPIPE_LBL_NR_STATE_9__NR2_SHIFT 8
#define MPIPE_LBL_NR_STATE_9__NR2_WIDTH 3
#define MPIPE_LBL_NR_STATE_9__NR2_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_9__NR2_RMASK 0x7
#define MPIPE_LBL_NR_STATE_9__NR2_MASK  0x700
#define MPIPE_LBL_NR_STATE_9__NR2_FIELD 8,10

#define MPIPE_LBL_NR_STATE_9__NR3_SHIFT 12
#define MPIPE_LBL_NR_STATE_9__NR3_WIDTH 3
#define MPIPE_LBL_NR_STATE_9__NR3_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_9__NR3_RMASK 0x7
#define MPIPE_LBL_NR_STATE_9__NR3_MASK  0x7000
#define MPIPE_LBL_NR_STATE_9__NR3_FIELD 12,14

#define MPIPE_LBL_NR_STATE_9__NR4_SHIFT 16
#define MPIPE_LBL_NR_STATE_9__NR4_WIDTH 3
#define MPIPE_LBL_NR_STATE_9__NR4_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_9__NR4_RMASK 0x7
#define MPIPE_LBL_NR_STATE_9__NR4_MASK  0x70000
#define MPIPE_LBL_NR_STATE_9__NR4_FIELD 16,18

#define MPIPE_LBL_NR_STATE_9__NR5_SHIFT 20
#define MPIPE_LBL_NR_STATE_9__NR5_WIDTH 3
#define MPIPE_LBL_NR_STATE_9__NR5_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_9__NR5_RMASK 0x7
#define MPIPE_LBL_NR_STATE_9__NR5_MASK  0x700000
#define MPIPE_LBL_NR_STATE_9__NR5_FIELD 20,22

#define MPIPE_LBL_NR_STATE_9__NR6_SHIFT 24
#define MPIPE_LBL_NR_STATE_9__NR6_WIDTH 3
#define MPIPE_LBL_NR_STATE_9__NR6_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_9__NR6_RMASK 0x7
#define MPIPE_LBL_NR_STATE_9__NR6_MASK  0x7000000
#define MPIPE_LBL_NR_STATE_9__NR6_FIELD 24,26

#define MPIPE_LBL_NR_STATE_9__NR7_SHIFT 28
#define MPIPE_LBL_NR_STATE_9__NR7_WIDTH 3
#define MPIPE_LBL_NR_STATE_9__NR7_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_9__NR7_RMASK 0x7
#define MPIPE_LBL_NR_STATE_9__NR7_MASK  0x70000000
#define MPIPE_LBL_NR_STATE_9__NR7_FIELD 28,30

#define MPIPE_LBL_NR_STATE_9__NR8_SHIFT 32
#define MPIPE_LBL_NR_STATE_9__NR8_WIDTH 3
#define MPIPE_LBL_NR_STATE_9__NR8_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_9__NR8_RMASK 0x7
#define MPIPE_LBL_NR_STATE_9__NR8_MASK  _64bit(0x700000000)
#define MPIPE_LBL_NR_STATE_9__NR8_FIELD 32,34

#define MPIPE_LBL_NR_STATE_9__NR9_SHIFT 36
#define MPIPE_LBL_NR_STATE_9__NR9_WIDTH 3
#define MPIPE_LBL_NR_STATE_9__NR9_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_9__NR9_RMASK 0x7
#define MPIPE_LBL_NR_STATE_9__NR9_MASK  _64bit(0x7000000000)
#define MPIPE_LBL_NR_STATE_9__NR9_FIELD 36,38

#define MPIPE_LBL_NR_STATE_9__NR10_SHIFT 40
#define MPIPE_LBL_NR_STATE_9__NR10_WIDTH 3
#define MPIPE_LBL_NR_STATE_9__NR10_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_9__NR10_RMASK 0x7
#define MPIPE_LBL_NR_STATE_9__NR10_MASK  _64bit(0x70000000000)
#define MPIPE_LBL_NR_STATE_9__NR10_FIELD 40,42

#define MPIPE_LBL_NR_STATE_9__NR11_SHIFT 44
#define MPIPE_LBL_NR_STATE_9__NR11_WIDTH 3
#define MPIPE_LBL_NR_STATE_9__NR11_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_9__NR11_RMASK 0x7
#define MPIPE_LBL_NR_STATE_9__NR11_MASK  _64bit(0x700000000000)
#define MPIPE_LBL_NR_STATE_9__NR11_FIELD 44,46

#define MPIPE_LBL_NR_STATE_9__NR12_SHIFT 48
#define MPIPE_LBL_NR_STATE_9__NR12_WIDTH 3
#define MPIPE_LBL_NR_STATE_9__NR12_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_9__NR12_RMASK 0x7
#define MPIPE_LBL_NR_STATE_9__NR12_MASK  _64bit(0x7000000000000)
#define MPIPE_LBL_NR_STATE_9__NR12_FIELD 48,50

#define MPIPE_LBL_NR_STATE_9__NR13_SHIFT 52
#define MPIPE_LBL_NR_STATE_9__NR13_WIDTH 3
#define MPIPE_LBL_NR_STATE_9__NR13_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_9__NR13_RMASK 0x7
#define MPIPE_LBL_NR_STATE_9__NR13_MASK  _64bit(0x70000000000000)
#define MPIPE_LBL_NR_STATE_9__NR13_FIELD 52,54

#define MPIPE_LBL_NR_STATE_9__NR14_SHIFT 56
#define MPIPE_LBL_NR_STATE_9__NR14_WIDTH 3
#define MPIPE_LBL_NR_STATE_9__NR14_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_9__NR14_RMASK 0x7
#define MPIPE_LBL_NR_STATE_9__NR14_MASK  _64bit(0x700000000000000)
#define MPIPE_LBL_NR_STATE_9__NR14_FIELD 56,58

#define MPIPE_LBL_NR_STATE_9__NR15_SHIFT 60
#define MPIPE_LBL_NR_STATE_9__NR15_WIDTH 3
#define MPIPE_LBL_NR_STATE_9__NR15_RESET_VAL 0
#define MPIPE_LBL_NR_STATE_9__NR15_RMASK 0x7
#define MPIPE_LBL_NR_STATE_9__NR15_MASK  _64bit(0x7000000000000000)
#define MPIPE_LBL_NR_STATE_9__NR15_FIELD 60,62


/*
 * Load Balancer Quantization Thresholds.
 * Thresholds for fullness quantization when performing load balancing.
 * Packets are load balanced based on fullness of each notification ring
 * (Tail-Head).  These 7 programmable thresholds provide 8 quantized
 * "fullness" indicators.  The load balancer will prefer the least-full
 * notification rings and will choose round-robin between notification rings
 * at the same fullness quantization level.  These thresholds must be
 * programmed with ascending values (THRESH0 must be less than or equal to
 * THRESH1 and so on).
 *
 * Once the number of descriptors in a ring reaches THRESH6, it will not
 * receive any more packets.  The threshold is automatically masked based on
 * the ring size such that only the low-N bits are considered when comparing
 * head and tail pointers in a ring of size 2^N.  Care must be taken to
 * insure that the thresholds are ascending when masked base on all active
 * RingSizes in the system.  The reset values of the thresholds provide an
 * example of correctly programmed thresholds for all possible ring sizes.
 *
 * Based on masking, the resulting default thresholds for each ring size are:
 *
 * <br><table border="1" cellspacing="2" cellpadding="4">
 * <tr><th> <th>SIZE=128<th>SIZE=512<th>SIZE=2048<th>SIZE=65536</tr>
 * <tr><td><b>Level-6 (full)<td>126<td>510<td>2046<td>65534</tr>
 * <tr><td><b>Level-5<td>51<td>179<td>691<td>12979</tr>
 * <tr><td><b>Level-4<td>21<td>21<td>21<td>2069</tr>
 * <tr><td><b>Level-3<td>9<td>9<td>9<td>9</tr>
 * <tr><td><b>Level-2<td>4<td>4<td>4<td>4</tr>
 * <tr><td><b>Level-1<td>2<td>2<td>2<td>2</tr>
 * <tr><td><b>Level-0<td>1<td>1<td>1<td>1</tr>
 * </table><br>
 *
 * These thresholds must be programmed prior to initializing the NotifRing
 * table.
 */
#define MPIPE_LBL_QUANT_THRESH0 0x2110

#define MPIPE_LBL_QUANT_THRESH0__THRESH0_SHIFT 0
#define MPIPE_LBL_QUANT_THRESH0__THRESH0_WIDTH 16
#define MPIPE_LBL_QUANT_THRESH0__THRESH0_RESET_VAL 1
#define MPIPE_LBL_QUANT_THRESH0__THRESH0_RMASK 0xffff
#define MPIPE_LBL_QUANT_THRESH0__THRESH0_MASK  0xffff
#define MPIPE_LBL_QUANT_THRESH0__THRESH0_FIELD 0,15

#define MPIPE_LBL_QUANT_THRESH0__THRESH1_SHIFT 16
#define MPIPE_LBL_QUANT_THRESH0__THRESH1_WIDTH 16
#define MPIPE_LBL_QUANT_THRESH0__THRESH1_RESET_VAL 2
#define MPIPE_LBL_QUANT_THRESH0__THRESH1_RMASK 0xffff
#define MPIPE_LBL_QUANT_THRESH0__THRESH1_MASK  0xffff0000
#define MPIPE_LBL_QUANT_THRESH0__THRESH1_FIELD 16,31

#define MPIPE_LBL_QUANT_THRESH0__THRESH2_SHIFT 32
#define MPIPE_LBL_QUANT_THRESH0__THRESH2_WIDTH 16
#define MPIPE_LBL_QUANT_THRESH0__THRESH2_RESET_VAL 4
#define MPIPE_LBL_QUANT_THRESH0__THRESH2_RMASK 0xffff
#define MPIPE_LBL_QUANT_THRESH0__THRESH2_MASK  _64bit(0xffff00000000)
#define MPIPE_LBL_QUANT_THRESH0__THRESH2_FIELD 32,47

#define MPIPE_LBL_QUANT_THRESH0__THRESH3_SHIFT 48
#define MPIPE_LBL_QUANT_THRESH0__THRESH3_WIDTH 16
#define MPIPE_LBL_QUANT_THRESH0__THRESH3_RESET_VAL 9
#define MPIPE_LBL_QUANT_THRESH0__THRESH3_RMASK 0xffff
#define MPIPE_LBL_QUANT_THRESH0__THRESH3_MASK  _64bit(0xffff000000000000)
#define MPIPE_LBL_QUANT_THRESH0__THRESH3_FIELD 48,63


/*
 * Load Balancer Quantization Thresholds.
 * Upper-3 programmable thresholds.  (See LBL_QUANT_THRESH0)
 */
#define MPIPE_LBL_QUANT_THRESH1 0x2118

#define MPIPE_LBL_QUANT_THRESH1__THRESH4_SHIFT 0
#define MPIPE_LBL_QUANT_THRESH1__THRESH4_WIDTH 16
#define MPIPE_LBL_QUANT_THRESH1__THRESH4_RESET_VAL 2069
#define MPIPE_LBL_QUANT_THRESH1__THRESH4_RMASK 0xffff
#define MPIPE_LBL_QUANT_THRESH1__THRESH4_MASK  0xffff
#define MPIPE_LBL_QUANT_THRESH1__THRESH4_FIELD 0,15

#define MPIPE_LBL_QUANT_THRESH1__THRESH5_SHIFT 16
#define MPIPE_LBL_QUANT_THRESH1__THRESH5_WIDTH 16
#define MPIPE_LBL_QUANT_THRESH1__THRESH5_RESET_VAL 12979
#define MPIPE_LBL_QUANT_THRESH1__THRESH5_RMASK 0xffff
#define MPIPE_LBL_QUANT_THRESH1__THRESH5_MASK  0xffff0000
#define MPIPE_LBL_QUANT_THRESH1__THRESH5_FIELD 16,31

#define MPIPE_LBL_QUANT_THRESH1__THRESH6_SHIFT 32
#define MPIPE_LBL_QUANT_THRESH1__THRESH6_WIDTH 16
#define MPIPE_LBL_QUANT_THRESH1__THRESH6_RESET_VAL 65534
#define MPIPE_LBL_QUANT_THRESH1__THRESH6_RMASK 0xffff
#define MPIPE_LBL_QUANT_THRESH1__THRESH6_MASK  _64bit(0xffff00000000)
#define MPIPE_LBL_QUANT_THRESH1__THRESH6_FIELD 32,47


/*
 * Load Balancer Stats Counter.
 * Provides count of event selected by LBL_CTL.CTR_SEL with read-to-clear
 * functionality.
 */
#define MPIPE_LBL_STAT_CTR 0x2128

#define MPIPE_LBL_STAT_CTR__VAL_SHIFT 0
#define MPIPE_LBL_STAT_CTR__VAL_WIDTH 32
#define MPIPE_LBL_STAT_CTR__VAL_RESET_VAL 0
#define MPIPE_LBL_STAT_CTR__VAL_RMASK 0xffffffff
#define MPIPE_LBL_STAT_CTR__VAL_MASK  0xffffffff
#define MPIPE_LBL_STAT_CTR__VAL_FIELD 0,31


/*
 * Load Balancer Stats Counter.
 * Provides count of event selected by LBL_CTL.CTR_SEL
 */
#define MPIPE_LBL_STAT_CTR_RD 0x2130

#define MPIPE_LBL_STAT_CTR_RD__VAL_SHIFT 0
#define MPIPE_LBL_STAT_CTR_RD__VAL_WIDTH 32
#define MPIPE_LBL_STAT_CTR_RD__VAL_RESET_VAL 0
#define MPIPE_LBL_STAT_CTR_RD__VAL_RMASK 0xffffffff
#define MPIPE_LBL_STAT_CTR_RD__VAL_MASK  0xffffffff
#define MPIPE_LBL_STAT_CTR_RD__VAL_FIELD 0,31


/*
 * Loopback Map.
 * Indicates which channels are used for loopback.
 */
#define MPIPE_LOOPBACK_MAP 0x0800

#define MPIPE_LOOPBACK_MAP__CHANNELS_SHIFT 0
#define MPIPE_LOOPBACK_MAP__CHANNELS_WIDTH 32
#define MPIPE_LOOPBACK_MAP__CHANNELS_RESET_VAL 4026531840
#define MPIPE_LOOPBACK_MAP__CHANNELS_RMASK 0xffffffff
#define MPIPE_LOOPBACK_MAP__CHANNELS_MASK  0xffffffff
#define MPIPE_LOOPBACK_MAP__CHANNELS_FIELD 0,31


/*
 * MAC Map.
 * This register provides the channel mapping for SGMII Port 0.
 */
#define MPIPE_MAC0_MAP 0x0700

#define MPIPE_MAC0_MAP__CHANNELS_SHIFT 0
#define MPIPE_MAC0_MAP__CHANNELS_WIDTH 32
#define MPIPE_MAC0_MAP__CHANNELS_RESET_VAL 1
#define MPIPE_MAC0_MAP__CHANNELS_RMASK 0xffffffff
#define MPIPE_MAC0_MAP__CHANNELS_MASK  0xffffffff
#define MPIPE_MAC0_MAP__CHANNELS_FIELD 0,31


/*
 * MAC Map.
 * This register provides the channel mapping for SGMII Port 8.
 */
#define MPIPE_MAC10_MAP 0x0750

#define MPIPE_MAC10_MAP__CHANNELS_SHIFT 0
#define MPIPE_MAC10_MAP__CHANNELS_WIDTH 32
#define MPIPE_MAC10_MAP__CHANNELS_RESET_VAL 256
#define MPIPE_MAC10_MAP__CHANNELS_RMASK 0xffffffff
#define MPIPE_MAC10_MAP__CHANNELS_MASK  0xffffffff
#define MPIPE_MAC10_MAP__CHANNELS_FIELD 0,31


/*
 * MAC Map.
 * This register provides the channel mapping for SGMII Port 9.
 */
#define MPIPE_MAC11_MAP 0x0758

#define MPIPE_MAC11_MAP__CHANNELS_SHIFT 0
#define MPIPE_MAC11_MAP__CHANNELS_WIDTH 32
#define MPIPE_MAC11_MAP__CHANNELS_RESET_VAL 512
#define MPIPE_MAC11_MAP__CHANNELS_RMASK 0xffffffff
#define MPIPE_MAC11_MAP__CHANNELS_MASK  0xffffffff
#define MPIPE_MAC11_MAP__CHANNELS_FIELD 0,31


/*
 * MAC Map.
 * This register provides the channel mapping for SGMII Port 10.
 */
#define MPIPE_MAC12_MAP 0x0760

#define MPIPE_MAC12_MAP__CHANNELS_SHIFT 0
#define MPIPE_MAC12_MAP__CHANNELS_WIDTH 32
#define MPIPE_MAC12_MAP__CHANNELS_RESET_VAL 1024
#define MPIPE_MAC12_MAP__CHANNELS_RMASK 0xffffffff
#define MPIPE_MAC12_MAP__CHANNELS_MASK  0xffffffff
#define MPIPE_MAC12_MAP__CHANNELS_FIELD 0,31


/*
 * MAC Map.
 * This register provides the channel mapping for SGMII Port 11.
 */
#define MPIPE_MAC13_MAP 0x0768

#define MPIPE_MAC13_MAP__CHANNELS_SHIFT 0
#define MPIPE_MAC13_MAP__CHANNELS_WIDTH 32
#define MPIPE_MAC13_MAP__CHANNELS_RESET_VAL 2048
#define MPIPE_MAC13_MAP__CHANNELS_RMASK 0xffffffff
#define MPIPE_MAC13_MAP__CHANNELS_MASK  0xffffffff
#define MPIPE_MAC13_MAP__CHANNELS_FIELD 0,31


/*
 * MAC Map.
 * This register provides the channel mapping for XAUI Port 2.
 */
#define MPIPE_MAC14_MAP 0x0770

#define MPIPE_MAC14_MAP__CHANNELS_SHIFT 0
#define MPIPE_MAC14_MAP__CHANNELS_WIDTH 32
#define MPIPE_MAC14_MAP__CHANNELS_RESET_VAL 256
#define MPIPE_MAC14_MAP__CHANNELS_RMASK 0xffffffff
#define MPIPE_MAC14_MAP__CHANNELS_MASK  0xffffffff
#define MPIPE_MAC14_MAP__CHANNELS_FIELD 0,31


/*
 * MAC Map.
 * This register provides the channel mapping for SGMII Port 12.
 */
#define MPIPE_MAC15_MAP 0x0778

#define MPIPE_MAC15_MAP__CHANNELS_SHIFT 0
#define MPIPE_MAC15_MAP__CHANNELS_WIDTH 32
#define MPIPE_MAC15_MAP__CHANNELS_RESET_VAL 4096
#define MPIPE_MAC15_MAP__CHANNELS_RMASK 0xffffffff
#define MPIPE_MAC15_MAP__CHANNELS_MASK  0xffffffff
#define MPIPE_MAC15_MAP__CHANNELS_FIELD 0,31


/*
 * MAC Map.
 * This register provides the channel mapping for SGMII Port 13.
 */
#define MPIPE_MAC16_MAP 0x0780

#define MPIPE_MAC16_MAP__CHANNELS_SHIFT 0
#define MPIPE_MAC16_MAP__CHANNELS_WIDTH 32
#define MPIPE_MAC16_MAP__CHANNELS_RESET_VAL 8192
#define MPIPE_MAC16_MAP__CHANNELS_RMASK 0xffffffff
#define MPIPE_MAC16_MAP__CHANNELS_MASK  0xffffffff
#define MPIPE_MAC16_MAP__CHANNELS_FIELD 0,31


/*
 * MAC Map.
 * This register provides the channel mapping for SGMII Port 14.
 */
#define MPIPE_MAC17_MAP 0x0788

#define MPIPE_MAC17_MAP__CHANNELS_SHIFT 0
#define MPIPE_MAC17_MAP__CHANNELS_WIDTH 32
#define MPIPE_MAC17_MAP__CHANNELS_RESET_VAL 16384
#define MPIPE_MAC17_MAP__CHANNELS_RMASK 0xffffffff
#define MPIPE_MAC17_MAP__CHANNELS_MASK  0xffffffff
#define MPIPE_MAC17_MAP__CHANNELS_FIELD 0,31


/*
 * MAC Map.
 * This register provides the channel mapping for SGMII Port 15.
 */
#define MPIPE_MAC18_MAP 0x0790

#define MPIPE_MAC18_MAP__CHANNELS_SHIFT 0
#define MPIPE_MAC18_MAP__CHANNELS_WIDTH 32
#define MPIPE_MAC18_MAP__CHANNELS_RESET_VAL 32768
#define MPIPE_MAC18_MAP__CHANNELS_RMASK 0xffffffff
#define MPIPE_MAC18_MAP__CHANNELS_MASK  0xffffffff
#define MPIPE_MAC18_MAP__CHANNELS_FIELD 0,31


/*
 * MAC Map.
 * This register provides the channel mapping for XAUI Port 3.
 */
#define MPIPE_MAC19_MAP 0x0798

#define MPIPE_MAC19_MAP__CHANNELS_SHIFT 0
#define MPIPE_MAC19_MAP__CHANNELS_WIDTH 32
#define MPIPE_MAC19_MAP__CHANNELS_RESET_VAL 4096
#define MPIPE_MAC19_MAP__CHANNELS_RMASK 0xffffffff
#define MPIPE_MAC19_MAP__CHANNELS_MASK  0xffffffff
#define MPIPE_MAC19_MAP__CHANNELS_FIELD 0,31


/*
 * MAC Map.
 * This register provides the channel mapping for SGMII Port 1.
 */
#define MPIPE_MAC1_MAP 0x0708

#define MPIPE_MAC1_MAP__CHANNELS_SHIFT 0
#define MPIPE_MAC1_MAP__CHANNELS_WIDTH 32
#define MPIPE_MAC1_MAP__CHANNELS_RESET_VAL 2
#define MPIPE_MAC1_MAP__CHANNELS_RMASK 0xffffffff
#define MPIPE_MAC1_MAP__CHANNELS_MASK  0xffffffff
#define MPIPE_MAC1_MAP__CHANNELS_FIELD 0,31


/*
 * MAC Map.
 * This register provides the channel mapping for SGMII Port 2.
 */
#define MPIPE_MAC2_MAP 0x0710

#define MPIPE_MAC2_MAP__CHANNELS_SHIFT 0
#define MPIPE_MAC2_MAP__CHANNELS_WIDTH 32
#define MPIPE_MAC2_MAP__CHANNELS_RESET_VAL 4
#define MPIPE_MAC2_MAP__CHANNELS_RMASK 0xffffffff
#define MPIPE_MAC2_MAP__CHANNELS_MASK  0xffffffff
#define MPIPE_MAC2_MAP__CHANNELS_FIELD 0,31


/*
 * MAC Map.
 * This register provides the channel mapping for SGMII Port 3.
 */
#define MPIPE_MAC3_MAP 0x0718

#define MPIPE_MAC3_MAP__CHANNELS_SHIFT 0
#define MPIPE_MAC3_MAP__CHANNELS_WIDTH 32
#define MPIPE_MAC3_MAP__CHANNELS_RESET_VAL 8
#define MPIPE_MAC3_MAP__CHANNELS_RMASK 0xffffffff
#define MPIPE_MAC3_MAP__CHANNELS_MASK  0xffffffff
#define MPIPE_MAC3_MAP__CHANNELS_FIELD 0,31


/*
 * MAC Map.
 * This register provides the channel mapping for XAUI Port 0.
 */
#define MPIPE_MAC4_MAP 0x0720

#define MPIPE_MAC4_MAP__CHANNELS_SHIFT 0
#define MPIPE_MAC4_MAP__CHANNELS_WIDTH 32
#define MPIPE_MAC4_MAP__CHANNELS_RESET_VAL 1
#define MPIPE_MAC4_MAP__CHANNELS_RMASK 0xffffffff
#define MPIPE_MAC4_MAP__CHANNELS_MASK  0xffffffff
#define MPIPE_MAC4_MAP__CHANNELS_FIELD 0,31


/*
 * MAC Map.
 * This register provides the channel mapping for SGMII Port 4.
 */
#define MPIPE_MAC5_MAP 0x0728

#define MPIPE_MAC5_MAP__CHANNELS_SHIFT 0
#define MPIPE_MAC5_MAP__CHANNELS_WIDTH 32
#define MPIPE_MAC5_MAP__CHANNELS_RESET_VAL 16
#define MPIPE_MAC5_MAP__CHANNELS_RMASK 0xffffffff
#define MPIPE_MAC5_MAP__CHANNELS_MASK  0xffffffff
#define MPIPE_MAC5_MAP__CHANNELS_FIELD 0,31


/*
 * MAC Map.
 * This register provides the channel mapping for SGMII Port 5.
 */
#define MPIPE_MAC6_MAP 0x0730

#define MPIPE_MAC6_MAP__CHANNELS_SHIFT 0
#define MPIPE_MAC6_MAP__CHANNELS_WIDTH 32
#define MPIPE_MAC6_MAP__CHANNELS_RESET_VAL 32
#define MPIPE_MAC6_MAP__CHANNELS_RMASK 0xffffffff
#define MPIPE_MAC6_MAP__CHANNELS_MASK  0xffffffff
#define MPIPE_MAC6_MAP__CHANNELS_FIELD 0,31


/*
 * MAC Map.
 * This register provides the channel mapping for SGMII Port 6.
 */
#define MPIPE_MAC7_MAP 0x0738

#define MPIPE_MAC7_MAP__CHANNELS_SHIFT 0
#define MPIPE_MAC7_MAP__CHANNELS_WIDTH 32
#define MPIPE_MAC7_MAP__CHANNELS_RESET_VAL 64
#define MPIPE_MAC7_MAP__CHANNELS_RMASK 0xffffffff
#define MPIPE_MAC7_MAP__CHANNELS_MASK  0xffffffff
#define MPIPE_MAC7_MAP__CHANNELS_FIELD 0,31


/*
 * MAC Map.
 * This register provides the channel mapping for SGMII Port 7.
 */
#define MPIPE_MAC8_MAP 0x0740

#define MPIPE_MAC8_MAP__CHANNELS_SHIFT 0
#define MPIPE_MAC8_MAP__CHANNELS_WIDTH 32
#define MPIPE_MAC8_MAP__CHANNELS_RESET_VAL 128
#define MPIPE_MAC8_MAP__CHANNELS_RMASK 0xffffffff
#define MPIPE_MAC8_MAP__CHANNELS_MASK  0xffffffff
#define MPIPE_MAC8_MAP__CHANNELS_FIELD 0,31


/*
 * MAC Map.
 * This register provides the channel mapping for XAUI Port 1.
 */
#define MPIPE_MAC9_MAP 0x0748

#define MPIPE_MAC9_MAP__CHANNELS_SHIFT 0
#define MPIPE_MAC9_MAP__CHANNELS_WIDTH 32
#define MPIPE_MAC9_MAP__CHANNELS_RESET_VAL 16
#define MPIPE_MAC9_MAP__CHANNELS_RMASK 0xffffffff
#define MPIPE_MAC9_MAP__CHANNELS_MASK  0xffffffff
#define MPIPE_MAC9_MAP__CHANNELS_FIELD 0,31


/*
 * MAC Enable.
 * Indicates which MACs are enabled.  The system configuration may impose
 * limits on which MACs may be simultaneously enabled.  Violating these
 * constraints will cause unpredictable behavior.  See datasheet for legal
 * MAC combinations.
 */
#define MPIPE_MAC_ENABLE 0x0808

#define MPIPE_MAC_ENABLE__ENA_SHIFT 0
#define MPIPE_MAC_ENABLE__ENA_WIDTH 32
#define MPIPE_MAC_ENABLE__ENA_RESET_VAL 0
#define MPIPE_MAC_ENABLE__ENA_RMASK 0xffffffff
#define MPIPE_MAC_ENABLE__ENA_MASK  0xffffffff
#define MPIPE_MAC_ENABLE__ENA_FIELD 0,31

#define MPIPE_MAC_ENABLE__AVAIL_SHIFT 32
#define MPIPE_MAC_ENABLE__AVAIL_WIDTH 32
#define MPIPE_MAC_ENABLE__AVAIL_RESET_VAL 0
#define MPIPE_MAC_ENABLE__AVAIL_RMASK 0xffffffff
#define MPIPE_MAC_ENABLE__AVAIL_MASK  _64bit(0xffffffff00000000)
#define MPIPE_MAC_ENABLE__AVAIL_FIELD 32,63


/*
 * MAC Info.
 * Constants related to the MAC interfaces connected to this MPIPE instance.
 */
#define MPIPE_MAC_INTFC_INFO 0x0500

#define MPIPE_MAC_INTFC_INFO__NUM_MACS_SHIFT 0
#define MPIPE_MAC_INTFC_INFO__NUM_MACS_WIDTH 8
#define MPIPE_MAC_INTFC_INFO__NUM_MACS_RESET_VAL 32
#define MPIPE_MAC_INTFC_INFO__NUM_MACS_RMASK 0xff
#define MPIPE_MAC_INTFC_INFO__NUM_MACS_MASK  0xff
#define MPIPE_MAC_INTFC_INFO__NUM_MACS_FIELD 0,7

#define MPIPE_MAC_INTFC_INFO__NUM_LOOPBACK_CH_SHIFT 8
#define MPIPE_MAC_INTFC_INFO__NUM_LOOPBACK_CH_WIDTH 8
#define MPIPE_MAC_INTFC_INFO__NUM_LOOPBACK_CH_RESET_VAL 4
#define MPIPE_MAC_INTFC_INFO__NUM_LOOPBACK_CH_RMASK 0xff
#define MPIPE_MAC_INTFC_INFO__NUM_LOOPBACK_CH_MASK  0xff00
#define MPIPE_MAC_INTFC_INFO__NUM_LOOPBACK_CH_FIELD 8,15

#define MPIPE_MAC_INTFC_INFO__FIRST_LOOPBACK_CH_SHIFT 16
#define MPIPE_MAC_INTFC_INFO__FIRST_LOOPBACK_CH_WIDTH 8
#define MPIPE_MAC_INTFC_INFO__FIRST_LOOPBACK_CH_RESET_VAL 28
#define MPIPE_MAC_INTFC_INFO__FIRST_LOOPBACK_CH_RMASK 0xff
#define MPIPE_MAC_INTFC_INFO__FIRST_LOOPBACK_CH_MASK  0xff0000
#define MPIPE_MAC_INTFC_INFO__FIRST_LOOPBACK_CH_FIELD 16,23


/*
 * MAC Management.
 * Indicates which MACs are allowed to perform management tasks (e.g. MDIO).
 * The driver for a port that shares a common management interface, such as
 * shared MDIO pins, must coordinate with other drivers for access to the
 * shared resource.  If multiple ports with their MAC_MANGAGE.ENA bits set
 * attempt simultaneous access to the management interface, the management
 * operations will be corrupted.  Some MACs sharing management pins may
 * require that only one MAC_MANAGE bit be asserted at a time.  Thus this
 * register should typically have just one bit set per shared pin group.
 */
#define MPIPE_MAC_MANAGE 0x0810

#define MPIPE_MAC_MANAGE__ENA_SHIFT 0
#define MPIPE_MAC_MANAGE__ENA_WIDTH 32
#define MPIPE_MAC_MANAGE__ENA_RESET_VAL 4294967295
#define MPIPE_MAC_MANAGE__ENA_RMASK 0xffffffff
#define MPIPE_MAC_MANAGE__ENA_MASK  0xffffffff
#define MPIPE_MAC_MANAGE__ENA_FIELD 0,31


/*
 * Memory Info.
 * This register provides information about memory setup required for this
 * device.
 */
#define MPIPE_MEM_INFO 0x0018

#define MPIPE_MEM_INFO__REQ_PORTS_SHIFT 0
#define MPIPE_MEM_INFO__REQ_PORTS_WIDTH 32
#define MPIPE_MEM_INFO__REQ_PORTS_RESET_VAL 32768
#define MPIPE_MEM_INFO__REQ_PORTS_RMASK 0xffffffff
#define MPIPE_MEM_INFO__REQ_PORTS_MASK  0xffffffff
#define MPIPE_MEM_INFO__REQ_PORTS_FIELD 0,31

#define MPIPE_MEM_INFO__NUM_HFH_TBL_SHIFT 32
#define MPIPE_MEM_INFO__NUM_HFH_TBL_WIDTH 4
#define MPIPE_MEM_INFO__NUM_HFH_TBL_RESET_VAL 6
#define MPIPE_MEM_INFO__NUM_HFH_TBL_RMASK 0xf
#define MPIPE_MEM_INFO__NUM_HFH_TBL_MASK  _64bit(0xf00000000)
#define MPIPE_MEM_INFO__NUM_HFH_TBL_FIELD 32,35

#define MPIPE_MEM_INFO__NUM_ASIDS_SHIFT 40
#define MPIPE_MEM_INFO__NUM_ASIDS_WIDTH 8
#define MPIPE_MEM_INFO__NUM_ASIDS_RESET_VAL 32
#define MPIPE_MEM_INFO__NUM_ASIDS_RMASK 0xff
#define MPIPE_MEM_INFO__NUM_ASIDS_MASK  _64bit(0xff0000000000)
#define MPIPE_MEM_INFO__NUM_ASIDS_FIELD 40,47

#define MPIPE_MEM_INFO__NUM_TLB_ENT_SHIFT 48
#define MPIPE_MEM_INFO__NUM_TLB_ENT_WIDTH 8
#define MPIPE_MEM_INFO__NUM_TLB_ENT_RESET_VAL 16
#define MPIPE_MEM_INFO__NUM_TLB_ENT_RMASK 0xff
#define MPIPE_MEM_INFO__NUM_TLB_ENT_MASK  _64bit(0xff000000000000)
#define MPIPE_MEM_INFO__NUM_TLB_ENT_FIELD 48,55


/*
 * iMesh Interface Controls.
 * Thresholds for packet interfaces to iMesh
 */
#define MPIPE_MESH_INTFC_CTL 0x0300

#define MPIPE_MESH_INTFC_CTL__SDN_THRESH_SHIFT 0
#define MPIPE_MESH_INTFC_CTL__SDN_THRESH_WIDTH 5
#define MPIPE_MESH_INTFC_CTL__SDN_THRESH_RESET_VAL 5
#define MPIPE_MESH_INTFC_CTL__SDN_THRESH_RMASK 0x1f
#define MPIPE_MESH_INTFC_CTL__SDN_THRESH_MASK  0x1f
#define MPIPE_MESH_INTFC_CTL__SDN_THRESH_FIELD 0,4

#define MPIPE_MESH_INTFC_CTL__MIXED_ROUTE_SHIFT 8
#define MPIPE_MESH_INTFC_CTL__MIXED_ROUTE_WIDTH 1
#define MPIPE_MESH_INTFC_CTL__MIXED_ROUTE_RESET_VAL 0
#define MPIPE_MESH_INTFC_CTL__MIXED_ROUTE_RMASK 0x1
#define MPIPE_MESH_INTFC_CTL__MIXED_ROUTE_MASK  0x100
#define MPIPE_MESH_INTFC_CTL__MIXED_ROUTE_FIELD 8,8

#define MPIPE_MESH_INTFC_CTL__IDMA_ROUTE_ORDER_OVD_SHIFT 9
#define MPIPE_MESH_INTFC_CTL__IDMA_ROUTE_ORDER_OVD_WIDTH 2
#define MPIPE_MESH_INTFC_CTL__IDMA_ROUTE_ORDER_OVD_RESET_VAL 0
#define MPIPE_MESH_INTFC_CTL__IDMA_ROUTE_ORDER_OVD_RMASK 0x3
#define MPIPE_MESH_INTFC_CTL__IDMA_ROUTE_ORDER_OVD_MASK  0x600
#define MPIPE_MESH_INTFC_CTL__IDMA_ROUTE_ORDER_OVD_FIELD 9,10
#define MPIPE_MESH_INTFC_CTL__IDMA_ROUTE_ORDER_OVD_VAL_DEFAULT 0x0
#define MPIPE_MESH_INTFC_CTL__IDMA_ROUTE_ORDER_OVD_VAL_X_FIRST 0x1
#define MPIPE_MESH_INTFC_CTL__IDMA_ROUTE_ORDER_OVD_VAL_Y_FIRST 0x2

#define MPIPE_MESH_INTFC_CTL__NTF_ROUTE_ORDER_OVD_SHIFT 11
#define MPIPE_MESH_INTFC_CTL__NTF_ROUTE_ORDER_OVD_WIDTH 2
#define MPIPE_MESH_INTFC_CTL__NTF_ROUTE_ORDER_OVD_RESET_VAL 0
#define MPIPE_MESH_INTFC_CTL__NTF_ROUTE_ORDER_OVD_RMASK 0x3
#define MPIPE_MESH_INTFC_CTL__NTF_ROUTE_ORDER_OVD_MASK  0x1800
#define MPIPE_MESH_INTFC_CTL__NTF_ROUTE_ORDER_OVD_FIELD 11,12
#define MPIPE_MESH_INTFC_CTL__NTF_ROUTE_ORDER_OVD_VAL_DEFAULT 0x0
#define MPIPE_MESH_INTFC_CTL__NTF_ROUTE_ORDER_OVD_VAL_X_FIRST 0x1
#define MPIPE_MESH_INTFC_CTL__NTF_ROUTE_ORDER_OVD_VAL_Y_FIRST 0x2


/*
 * MMIO Error Information.
 * Provides diagnostics information when an MMIO error occurs.  Captured
 * whenever the MMIO_ERR interrupt condition occurs which includes size
 * errors, read/write errors, and service domain protection errors.  This
 * does not update on config protection errors.
 */
#define MPIPE_MMIO_ERROR_INFO 0x0608

#define MPIPE_MMIO_ERROR_INFO__SRC_SHIFT 0
#define MPIPE_MMIO_ERROR_INFO__SRC_WIDTH 8
#define MPIPE_MMIO_ERROR_INFO__SRC_RESET_VAL 0
#define MPIPE_MMIO_ERROR_INFO__SRC_RMASK 0xff
#define MPIPE_MMIO_ERROR_INFO__SRC_MASK  0xff
#define MPIPE_MMIO_ERROR_INFO__SRC_FIELD 0,7

#define MPIPE_MMIO_ERROR_INFO__SIZE_SHIFT 8
#define MPIPE_MMIO_ERROR_INFO__SIZE_WIDTH 4
#define MPIPE_MMIO_ERROR_INFO__SIZE_RESET_VAL 0
#define MPIPE_MMIO_ERROR_INFO__SIZE_RMASK 0xf
#define MPIPE_MMIO_ERROR_INFO__SIZE_MASK  0xf00
#define MPIPE_MMIO_ERROR_INFO__SIZE_FIELD 8,11

#define MPIPE_MMIO_ERROR_INFO__PA_SHIFT 12
#define MPIPE_MMIO_ERROR_INFO__PA_WIDTH 40
#define MPIPE_MMIO_ERROR_INFO__PA_RESET_VAL 0
#define MPIPE_MMIO_ERROR_INFO__PA_RMASK _64bit(0xffffffffff)
#define MPIPE_MMIO_ERROR_INFO__PA_MASK  _64bit(0xffffffffff000)
#define MPIPE_MMIO_ERROR_INFO__PA_FIELD 12,51

#define MPIPE_MMIO_ERROR_INFO__OPC_SHIFT 52
#define MPIPE_MMIO_ERROR_INFO__OPC_WIDTH 5
#define MPIPE_MMIO_ERROR_INFO__OPC_RESET_VAL 0
#define MPIPE_MMIO_ERROR_INFO__OPC_RMASK 0x1f
#define MPIPE_MMIO_ERROR_INFO__OPC_MASK  _64bit(0x1f0000000000000)
#define MPIPE_MMIO_ERROR_INFO__OPC_FIELD 52,56


/*
 * MMIO Info.
 * This register provides information about how the physical address is
 * interpreted by the IO device.  The PA is divided into
 * {CHANNEL,SVC_DOM,IGNORED,REGION,OFFSET}.  The values in this register
 * define the size of each of these fields.
 */
#define MPIPE_MMIO_INFO 0x0010

#define MPIPE_MMIO_INFO__CH_WIDTH_SHIFT 0
#define MPIPE_MMIO_INFO__CH_WIDTH_WIDTH 4
#define MPIPE_MMIO_INFO__CH_WIDTH_RESET_VAL 0
#define MPIPE_MMIO_INFO__CH_WIDTH_RMASK 0xf
#define MPIPE_MMIO_INFO__CH_WIDTH_MASK  0xf
#define MPIPE_MMIO_INFO__CH_WIDTH_FIELD 0,3

#define MPIPE_MMIO_INFO__NUM_CH_SHIFT 4
#define MPIPE_MMIO_INFO__NUM_CH_WIDTH 15
#define MPIPE_MMIO_INFO__NUM_CH_RESET_VAL 1
#define MPIPE_MMIO_INFO__NUM_CH_RMASK 0x7fff
#define MPIPE_MMIO_INFO__NUM_CH_MASK  0x7fff0
#define MPIPE_MMIO_INFO__NUM_CH_FIELD 4,18

#define MPIPE_MMIO_INFO__SVC_DOM_WIDTH_SHIFT 19
#define MPIPE_MMIO_INFO__SVC_DOM_WIDTH_WIDTH 3
#define MPIPE_MMIO_INFO__SVC_DOM_WIDTH_RESET_VAL 5
#define MPIPE_MMIO_INFO__SVC_DOM_WIDTH_RMASK 0x7
#define MPIPE_MMIO_INFO__SVC_DOM_WIDTH_MASK  0x380000
#define MPIPE_MMIO_INFO__SVC_DOM_WIDTH_FIELD 19,21

#define MPIPE_MMIO_INFO__NUM_SVC_DOM_SHIFT 22
#define MPIPE_MMIO_INFO__NUM_SVC_DOM_WIDTH 7
#define MPIPE_MMIO_INFO__NUM_SVC_DOM_RESET_VAL 32
#define MPIPE_MMIO_INFO__NUM_SVC_DOM_RMASK 0x7f
#define MPIPE_MMIO_INFO__NUM_SVC_DOM_MASK  0x1fc00000
#define MPIPE_MMIO_INFO__NUM_SVC_DOM_FIELD 22,28

#define MPIPE_MMIO_INFO__OFFSET_WIDTH_SHIFT 29
#define MPIPE_MMIO_INFO__OFFSET_WIDTH_WIDTH 6
#define MPIPE_MMIO_INFO__OFFSET_WIDTH_RESET_VAL 26
#define MPIPE_MMIO_INFO__OFFSET_WIDTH_RMASK 0x3f
#define MPIPE_MMIO_INFO__OFFSET_WIDTH_MASK  _64bit(0x7e0000000)
#define MPIPE_MMIO_INFO__OFFSET_WIDTH_FIELD 29,34

#define MPIPE_MMIO_INFO__REGION_WIDTH_SHIFT 35
#define MPIPE_MMIO_INFO__REGION_WIDTH_WIDTH 6
#define MPIPE_MMIO_INFO__REGION_WIDTH_RESET_VAL 3
#define MPIPE_MMIO_INFO__REGION_WIDTH_RMASK 0x3f
#define MPIPE_MMIO_INFO__REGION_WIDTH_MASK  _64bit(0x1f800000000)
#define MPIPE_MMIO_INFO__REGION_WIDTH_FIELD 35,40


/*
 * MMIO Service Domain Configuration.
 * Initialization control for the MMIO service domain table
 */
#define MPIPE_MMIO_INIT_CTL 0x0200

#define MPIPE_MMIO_INIT_CTL__REG_SHIFT 0
#define MPIPE_MMIO_INIT_CTL__REG_WIDTH 1
#define MPIPE_MMIO_INIT_CTL__REG_RESET_VAL 0
#define MPIPE_MMIO_INIT_CTL__REG_RMASK 0x1
#define MPIPE_MMIO_INIT_CTL__REG_MASK  0x1
#define MPIPE_MMIO_INIT_CTL__REG_FIELD 0,0

#define MPIPE_MMIO_INIT_CTL__SVC_DOM_IDX_SHIFT 1
#define MPIPE_MMIO_INIT_CTL__SVC_DOM_IDX_WIDTH 5
#define MPIPE_MMIO_INIT_CTL__SVC_DOM_IDX_RESET_VAL 0
#define MPIPE_MMIO_INIT_CTL__SVC_DOM_IDX_RMASK 0x1f
#define MPIPE_MMIO_INIT_CTL__SVC_DOM_IDX_MASK  0x3e
#define MPIPE_MMIO_INIT_CTL__SVC_DOM_IDX_FIELD 1,5


/*
 * MMIO service domain table data.
 * Read/Write data for the service domain table.  Each time this register is
 * read or written, MPIPE_MMIO_INIT_CTL.REG is incremented.  On increment,
 * REG overflows into SVC_DOM_IDX so that both REGs and all SVC_DOM_IDX's can
 * be read or written sequentially.
 */
#define MPIPE_MMIO_INIT_DAT 0x0208

#define MPIPE_MMIO_INIT_DAT__DAT_SHIFT 0
#define MPIPE_MMIO_INIT_DAT__DAT_WIDTH 64
#define MPIPE_MMIO_INIT_DAT__DAT_RESET_VAL 0
#define MPIPE_MMIO_INIT_DAT__DAT_RMASK _64bit(0xffffffffffffffff)
#define MPIPE_MMIO_INIT_DAT__DAT_MASK  _64bit(0xffffffffffffffff)
#define MPIPE_MMIO_INIT_DAT__DAT_FIELD 0,63


/*
 * MMIO service domain table data - low word.
 * Read/Write data for the service domain table.  Each time this register is
 * read or written, MPIPE_MMIO_INIT_CTL.IDX is incremented.  Each entry
 * consists of two words, addressed by MMIO_INIT_CTL.REG.  Each bit in an
 * entry corresponds to a service or set of services.  A set bit allows
 * access to that service for MMIO accesses that address this service domain
 * table entry.
 */
#define MPIPE_MMIO_INIT_DAT_GX36_0 0x0208

#define MPIPE_MMIO_INIT_DAT_GX36_0__NOTIF_RING_MASK_SHIFT 0
#define MPIPE_MMIO_INIT_DAT_GX36_0__NOTIF_RING_MASK_WIDTH 32
#define MPIPE_MMIO_INIT_DAT_GX36_0__NOTIF_RING_MASK_RESET_VAL 4294967295
#define MPIPE_MMIO_INIT_DAT_GX36_0__NOTIF_RING_MASK_RMASK 0xffffffff
#define MPIPE_MMIO_INIT_DAT_GX36_0__NOTIF_RING_MASK_MASK  0xffffffff
#define MPIPE_MMIO_INIT_DAT_GX36_0__NOTIF_RING_MASK_FIELD 0,31

#define MPIPE_MMIO_INIT_DAT_GX36_0__BUCKET_RELEASE_MASK_LO_SHIFT 32
#define MPIPE_MMIO_INIT_DAT_GX36_0__BUCKET_RELEASE_MASK_LO_WIDTH 16
#define MPIPE_MMIO_INIT_DAT_GX36_0__BUCKET_RELEASE_MASK_LO_RESET_VAL 65535
#define MPIPE_MMIO_INIT_DAT_GX36_0__BUCKET_RELEASE_MASK_LO_RMASK 0xffff
#define MPIPE_MMIO_INIT_DAT_GX36_0__BUCKET_RELEASE_MASK_LO_MASK  _64bit(0xffff00000000)
#define MPIPE_MMIO_INIT_DAT_GX36_0__BUCKET_RELEASE_MASK_LO_FIELD 32,47

#define MPIPE_MMIO_INIT_DAT_GX36_0__BUCKET_RELEASE_MASK_HI_SHIFT 48
#define MPIPE_MMIO_INIT_DAT_GX36_0__BUCKET_RELEASE_MASK_HI_WIDTH 16
#define MPIPE_MMIO_INIT_DAT_GX36_0__BUCKET_RELEASE_MASK_HI_RESET_VAL 65535
#define MPIPE_MMIO_INIT_DAT_GX36_0__BUCKET_RELEASE_MASK_HI_RMASK 0xffff
#define MPIPE_MMIO_INIT_DAT_GX36_0__BUCKET_RELEASE_MASK_HI_MASK  _64bit(0xffff000000000000)
#define MPIPE_MMIO_INIT_DAT_GX36_0__BUCKET_RELEASE_MASK_HI_FIELD 48,63


/*
 * MMIO service domain table data - high word.
 * Read/Write data for the service domain table.  Each time this register is
 * read or written, MPIPE_MMIO_INIT_CTL.IDX is incremented.  Each entry
 * consists of two words, addressed by MMIO_INIT_CTL.REG.  Each bit in an
 * entry corresponds to a service or set of services.  A set bit allows
 * access to that service for MMIO accesses that address this service domain
 * table entry.
 */
#define MPIPE_MMIO_INIT_DAT_GX36_1 0x0208

#define MPIPE_MMIO_INIT_DAT_GX36_1__BUFFER_STACK_MASK_SHIFT 0
#define MPIPE_MMIO_INIT_DAT_GX36_1__BUFFER_STACK_MASK_WIDTH 32
#define MPIPE_MMIO_INIT_DAT_GX36_1__BUFFER_STACK_MASK_RESET_VAL 4294967295
#define MPIPE_MMIO_INIT_DAT_GX36_1__BUFFER_STACK_MASK_RMASK 0xffffffff
#define MPIPE_MMIO_INIT_DAT_GX36_1__BUFFER_STACK_MASK_MASK  0xffffffff
#define MPIPE_MMIO_INIT_DAT_GX36_1__BUFFER_STACK_MASK_FIELD 0,31

#define MPIPE_MMIO_INIT_DAT_GX36_1__EDMA_POST_MASK_SHIFT 32
#define MPIPE_MMIO_INIT_DAT_GX36_1__EDMA_POST_MASK_WIDTH 24
#define MPIPE_MMIO_INIT_DAT_GX36_1__EDMA_POST_MASK_RESET_VAL 16777215
#define MPIPE_MMIO_INIT_DAT_GX36_1__EDMA_POST_MASK_RMASK 0xffffff
#define MPIPE_MMIO_INIT_DAT_GX36_1__EDMA_POST_MASK_MASK  _64bit(0xffffff00000000)
#define MPIPE_MMIO_INIT_DAT_GX36_1__EDMA_POST_MASK_FIELD 32,55

#define MPIPE_MMIO_INIT_DAT_GX36_1__CFG_PROT_LEVEL_SHIFT 56
#define MPIPE_MMIO_INIT_DAT_GX36_1__CFG_PROT_LEVEL_WIDTH 2
#define MPIPE_MMIO_INIT_DAT_GX36_1__CFG_PROT_LEVEL_RESET_VAL 3
#define MPIPE_MMIO_INIT_DAT_GX36_1__CFG_PROT_LEVEL_RMASK 0x3
#define MPIPE_MMIO_INIT_DAT_GX36_1__CFG_PROT_LEVEL_MASK  _64bit(0x300000000000000)
#define MPIPE_MMIO_INIT_DAT_GX36_1__CFG_PROT_LEVEL_FIELD 56,57


/*
 * iDMA Notif Control.
 * Configuration for the iDMA notification services
 */
#define MPIPE_NTF_CTL 0x2310

#define MPIPE_NTF_CTL__MAX_REQ_SHIFT 0
#define MPIPE_NTF_CTL__MAX_REQ_WIDTH 8
#define MPIPE_NTF_CTL__MAX_REQ_RESET_VAL 255
#define MPIPE_NTF_CTL__MAX_REQ_RMASK 0xff
#define MPIPE_NTF_CTL__MAX_REQ_MASK  0xff
#define MPIPE_NTF_CTL__MAX_REQ_FIELD 0,7

#define MPIPE_NTF_CTL__TUP_PTC_SHIFT 8
#define MPIPE_NTF_CTL__TUP_PTC_WIDTH 1
#define MPIPE_NTF_CTL__TUP_PTC_RESET_VAL 1
#define MPIPE_NTF_CTL__TUP_PTC_RMASK 0x1
#define MPIPE_NTF_CTL__TUP_PTC_MASK  0x100
#define MPIPE_NTF_CTL__TUP_PTC_FIELD 8,8

#define MPIPE_NTF_CTL__TUP_ENA_SHIFT 9
#define MPIPE_NTF_CTL__TUP_ENA_WIDTH 1
#define MPIPE_NTF_CTL__TUP_ENA_RESET_VAL 1
#define MPIPE_NTF_CTL__TUP_ENA_RMASK 0x1
#define MPIPE_NTF_CTL__TUP_ENA_MASK  0x200
#define MPIPE_NTF_CTL__TUP_ENA_FIELD 9,9

#define MPIPE_NTF_CTL__TUP_NO_ACK_SHIFT 10
#define MPIPE_NTF_CTL__TUP_NO_ACK_WIDTH 1
#define MPIPE_NTF_CTL__TUP_NO_ACK_RESET_VAL 0
#define MPIPE_NTF_CTL__TUP_NO_ACK_RMASK 0x1
#define MPIPE_NTF_CTL__TUP_NO_ACK_MASK  0x400
#define MPIPE_NTF_CTL__TUP_NO_ACK_FIELD 10,10


/*
 * Main Clock Control.
 * Provides control over the MPIPE main PLL.  Although this can be changed
 * dynamically, this PLL should typically be configured prior to enabling
 * high-bandwidth traffic.  When disabled, the MPIPE will operate at 125 MHz.
 *  Note that while the clock is being changed from one frequency to another,
 * it will park at 125 MHz while the PLL is locking.  This can cause egress
 * packet loss and TX_ERRs as well as ingress packet loss and MAC_ERRs due to
 * the bandwidth mismatch between the MACs and mPIPE.
 */
#define MPIPE_PCLK_CONTROL 0x0108

#define MPIPE_PCLK_CONTROL__ENA_SHIFT 0
#define MPIPE_PCLK_CONTROL__ENA_WIDTH 1
#define MPIPE_PCLK_CONTROL__ENA_RESET_VAL 0
#define MPIPE_PCLK_CONTROL__ENA_RMASK 0x1
#define MPIPE_PCLK_CONTROL__ENA_MASK  0x1
#define MPIPE_PCLK_CONTROL__ENA_FIELD 0,0

#define MPIPE_PCLK_CONTROL__PLL_RANGE_SHIFT 1
#define MPIPE_PCLK_CONTROL__PLL_RANGE_WIDTH 3
#define MPIPE_PCLK_CONTROL__PLL_RANGE_RESET_VAL 0
#define MPIPE_PCLK_CONTROL__PLL_RANGE_RMASK 0x7
#define MPIPE_PCLK_CONTROL__PLL_RANGE_MASK  0xe
#define MPIPE_PCLK_CONTROL__PLL_RANGE_FIELD 1,3
#define MPIPE_PCLK_CONTROL__PLL_RANGE_VAL_BYP 0x0
#define MPIPE_PCLK_CONTROL__PLL_RANGE_VAL_R14_16 0x1
#define MPIPE_PCLK_CONTROL__PLL_RANGE_VAL_R16_26 0x2
#define MPIPE_PCLK_CONTROL__PLL_RANGE_VAL_R26_42 0x3
#define MPIPE_PCLK_CONTROL__PLL_RANGE_VAL_R42_65 0x4
#define MPIPE_PCLK_CONTROL__PLL_RANGE_VAL_R65_104 0x5
#define MPIPE_PCLK_CONTROL__PLL_RANGE_VAL_R104_166 0x6
#define MPIPE_PCLK_CONTROL__PLL_RANGE_VAL_R166_200 0x7

#define MPIPE_PCLK_CONTROL__PLL_Q_SHIFT 4
#define MPIPE_PCLK_CONTROL__PLL_Q_WIDTH 3
#define MPIPE_PCLK_CONTROL__PLL_Q_RESET_VAL 0
#define MPIPE_PCLK_CONTROL__PLL_Q_RMASK 0x7
#define MPIPE_PCLK_CONTROL__PLL_Q_MASK  0x70
#define MPIPE_PCLK_CONTROL__PLL_Q_FIELD 4,6

#define MPIPE_PCLK_CONTROL__PLL_N_SHIFT 7
#define MPIPE_PCLK_CONTROL__PLL_N_WIDTH 6
#define MPIPE_PCLK_CONTROL__PLL_N_RESET_VAL 0
#define MPIPE_PCLK_CONTROL__PLL_N_RMASK 0x3f
#define MPIPE_PCLK_CONTROL__PLL_N_MASK  0x1f80
#define MPIPE_PCLK_CONTROL__PLL_N_FIELD 7,12

#define MPIPE_PCLK_CONTROL__PLL_M_SHIFT 13
#define MPIPE_PCLK_CONTROL__PLL_M_WIDTH 8
#define MPIPE_PCLK_CONTROL__PLL_M_RESET_VAL 0
#define MPIPE_PCLK_CONTROL__PLL_M_RMASK 0xff
#define MPIPE_PCLK_CONTROL__PLL_M_MASK  0x1fe000
#define MPIPE_PCLK_CONTROL__PLL_M_FIELD 13,20

#define MPIPE_PCLK_CONTROL__CLOCK_READY_SHIFT 31
#define MPIPE_PCLK_CONTROL__CLOCK_READY_WIDTH 1
#define MPIPE_PCLK_CONTROL__CLOCK_READY_RESET_VAL 0
#define MPIPE_PCLK_CONTROL__CLOCK_READY_RMASK 0x1
#define MPIPE_PCLK_CONTROL__CLOCK_READY_MASK  0x80000000
#define MPIPE_PCLK_CONTROL__CLOCK_READY_FIELD 31,31


/*
 * Priority Pause Threshold Registers.
 * Thresholds for generating priority queue pause based on iPkt buffer
 * occupancy.  Each register contains 4 thresholds. There are 8 registers
 * containing the thresholds for the 32 priority queues.  The thresholds are
 * in units of 128-byte blocks.  This value must not be modified while
 * packets are inflight for the associated queue.
 */
#define MPIPE_PR_PAUSE_THR__FIRST_WORD 0x1080
#define MPIPE_PR_PAUSE_THR__LAST_WORD 0x10b8

#define MPIPE_PR_PAUSE_THR__PR0_THRESH_SHIFT 0
#define MPIPE_PR_PAUSE_THR__PR0_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR__PR0_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR__PR0_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR__PR0_THRESH_MASK  0x7ff
#define MPIPE_PR_PAUSE_THR__PR0_THRESH_FIELD 0,10

#define MPIPE_PR_PAUSE_THR__PR1_THRESH_SHIFT 16
#define MPIPE_PR_PAUSE_THR__PR1_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR__PR1_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR__PR1_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR__PR1_THRESH_MASK  0x7ff0000
#define MPIPE_PR_PAUSE_THR__PR1_THRESH_FIELD 16,26

#define MPIPE_PR_PAUSE_THR__PR2_THRESH_SHIFT 32
#define MPIPE_PR_PAUSE_THR__PR2_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR__PR2_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR__PR2_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR__PR2_THRESH_MASK  _64bit(0x7ff00000000)
#define MPIPE_PR_PAUSE_THR__PR2_THRESH_FIELD 32,42

#define MPIPE_PR_PAUSE_THR__PR3_THRESH_SHIFT 48
#define MPIPE_PR_PAUSE_THR__PR3_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR__PR3_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR__PR3_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR__PR3_THRESH_MASK  _64bit(0x7ff000000000000)
#define MPIPE_PR_PAUSE_THR__PR3_THRESH_FIELD 48,58


/*
 * Priority Pause Threshold Registers.
 * Thresholds for generating priority queue pause based on iPkt buffer
 * occupancy.  Each register contains 4 thresholds. There are 8 registers
 * containing the thresholds for the 32 priority queues.  The thresholds are
 * in units of 128-byte blocks.  This value must not be modified while
 * packets are inflight for the associated queue.
 */
#define MPIPE_PR_PAUSE_THR_1__FIRST_WORD 0x1088
#define MPIPE_PR_PAUSE_THR_1__LAST_WORD 0x10c0

#define MPIPE_PR_PAUSE_THR_1__PR0_THRESH_SHIFT 0
#define MPIPE_PR_PAUSE_THR_1__PR0_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_1__PR0_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_1__PR0_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_1__PR0_THRESH_MASK  0x7ff
#define MPIPE_PR_PAUSE_THR_1__PR0_THRESH_FIELD 0,10

#define MPIPE_PR_PAUSE_THR_1__PR1_THRESH_SHIFT 16
#define MPIPE_PR_PAUSE_THR_1__PR1_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_1__PR1_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_1__PR1_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_1__PR1_THRESH_MASK  0x7ff0000
#define MPIPE_PR_PAUSE_THR_1__PR1_THRESH_FIELD 16,26

#define MPIPE_PR_PAUSE_THR_1__PR2_THRESH_SHIFT 32
#define MPIPE_PR_PAUSE_THR_1__PR2_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_1__PR2_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_1__PR2_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_1__PR2_THRESH_MASK  _64bit(0x7ff00000000)
#define MPIPE_PR_PAUSE_THR_1__PR2_THRESH_FIELD 32,42

#define MPIPE_PR_PAUSE_THR_1__PR3_THRESH_SHIFT 48
#define MPIPE_PR_PAUSE_THR_1__PR3_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_1__PR3_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_1__PR3_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_1__PR3_THRESH_MASK  _64bit(0x7ff000000000000)
#define MPIPE_PR_PAUSE_THR_1__PR3_THRESH_FIELD 48,58


/*
 * Priority Pause Threshold Registers.
 * Thresholds for generating priority queue pause based on iPkt buffer
 * occupancy.  Each register contains 4 thresholds. There are 8 registers
 * containing the thresholds for the 32 priority queues.  The thresholds are
 * in units of 128-byte blocks.  This value must not be modified while
 * packets are inflight for the associated queue.
 */
#define MPIPE_PR_PAUSE_THR_2__FIRST_WORD 0x1090
#define MPIPE_PR_PAUSE_THR_2__LAST_WORD 0x10c8

#define MPIPE_PR_PAUSE_THR_2__PR0_THRESH_SHIFT 0
#define MPIPE_PR_PAUSE_THR_2__PR0_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_2__PR0_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_2__PR0_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_2__PR0_THRESH_MASK  0x7ff
#define MPIPE_PR_PAUSE_THR_2__PR0_THRESH_FIELD 0,10

#define MPIPE_PR_PAUSE_THR_2__PR1_THRESH_SHIFT 16
#define MPIPE_PR_PAUSE_THR_2__PR1_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_2__PR1_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_2__PR1_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_2__PR1_THRESH_MASK  0x7ff0000
#define MPIPE_PR_PAUSE_THR_2__PR1_THRESH_FIELD 16,26

#define MPIPE_PR_PAUSE_THR_2__PR2_THRESH_SHIFT 32
#define MPIPE_PR_PAUSE_THR_2__PR2_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_2__PR2_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_2__PR2_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_2__PR2_THRESH_MASK  _64bit(0x7ff00000000)
#define MPIPE_PR_PAUSE_THR_2__PR2_THRESH_FIELD 32,42

#define MPIPE_PR_PAUSE_THR_2__PR3_THRESH_SHIFT 48
#define MPIPE_PR_PAUSE_THR_2__PR3_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_2__PR3_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_2__PR3_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_2__PR3_THRESH_MASK  _64bit(0x7ff000000000000)
#define MPIPE_PR_PAUSE_THR_2__PR3_THRESH_FIELD 48,58


/*
 * Priority Pause Threshold Registers.
 * Thresholds for generating priority queue pause based on iPkt buffer
 * occupancy.  Each register contains 4 thresholds. There are 8 registers
 * containing the thresholds for the 32 priority queues.  The thresholds are
 * in units of 128-byte blocks.  This value must not be modified while
 * packets are inflight for the associated queue.
 */
#define MPIPE_PR_PAUSE_THR_3__FIRST_WORD 0x1098
#define MPIPE_PR_PAUSE_THR_3__LAST_WORD 0x10d0

#define MPIPE_PR_PAUSE_THR_3__PR0_THRESH_SHIFT 0
#define MPIPE_PR_PAUSE_THR_3__PR0_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_3__PR0_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_3__PR0_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_3__PR0_THRESH_MASK  0x7ff
#define MPIPE_PR_PAUSE_THR_3__PR0_THRESH_FIELD 0,10

#define MPIPE_PR_PAUSE_THR_3__PR1_THRESH_SHIFT 16
#define MPIPE_PR_PAUSE_THR_3__PR1_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_3__PR1_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_3__PR1_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_3__PR1_THRESH_MASK  0x7ff0000
#define MPIPE_PR_PAUSE_THR_3__PR1_THRESH_FIELD 16,26

#define MPIPE_PR_PAUSE_THR_3__PR2_THRESH_SHIFT 32
#define MPIPE_PR_PAUSE_THR_3__PR2_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_3__PR2_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_3__PR2_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_3__PR2_THRESH_MASK  _64bit(0x7ff00000000)
#define MPIPE_PR_PAUSE_THR_3__PR2_THRESH_FIELD 32,42

#define MPIPE_PR_PAUSE_THR_3__PR3_THRESH_SHIFT 48
#define MPIPE_PR_PAUSE_THR_3__PR3_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_3__PR3_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_3__PR3_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_3__PR3_THRESH_MASK  _64bit(0x7ff000000000000)
#define MPIPE_PR_PAUSE_THR_3__PR3_THRESH_FIELD 48,58


/*
 * Priority Pause Threshold Registers.
 * Thresholds for generating priority queue pause based on iPkt buffer
 * occupancy.  Each register contains 4 thresholds. There are 8 registers
 * containing the thresholds for the 32 priority queues.  The thresholds are
 * in units of 128-byte blocks.  This value must not be modified while
 * packets are inflight for the associated queue.
 */
#define MPIPE_PR_PAUSE_THR_4__FIRST_WORD 0x10a0
#define MPIPE_PR_PAUSE_THR_4__LAST_WORD 0x10d8

#define MPIPE_PR_PAUSE_THR_4__PR0_THRESH_SHIFT 0
#define MPIPE_PR_PAUSE_THR_4__PR0_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_4__PR0_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_4__PR0_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_4__PR0_THRESH_MASK  0x7ff
#define MPIPE_PR_PAUSE_THR_4__PR0_THRESH_FIELD 0,10

#define MPIPE_PR_PAUSE_THR_4__PR1_THRESH_SHIFT 16
#define MPIPE_PR_PAUSE_THR_4__PR1_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_4__PR1_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_4__PR1_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_4__PR1_THRESH_MASK  0x7ff0000
#define MPIPE_PR_PAUSE_THR_4__PR1_THRESH_FIELD 16,26

#define MPIPE_PR_PAUSE_THR_4__PR2_THRESH_SHIFT 32
#define MPIPE_PR_PAUSE_THR_4__PR2_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_4__PR2_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_4__PR2_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_4__PR2_THRESH_MASK  _64bit(0x7ff00000000)
#define MPIPE_PR_PAUSE_THR_4__PR2_THRESH_FIELD 32,42

#define MPIPE_PR_PAUSE_THR_4__PR3_THRESH_SHIFT 48
#define MPIPE_PR_PAUSE_THR_4__PR3_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_4__PR3_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_4__PR3_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_4__PR3_THRESH_MASK  _64bit(0x7ff000000000000)
#define MPIPE_PR_PAUSE_THR_4__PR3_THRESH_FIELD 48,58


/*
 * Priority Pause Threshold Registers.
 * Thresholds for generating priority queue pause based on iPkt buffer
 * occupancy.  Each register contains 4 thresholds. There are 8 registers
 * containing the thresholds for the 32 priority queues.  The thresholds are
 * in units of 128-byte blocks.  This value must not be modified while
 * packets are inflight for the associated queue.
 */
#define MPIPE_PR_PAUSE_THR_5__FIRST_WORD 0x10a8
#define MPIPE_PR_PAUSE_THR_5__LAST_WORD 0x10e0

#define MPIPE_PR_PAUSE_THR_5__PR0_THRESH_SHIFT 0
#define MPIPE_PR_PAUSE_THR_5__PR0_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_5__PR0_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_5__PR0_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_5__PR0_THRESH_MASK  0x7ff
#define MPIPE_PR_PAUSE_THR_5__PR0_THRESH_FIELD 0,10

#define MPIPE_PR_PAUSE_THR_5__PR1_THRESH_SHIFT 16
#define MPIPE_PR_PAUSE_THR_5__PR1_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_5__PR1_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_5__PR1_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_5__PR1_THRESH_MASK  0x7ff0000
#define MPIPE_PR_PAUSE_THR_5__PR1_THRESH_FIELD 16,26

#define MPIPE_PR_PAUSE_THR_5__PR2_THRESH_SHIFT 32
#define MPIPE_PR_PAUSE_THR_5__PR2_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_5__PR2_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_5__PR2_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_5__PR2_THRESH_MASK  _64bit(0x7ff00000000)
#define MPIPE_PR_PAUSE_THR_5__PR2_THRESH_FIELD 32,42

#define MPIPE_PR_PAUSE_THR_5__PR3_THRESH_SHIFT 48
#define MPIPE_PR_PAUSE_THR_5__PR3_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_5__PR3_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_5__PR3_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_5__PR3_THRESH_MASK  _64bit(0x7ff000000000000)
#define MPIPE_PR_PAUSE_THR_5__PR3_THRESH_FIELD 48,58


/*
 * Priority Pause Threshold Registers.
 * Thresholds for generating priority queue pause based on iPkt buffer
 * occupancy.  Each register contains 4 thresholds. There are 8 registers
 * containing the thresholds for the 32 priority queues.  The thresholds are
 * in units of 128-byte blocks.  This value must not be modified while
 * packets are inflight for the associated queue.
 */
#define MPIPE_PR_PAUSE_THR_6__FIRST_WORD 0x10b0
#define MPIPE_PR_PAUSE_THR_6__LAST_WORD 0x10e8

#define MPIPE_PR_PAUSE_THR_6__PR0_THRESH_SHIFT 0
#define MPIPE_PR_PAUSE_THR_6__PR0_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_6__PR0_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_6__PR0_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_6__PR0_THRESH_MASK  0x7ff
#define MPIPE_PR_PAUSE_THR_6__PR0_THRESH_FIELD 0,10

#define MPIPE_PR_PAUSE_THR_6__PR1_THRESH_SHIFT 16
#define MPIPE_PR_PAUSE_THR_6__PR1_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_6__PR1_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_6__PR1_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_6__PR1_THRESH_MASK  0x7ff0000
#define MPIPE_PR_PAUSE_THR_6__PR1_THRESH_FIELD 16,26

#define MPIPE_PR_PAUSE_THR_6__PR2_THRESH_SHIFT 32
#define MPIPE_PR_PAUSE_THR_6__PR2_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_6__PR2_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_6__PR2_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_6__PR2_THRESH_MASK  _64bit(0x7ff00000000)
#define MPIPE_PR_PAUSE_THR_6__PR2_THRESH_FIELD 32,42

#define MPIPE_PR_PAUSE_THR_6__PR3_THRESH_SHIFT 48
#define MPIPE_PR_PAUSE_THR_6__PR3_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_6__PR3_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_6__PR3_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_6__PR3_THRESH_MASK  _64bit(0x7ff000000000000)
#define MPIPE_PR_PAUSE_THR_6__PR3_THRESH_FIELD 48,58


/*
 * Priority Pause Threshold Registers.
 * Thresholds for generating priority queue pause based on iPkt buffer
 * occupancy.  Each register contains 4 thresholds. There are 8 registers
 * containing the thresholds for the 32 priority queues.  The thresholds are
 * in units of 128-byte blocks.  This value must not be modified while
 * packets are inflight for the associated queue.
 */
#define MPIPE_PR_PAUSE_THR_7__FIRST_WORD 0x10b8
#define MPIPE_PR_PAUSE_THR_7__LAST_WORD 0x10f0

#define MPIPE_PR_PAUSE_THR_7__PR0_THRESH_SHIFT 0
#define MPIPE_PR_PAUSE_THR_7__PR0_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_7__PR0_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_7__PR0_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_7__PR0_THRESH_MASK  0x7ff
#define MPIPE_PR_PAUSE_THR_7__PR0_THRESH_FIELD 0,10

#define MPIPE_PR_PAUSE_THR_7__PR1_THRESH_SHIFT 16
#define MPIPE_PR_PAUSE_THR_7__PR1_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_7__PR1_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_7__PR1_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_7__PR1_THRESH_MASK  0x7ff0000
#define MPIPE_PR_PAUSE_THR_7__PR1_THRESH_FIELD 16,26

#define MPIPE_PR_PAUSE_THR_7__PR2_THRESH_SHIFT 32
#define MPIPE_PR_PAUSE_THR_7__PR2_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_7__PR2_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_7__PR2_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_7__PR2_THRESH_MASK  _64bit(0x7ff00000000)
#define MPIPE_PR_PAUSE_THR_7__PR2_THRESH_FIELD 32,42

#define MPIPE_PR_PAUSE_THR_7__PR3_THRESH_SHIFT 48
#define MPIPE_PR_PAUSE_THR_7__PR3_THRESH_WIDTH 11
#define MPIPE_PR_PAUSE_THR_7__PR3_THRESH_RESET_VAL 180
#define MPIPE_PR_PAUSE_THR_7__PR3_THRESH_RMASK 0x7ff
#define MPIPE_PR_PAUSE_THR_7__PR3_THRESH_MASK  _64bit(0x7ff000000000000)
#define MPIPE_PR_PAUSE_THR_7__PR3_THRESH_FIELD 48,58


/* Scratchpad. */
#define MPIPE_SCRATCHPAD 0x0020

#define MPIPE_SCRATCHPAD__SCRATCHPAD_SHIFT 0
#define MPIPE_SCRATCHPAD__SCRATCHPAD_WIDTH 64
#define MPIPE_SCRATCHPAD__SCRATCHPAD_RESET_VAL 0
#define MPIPE_SCRATCHPAD__SCRATCHPAD_RMASK _64bit(0xffffffffffffffff)
#define MPIPE_SCRATCHPAD__SCRATCHPAD_MASK  _64bit(0xffffffffffffffff)
#define MPIPE_SCRATCHPAD__SCRATCHPAD_FIELD 0,63


/*
 * Semaphore0.
 * Semaphore
 */
#define MPIPE_SEMAPHORE0 0x0028

#define MPIPE_SEMAPHORE0__VAL_SHIFT 0
#define MPIPE_SEMAPHORE0__VAL_WIDTH 1
#define MPIPE_SEMAPHORE0__VAL_RESET_VAL 0
#define MPIPE_SEMAPHORE0__VAL_RMASK 0x1
#define MPIPE_SEMAPHORE0__VAL_MASK  0x1
#define MPIPE_SEMAPHORE0__VAL_FIELD 0,0


/*
 * Semaphore1.
 * Semaphore
 */
#define MPIPE_SEMAPHORE1 0x0030

#define MPIPE_SEMAPHORE1__VAL_SHIFT 0
#define MPIPE_SEMAPHORE1__VAL_WIDTH 1
#define MPIPE_SEMAPHORE1__VAL_RESET_VAL 0
#define MPIPE_SEMAPHORE1__VAL_RMASK 0x1
#define MPIPE_SEMAPHORE1__VAL_MASK  0x1
#define MPIPE_SEMAPHORE1__VAL_FIELD 0,0


/*
 * Sequence Number and packet counter Access.
 * Access to general purpose sequence numbers and packet counters
 */
#define MPIPE_SQN_CTR_CTL 0x2300

#define MPIPE_SQN_CTR_CTL__IDX_SHIFT 0
#define MPIPE_SQN_CTR_CTL__IDX_WIDTH 13
#define MPIPE_SQN_CTR_CTL__IDX_RESET_VAL 0
#define MPIPE_SQN_CTR_CTL__IDX_RMASK 0x1fff
#define MPIPE_SQN_CTR_CTL__IDX_MASK  0x1fff
#define MPIPE_SQN_CTR_CTL__IDX_FIELD 0,12

#define MPIPE_SQN_CTR_CTL__STRUCT_SEL_SHIFT 16
#define MPIPE_SQN_CTR_CTL__STRUCT_SEL_WIDTH 1
#define MPIPE_SQN_CTR_CTL__STRUCT_SEL_RESET_VAL 0
#define MPIPE_SQN_CTR_CTL__STRUCT_SEL_RMASK 0x1
#define MPIPE_SQN_CTR_CTL__STRUCT_SEL_MASK  0x10000
#define MPIPE_SQN_CTR_CTL__STRUCT_SEL_FIELD 16,16
#define MPIPE_SQN_CTR_CTL__STRUCT_SEL_VAL_SQN 0x0
#define MPIPE_SQN_CTR_CTL__STRUCT_SEL_VAL_CTR 0x1

#define MPIPE_SQN_CTR_CTL__CTR_MODE_SHIFT 17
#define MPIPE_SQN_CTR_CTL__CTR_MODE_WIDTH 1
#define MPIPE_SQN_CTR_CTL__CTR_MODE_RESET_VAL 0
#define MPIPE_SQN_CTR_CTL__CTR_MODE_RMASK 0x1
#define MPIPE_SQN_CTR_CTL__CTR_MODE_MASK  0x20000
#define MPIPE_SQN_CTR_CTL__CTR_MODE_FIELD 17,17


/*
 * Sequence Number and Packet Counter Data.
 * Read/Write data for sequence numbers and packet counters.
 */
#define MPIPE_SQN_CTR_DAT 0x2308

#define MPIPE_SQN_CTR_DAT__DAT_SHIFT 0
#define MPIPE_SQN_CTR_DAT__DAT_WIDTH 48
#define MPIPE_SQN_CTR_DAT__DAT_RESET_VAL 0
#define MPIPE_SQN_CTR_DAT__DAT_RMASK _64bit(0xffffffffffff)
#define MPIPE_SQN_CTR_DAT__DAT_MASK  _64bit(0xffffffffffff)
#define MPIPE_SQN_CTR_DAT__DAT_FIELD 0,47


/*
 * Sequence Number and Packet Counter Data.
 * Read/Write data for sequence numbers when SQN_CTL.STRUCT_SEL=SQN.
 */
#define MPIPE_SQN_CTR_DAT_SQN 0x2308

#define MPIPE_SQN_CTR_DAT_SQN__SQN_SHIFT 0
#define MPIPE_SQN_CTR_DAT_SQN__SQN_WIDTH 32
#define MPIPE_SQN_CTR_DAT_SQN__SQN_RESET_VAL 0
#define MPIPE_SQN_CTR_DAT_SQN__SQN_RMASK 0xffffffff
#define MPIPE_SQN_CTR_DAT_SQN__SQN_MASK  0xffffffff
#define MPIPE_SQN_CTR_DAT_SQN__SQN_FIELD 0,31


/*
 * Timestamp Calibration.
 * Residue and threshold counters for timestamp to allow calibration of the
 * local clock to nanosecond granularity.  The ratio of INC to THR provides
 * the conversion from the local clock period to nanoseconds.  Whenever this
 * register is written, the TIMESTAMP_RES register must subsequently be
 * written to zero to make the change take place immediately.  Otherwise, the
 * timestamp might take as long as 16535 cycles to stabilize.
 */
#define MPIPE_TIMESTAMP_CAL 0x1060

#define MPIPE_TIMESTAMP_CAL__THR_SHIFT 0
#define MPIPE_TIMESTAMP_CAL__THR_WIDTH 16
#define MPIPE_TIMESTAMP_CAL__THR_RESET_VAL 10000
#define MPIPE_TIMESTAMP_CAL__THR_RMASK 0xffff
#define MPIPE_TIMESTAMP_CAL__THR_MASK  0xffff
#define MPIPE_TIMESTAMP_CAL__THR_FIELD 0,15

#define MPIPE_TIMESTAMP_CAL__INC_SHIFT 32
#define MPIPE_TIMESTAMP_CAL__INC_WIDTH 16
#define MPIPE_TIMESTAMP_CAL__INC_RESET_VAL 10520
#define MPIPE_TIMESTAMP_CAL__INC_RMASK 0xffff
#define MPIPE_TIMESTAMP_CAL__INC_MASK  _64bit(0xffff00000000)
#define MPIPE_TIMESTAMP_CAL__INC_FIELD 32,47


/*
 * Timestamp Nanoseconds Adjust.
 * Provides adjustment of the timestamp nanoseconds value.
 */
#define MPIPE_TIMESTAMP_NS_ADJ 0x1058

#define MPIPE_TIMESTAMP_NS_ADJ__VAL_SHIFT 0
#define MPIPE_TIMESTAMP_NS_ADJ__VAL_WIDTH 31
#define MPIPE_TIMESTAMP_NS_ADJ__VAL_RESET_VAL 0
#define MPIPE_TIMESTAMP_NS_ADJ__VAL_RMASK 0x7fffffff
#define MPIPE_TIMESTAMP_NS_ADJ__VAL_MASK  0x7fffffff
#define MPIPE_TIMESTAMP_NS_ADJ__VAL_FIELD 0,30


/*
 * Timestamp Residue Counter.
 * Residue counter.  Increments by TIMESTAMP_CAL.INC each cycle.  When
 * TIMESTAMP_RES+TIMESTAMP_CAL.INC >= TIMESTAMP_CAL.THR, TIMESTAMP_VAL.NS
 * will increment and the RES will wrap back to RES+INC-THR.  This register
 * should be written to zero after any changes to teh INC/THR values.
 */
#define MPIPE_TIMESTAMP_RES 0x1068

#define MPIPE_TIMESTAMP_RES__TIMESTAMP_RES_SHIFT 0
#define MPIPE_TIMESTAMP_RES__TIMESTAMP_RES_WIDTH 17
#define MPIPE_TIMESTAMP_RES__TIMESTAMP_RES_RESET_VAL 0
#define MPIPE_TIMESTAMP_RES__TIMESTAMP_RES_RMASK 0x1ffff
#define MPIPE_TIMESTAMP_RES__TIMESTAMP_RES_MASK  0x1ffff
#define MPIPE_TIMESTAMP_RES__TIMESTAMP_RES_FIELD 0,16


/*
 * Timestamp Residual Adjust.
 * Provides temporary adjustment of the residual value.
 */
#define MPIPE_TIMESTAMP_RES_ADJ 0x1070

#define MPIPE_TIMESTAMP_RES_ADJ__TMP_THR_SHIFT 0
#define MPIPE_TIMESTAMP_RES_ADJ__TMP_THR_WIDTH 16
#define MPIPE_TIMESTAMP_RES_ADJ__TMP_THR_RESET_VAL 0
#define MPIPE_TIMESTAMP_RES_ADJ__TMP_THR_RMASK 0xffff
#define MPIPE_TIMESTAMP_RES_ADJ__TMP_THR_MASK  0xffff
#define MPIPE_TIMESTAMP_RES_ADJ__TMP_THR_FIELD 0,15

#define MPIPE_TIMESTAMP_RES_ADJ__CNT_SHIFT 32
#define MPIPE_TIMESTAMP_RES_ADJ__CNT_WIDTH 16
#define MPIPE_TIMESTAMP_RES_ADJ__CNT_RESET_VAL 0
#define MPIPE_TIMESTAMP_RES_ADJ__CNT_RMASK 0xffff
#define MPIPE_TIMESTAMP_RES_ADJ__CNT_MASK  _64bit(0xffff00000000)
#define MPIPE_TIMESTAMP_RES_ADJ__CNT_FIELD 32,47


/*
 * Timestamp Value.
 * Current timestamp value measured in seconds and nanoseconds.  The
 * timestamp may be written by software or adjusted using the
 * TIMESTAMP_NS_ADJ register.
 */
#define MPIPE_TIMESTAMP_VAL 0x1050

#define MPIPE_TIMESTAMP_VAL__NS_SHIFT 0
#define MPIPE_TIMESTAMP_VAL__NS_WIDTH 30
#define MPIPE_TIMESTAMP_VAL__NS_RESET_VAL 0
#define MPIPE_TIMESTAMP_VAL__NS_RMASK 0x3fffffff
#define MPIPE_TIMESTAMP_VAL__NS_MASK  0x3fffffff
#define MPIPE_TIMESTAMP_VAL__NS_FIELD 0,29

#define MPIPE_TIMESTAMP_VAL__SEC_SHIFT 32
#define MPIPE_TIMESTAMP_VAL__SEC_WIDTH 32
#define MPIPE_TIMESTAMP_VAL__SEC_RESET_VAL 0
#define MPIPE_TIMESTAMP_VAL__SEC_RMASK 0xffffffff
#define MPIPE_TIMESTAMP_VAL__SEC_MASK  _64bit(0xffffffff00000000)
#define MPIPE_TIMESTAMP_VAL__SEC_FIELD 32,63


/*
 * TLB Control.
 * TLB Controls.
 */
#define MPIPE_TLB_CTL 0x3ff8

#define MPIPE_TLB_CTL__MTLB_FLUSH_SHIFT 0
#define MPIPE_TLB_CTL__MTLB_FLUSH_WIDTH 1
#define MPIPE_TLB_CTL__MTLB_FLUSH_RESET_VAL 0
#define MPIPE_TLB_CTL__MTLB_FLUSH_RMASK 0x1
#define MPIPE_TLB_CTL__MTLB_FLUSH_MASK  0x1
#define MPIPE_TLB_CTL__MTLB_FLUSH_FIELD 0,0


/*
 * TLB eDMA Exception.
 * Captures exception information on edma TLB misses.  On an eDMA TLB miss,
 * the ring generating the miss will be frozen.  Software must provide a
 * valid translation and restart the ring.
 */
#define MPIPE_TLB_EDMA_EXC 0x0618

#define MPIPE_TLB_EDMA_EXC__LRU_SHIFT 0
#define MPIPE_TLB_EDMA_EXC__LRU_WIDTH 4
#define MPIPE_TLB_EDMA_EXC__LRU_RESET_VAL 0
#define MPIPE_TLB_EDMA_EXC__LRU_RMASK 0xf
#define MPIPE_TLB_EDMA_EXC__LRU_MASK  0xf
#define MPIPE_TLB_EDMA_EXC__LRU_FIELD 0,3

#define MPIPE_TLB_EDMA_EXC__VA_SHIFT 12
#define MPIPE_TLB_EDMA_EXC__VA_WIDTH 30
#define MPIPE_TLB_EDMA_EXC__VA_RESET_VAL 0
#define MPIPE_TLB_EDMA_EXC__VA_RMASK 0x3fffffff
#define MPIPE_TLB_EDMA_EXC__VA_MASK  _64bit(0x3fffffff000)
#define MPIPE_TLB_EDMA_EXC__VA_FIELD 12,41

#define MPIPE_TLB_EDMA_EXC__ASID_SHIFT 48
#define MPIPE_TLB_EDMA_EXC__ASID_WIDTH 5
#define MPIPE_TLB_EDMA_EXC__ASID_RESET_VAL 0
#define MPIPE_TLB_EDMA_EXC__ASID_RMASK 0x1f
#define MPIPE_TLB_EDMA_EXC__ASID_MASK  _64bit(0x1f000000000000)
#define MPIPE_TLB_EDMA_EXC__ASID_FIELD 48,52

#define MPIPE_TLB_EDMA_EXC__RING_SHIFT 56
#define MPIPE_TLB_EDMA_EXC__RING_WIDTH 6
#define MPIPE_TLB_EDMA_EXC__RING_RESET_VAL 0
#define MPIPE_TLB_EDMA_EXC__RING_RMASK 0x3f
#define MPIPE_TLB_EDMA_EXC__RING_MASK  _64bit(0x3f00000000000000)
#define MPIPE_TLB_EDMA_EXC__RING_FIELD 56,61


/*
 * TLB Entry VPN and PFN Data.
 * Read/Write data for the TLB entry's VPN and PFN.  When written, the
 * associated entry's VLD bit will be cleared.
 */
#define MPIPE_TLB_ENTRY_ADDR__FIRST_WORD 0x4000
#define MPIPE_TLB_ENTRY_ADDR__LAST_WORD 0x5ff0

#define MPIPE_TLB_ENTRY_ADDR__PFN_SHIFT 0
#define MPIPE_TLB_ENTRY_ADDR__PFN_WIDTH 30
#define MPIPE_TLB_ENTRY_ADDR__PFN_RESET_VAL 0
#define MPIPE_TLB_ENTRY_ADDR__PFN_RMASK 0x3fffffff
#define MPIPE_TLB_ENTRY_ADDR__PFN_MASK  0x3fffffff
#define MPIPE_TLB_ENTRY_ADDR__PFN_FIELD 0,29

#define MPIPE_TLB_ENTRY_ADDR__VPN_SHIFT 32
#define MPIPE_TLB_ENTRY_ADDR__VPN_WIDTH 30
#define MPIPE_TLB_ENTRY_ADDR__VPN_RESET_VAL 0
#define MPIPE_TLB_ENTRY_ADDR__VPN_RMASK 0x3fffffff
#define MPIPE_TLB_ENTRY_ADDR__VPN_MASK  _64bit(0x3fffffff00000000)
#define MPIPE_TLB_ENTRY_ADDR__VPN_FIELD 32,61


/*
 * TLB Entry Attributes.
 * Read/Write data for the TLB entry's ATTR bits.  When written, the TLB
 * entry will be updated.  TLB_ENTRY_ADDR must always be written before this
 * register.  Writing to this register without first writing the
 * TLB_ENTRY_ADDR register causes unpredictable behavior including memory
 * corruption.
 */
#define MPIPE_TLB_ENTRY_ATTR__FIRST_WORD 0x4008
#define MPIPE_TLB_ENTRY_ATTR__LAST_WORD 0x5ff8

#define MPIPE_TLB_ENTRY_ATTR__VLD_SHIFT 0
#define MPIPE_TLB_ENTRY_ATTR__VLD_WIDTH 1
#define MPIPE_TLB_ENTRY_ATTR__VLD_RMASK 0x1
#define MPIPE_TLB_ENTRY_ATTR__VLD_MASK  0x1
#define MPIPE_TLB_ENTRY_ATTR__VLD_FIELD 0,0

#define MPIPE_TLB_ENTRY_ATTR__PS_SHIFT 3
#define MPIPE_TLB_ENTRY_ATTR__PS_WIDTH 5
#define MPIPE_TLB_ENTRY_ATTR__PS_RESET_VAL 30
#define MPIPE_TLB_ENTRY_ATTR__PS_RMASK 0x1f
#define MPIPE_TLB_ENTRY_ATTR__PS_MASK  0xf8
#define MPIPE_TLB_ENTRY_ATTR__PS_FIELD 3,7

#define MPIPE_TLB_ENTRY_ATTR__HOME_MAPPING_SHIFT 20
#define MPIPE_TLB_ENTRY_ATTR__HOME_MAPPING_WIDTH 1
#define MPIPE_TLB_ENTRY_ATTR__HOME_MAPPING_RESET_VAL 1
#define MPIPE_TLB_ENTRY_ATTR__HOME_MAPPING_RMASK 0x1
#define MPIPE_TLB_ENTRY_ATTR__HOME_MAPPING_MASK  0x100000
#define MPIPE_TLB_ENTRY_ATTR__HOME_MAPPING_FIELD 20,20

#define MPIPE_TLB_ENTRY_ATTR__PIN_SHIFT 23
#define MPIPE_TLB_ENTRY_ATTR__PIN_WIDTH 1
#define MPIPE_TLB_ENTRY_ATTR__PIN_RESET_VAL 0
#define MPIPE_TLB_ENTRY_ATTR__PIN_RMASK 0x1
#define MPIPE_TLB_ENTRY_ATTR__PIN_MASK  0x800000
#define MPIPE_TLB_ENTRY_ATTR__PIN_FIELD 23,23

#define MPIPE_TLB_ENTRY_ATTR__NT_HINT_SHIFT 24
#define MPIPE_TLB_ENTRY_ATTR__NT_HINT_WIDTH 1
#define MPIPE_TLB_ENTRY_ATTR__NT_HINT_RESET_VAL 0
#define MPIPE_TLB_ENTRY_ATTR__NT_HINT_RMASK 0x1
#define MPIPE_TLB_ENTRY_ATTR__NT_HINT_MASK  0x1000000
#define MPIPE_TLB_ENTRY_ATTR__NT_HINT_FIELD 24,24

#define MPIPE_TLB_ENTRY_ATTR__LOC_Y_OR_OFFSET_SHIFT 26
#define MPIPE_TLB_ENTRY_ATTR__LOC_Y_OR_OFFSET_WIDTH 4
#define MPIPE_TLB_ENTRY_ATTR__LOC_Y_OR_OFFSET_RESET_VAL 0
#define MPIPE_TLB_ENTRY_ATTR__LOC_Y_OR_OFFSET_RMASK 0xf
#define MPIPE_TLB_ENTRY_ATTR__LOC_Y_OR_OFFSET_MASK  0x3c000000
#define MPIPE_TLB_ENTRY_ATTR__LOC_Y_OR_OFFSET_FIELD 26,29

#define MPIPE_TLB_ENTRY_ATTR__LOC_X_OR_MASK_SHIFT 37
#define MPIPE_TLB_ENTRY_ATTR__LOC_X_OR_MASK_WIDTH 4
#define MPIPE_TLB_ENTRY_ATTR__LOC_X_OR_MASK_RESET_VAL 0
#define MPIPE_TLB_ENTRY_ATTR__LOC_X_OR_MASK_RMASK 0xf
#define MPIPE_TLB_ENTRY_ATTR__LOC_X_OR_MASK_MASK  _64bit(0x1e000000000)
#define MPIPE_TLB_ENTRY_ATTR__LOC_X_OR_MASK_FIELD 37,40

#define MPIPE_TLB_ENTRY_ATTR__LRU_SHIFT 48
#define MPIPE_TLB_ENTRY_ATTR__LRU_WIDTH 4
#define MPIPE_TLB_ENTRY_ATTR__LRU_RESET_VAL 0
#define MPIPE_TLB_ENTRY_ATTR__LRU_RMASK 0xf
#define MPIPE_TLB_ENTRY_ATTR__LRU_MASK  _64bit(0xf000000000000)
#define MPIPE_TLB_ENTRY_ATTR__LRU_FIELD 48,51


/*
 * TLB iDMA Exception.
 * Captures exception information on iDMA TLB misses.  On an iDMA TLB miss,
 * the DMA engine will stall.  Software must provide a valid translation or
 * set the DISC_ON_FAULT mode in the MPIPE_IDMA_CTL register to allow the DMA
 * engine to make forward progress.
 */
#define MPIPE_TLB_IDMA_EXC 0x0610

#define MPIPE_TLB_IDMA_EXC__LRU_SHIFT 0
#define MPIPE_TLB_IDMA_EXC__LRU_WIDTH 4
#define MPIPE_TLB_IDMA_EXC__LRU_RESET_VAL 0
#define MPIPE_TLB_IDMA_EXC__LRU_RMASK 0xf
#define MPIPE_TLB_IDMA_EXC__LRU_MASK  0xf
#define MPIPE_TLB_IDMA_EXC__LRU_FIELD 0,3

#define MPIPE_TLB_IDMA_EXC__VA_SHIFT 12
#define MPIPE_TLB_IDMA_EXC__VA_WIDTH 30
#define MPIPE_TLB_IDMA_EXC__VA_RESET_VAL 0
#define MPIPE_TLB_IDMA_EXC__VA_RMASK 0x3fffffff
#define MPIPE_TLB_IDMA_EXC__VA_MASK  _64bit(0x3fffffff000)
#define MPIPE_TLB_IDMA_EXC__VA_FIELD 12,41

#define MPIPE_TLB_IDMA_EXC__ASID_SHIFT 48
#define MPIPE_TLB_IDMA_EXC__ASID_WIDTH 5
#define MPIPE_TLB_IDMA_EXC__ASID_RESET_VAL 0
#define MPIPE_TLB_IDMA_EXC__ASID_RMASK 0x1f
#define MPIPE_TLB_IDMA_EXC__ASID_MASK  _64bit(0x1f000000000000)
#define MPIPE_TLB_IDMA_EXC__ASID_FIELD 48,52


/*
 * TLB Table.
 * TLB table.  This table consists of 512 TLB entries.  Each entry is two
 * registers: TLB_ENTRY_ADDR and TLB_ENTRY_ATTR.  This register definition is
 * a description of the address as opposed to the registers themselves.
 */
#define MPIPE_TLB_TABLE__FIRST_WORD 0x4000
#define MPIPE_TLB_TABLE__LAST_WORD 0x5ff8

#define MPIPE_TLB_TABLE__IS_ATTR_SHIFT 3
#define MPIPE_TLB_TABLE__IS_ATTR_WIDTH 1
#define MPIPE_TLB_TABLE__IS_ATTR_RESET_VAL 0
#define MPIPE_TLB_TABLE__IS_ATTR_RMASK 0x1
#define MPIPE_TLB_TABLE__IS_ATTR_MASK  0x8
#define MPIPE_TLB_TABLE__IS_ATTR_FIELD 3,3

#define MPIPE_TLB_TABLE__ENTRY_SHIFT 4
#define MPIPE_TLB_TABLE__ENTRY_WIDTH 4
#define MPIPE_TLB_TABLE__ENTRY_RESET_VAL 0
#define MPIPE_TLB_TABLE__ENTRY_RMASK 0xf
#define MPIPE_TLB_TABLE__ENTRY_MASK  0xf0
#define MPIPE_TLB_TABLE__ENTRY_FIELD 4,7

#define MPIPE_TLB_TABLE__ASID_SHIFT 8
#define MPIPE_TLB_TABLE__ASID_WIDTH 5
#define MPIPE_TLB_TABLE__ASID_RESET_VAL 0
#define MPIPE_TLB_TABLE__ASID_RMASK 0x1f
#define MPIPE_TLB_TABLE__ASID_MASK  0x1f00
#define MPIPE_TLB_TABLE__ASID_FIELD 8,12



#endif /* !defined(__ARCH_MPIPE_DEF_H__) */

/*
 * Copyright 2013 Tilera Corporation. All Rights Reserved.
 *
 *   This program is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU General Public License
 *   as published by the Free Software Foundation, version 2.
 *
 *   This program is distributed in the hope that it will be useful, but
 *   WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or
 *   NON INFRINGEMENT.  See the GNU General Public License for
 *   more details.
 */

#ifndef __ARCH_UART_DEF_H__
#define __ARCH_UART_DEF_H__

#ifdef __ASSEMBLER__
#define _64bit(x) x
#else /* __ASSEMBLER__ */
#ifdef __tile__
#define _64bit(x) x ## UL
#else /* __tile__ */
#define _64bit(x) x ## ULL
#endif /* __tile__ */
#endif /* __ASSEMBLER */





/* Baseline Control. */
#define UART_BASELINE_CTL 0x0100

#define UART_BASELINE_CTL__ENABLE_SHIFT 0
#define UART_BASELINE_CTL__ENABLE_WIDTH 1
#define UART_BASELINE_CTL__ENABLE_RESET_VAL 1
#define UART_BASELINE_CTL__ENABLE_RMASK 0x1
#define UART_BASELINE_CTL__ENABLE_MASK  0x1
#define UART_BASELINE_CTL__ENABLE_FIELD 0,0

#define UART_BASELINE_CTL__FREEZE_SHIFT 1
#define UART_BASELINE_CTL__FREEZE_WIDTH 1
#define UART_BASELINE_CTL__FREEZE_RESET_VAL 0
#define UART_BASELINE_CTL__FREEZE_RMASK 0x1
#define UART_BASELINE_CTL__FREEZE_MASK  0x2
#define UART_BASELINE_CTL__FREEZE_FIELD 1,1


/* Boot Revision ID. */
#define UART_BOOT_REVISION_ID 0x0120

#define UART_BOOT_REVISION_ID__BOOT_REV_ID_SHIFT 0
#define UART_BOOT_REVISION_ID__BOOT_REV_ID_WIDTH 8
#define UART_BOOT_REVISION_ID__BOOT_REV_ID_RESET_VAL 0
#define UART_BOOT_REVISION_ID__BOOT_REV_ID_RMASK 0xff
#define UART_BOOT_REVISION_ID__BOOT_REV_ID_MASK  0xff
#define UART_BOOT_REVISION_ID__BOOT_REV_ID_FIELD 0,7


/* Buffer Threshold. */
#define UART_BUFFER_THRESHOLD 0x0130

#define UART_BUFFER_THRESHOLD__RFIFO_AFULL_SHIFT 0
#define UART_BUFFER_THRESHOLD__RFIFO_AFULL_WIDTH 9
#define UART_BUFFER_THRESHOLD__RFIFO_AFULL_RESET_VAL 16
#define UART_BUFFER_THRESHOLD__RFIFO_AFULL_RMASK 0x1ff
#define UART_BUFFER_THRESHOLD__RFIFO_AFULL_MASK  0x1ff
#define UART_BUFFER_THRESHOLD__RFIFO_AFULL_FIELD 0,8

#define UART_BUFFER_THRESHOLD__TFIFO_AEMPTY_SHIFT 16
#define UART_BUFFER_THRESHOLD__TFIFO_AEMPTY_WIDTH 9
#define UART_BUFFER_THRESHOLD__TFIFO_AEMPTY_RESET_VAL 2
#define UART_BUFFER_THRESHOLD__TFIFO_AEMPTY_RMASK 0x1ff
#define UART_BUFFER_THRESHOLD__TFIFO_AEMPTY_MASK  0x1ff0000
#define UART_BUFFER_THRESHOLD__TFIFO_AEMPTY_FIELD 16,24


/* Clock Count. */
#define UART_CLOCK_COUNT 0x0038

#define UART_CLOCK_COUNT__RUN_SHIFT 0
#define UART_CLOCK_COUNT__RUN_WIDTH 1
#define UART_CLOCK_COUNT__RUN_RESET_VAL 0
#define UART_CLOCK_COUNT__RUN_RMASK 0x1
#define UART_CLOCK_COUNT__RUN_MASK  0x1
#define UART_CLOCK_COUNT__RUN_FIELD 0,0

#define UART_CLOCK_COUNT__COUNT_SHIFT 1
#define UART_CLOCK_COUNT__COUNT_WIDTH 15
#define UART_CLOCK_COUNT__COUNT_RESET_VAL 0
#define UART_CLOCK_COUNT__COUNT_RMASK 0x7fff
#define UART_CLOCK_COUNT__COUNT_MASK  0xfffe
#define UART_CLOCK_COUNT__COUNT_FIELD 1,15


/*
 * Device Control.
 * This register provides general device control.
 */
#define UART_DEV_CTL 0x0008

#define UART_DEV_CTL__RDN_ROUTE_ORDER_SHIFT 2
#define UART_DEV_CTL__RDN_ROUTE_ORDER_WIDTH 1
#define UART_DEV_CTL__RDN_ROUTE_ORDER_RESET_VAL 1
#define UART_DEV_CTL__RDN_ROUTE_ORDER_RMASK 0x1
#define UART_DEV_CTL__RDN_ROUTE_ORDER_MASK  0x4
#define UART_DEV_CTL__RDN_ROUTE_ORDER_FIELD 2,2

#define UART_DEV_CTL__SDN_ROUTE_ORDER_SHIFT 3
#define UART_DEV_CTL__SDN_ROUTE_ORDER_WIDTH 1
#define UART_DEV_CTL__SDN_ROUTE_ORDER_RESET_VAL 0
#define UART_DEV_CTL__SDN_ROUTE_ORDER_RMASK 0x1
#define UART_DEV_CTL__SDN_ROUTE_ORDER_MASK  0x8
#define UART_DEV_CTL__SDN_ROUTE_ORDER_FIELD 3,3


/*
 * Device Info.
 * This register provides general information about the device attached to
 * this port and channel.
 */
#define UART_DEV_INFO 0x0000

#define UART_DEV_INFO__TYPE_SHIFT 0
#define UART_DEV_INFO__TYPE_WIDTH 12
#define UART_DEV_INFO__TYPE_RESET_VAL 40
#define UART_DEV_INFO__TYPE_RMASK 0xfff
#define UART_DEV_INFO__TYPE_MASK  0xfff
#define UART_DEV_INFO__TYPE_FIELD 0,11
#define UART_DEV_INFO__TYPE_VAL_PCIE 0x1
#define UART_DEV_INFO__TYPE_VAL_GBE 0x10
#define UART_DEV_INFO__TYPE_VAL_XGBE 0x11
#define UART_DEV_INFO__TYPE_VAL_MPIPE 0x13
#define UART_DEV_INFO__TYPE_VAL_TRIO 0x14
#define UART_DEV_INFO__TYPE_VAL_CRYPTO 0x16
#define UART_DEV_INFO__TYPE_VAL_COMPRESSION 0x18
#define UART_DEV_INFO__TYPE_VAL_GPIO 0x20
#define UART_DEV_INFO__TYPE_VAL_RSHIM 0x21
#define UART_DEV_INFO__TYPE_VAL_SROM 0x22
#define UART_DEV_INFO__TYPE_VAL_I2CM 0x25
#define UART_DEV_INFO__TYPE_VAL_I2CS 0x26
#define UART_DEV_INFO__TYPE_VAL_UART 0x28
#define UART_DEV_INFO__TYPE_VAL_USBH 0x29
#define UART_DEV_INFO__TYPE_VAL_USBS 0x2a
#define UART_DEV_INFO__TYPE_VAL_USBHS 0x2b
#define UART_DEV_INFO__TYPE_VAL_DDR2 0x40
#define UART_DEV_INFO__TYPE_VAL_DDR3 0x42
#define UART_DEV_INFO__TYPE_VAL_DIAG_SNP 0x80
#define UART_DEV_INFO__TYPE_VAL_IPIC 0x81

#define UART_DEV_INFO__DEVICE_REV_SHIFT 16
#define UART_DEV_INFO__DEVICE_REV_WIDTH 8
#define UART_DEV_INFO__DEVICE_REV_RMASK 0xff
#define UART_DEV_INFO__DEVICE_REV_MASK  0xff0000
#define UART_DEV_INFO__DEVICE_REV_FIELD 16,23

#define UART_DEV_INFO__REGISTER_REV_SHIFT 24
#define UART_DEV_INFO__REGISTER_REV_WIDTH 4
#define UART_DEV_INFO__REGISTER_REV_RESET_VAL 0
#define UART_DEV_INFO__REGISTER_REV_RMASK 0xf
#define UART_DEV_INFO__REGISTER_REV_MASK  0xf000000
#define UART_DEV_INFO__REGISTER_REV_FIELD 24,27

#define UART_DEV_INFO__INSTANCE_SHIFT 32
#define UART_DEV_INFO__INSTANCE_WIDTH 4
#define UART_DEV_INFO__INSTANCE_RMASK 0xf
#define UART_DEV_INFO__INSTANCE_MASK  _64bit(0xf00000000)
#define UART_DEV_INFO__INSTANCE_FIELD 32,35


/* Divisor. */
#define UART_DIVISOR 0x0158

#define UART_DIVISOR__DIVISOR_SHIFT 0
#define UART_DIVISOR__DIVISOR_WIDTH 12
#define UART_DIVISOR__DIVISOR_RESET_VAL 68
#define UART_DIVISOR__DIVISOR_RMASK 0xfff
#define UART_DIVISOR__DIVISOR_MASK  0xfff
#define UART_DIVISOR__DIVISOR_FIELD 0,11


/* Electrical Control. */
#define UART_ELECTRICAL_CONTROL 0x0118

#define UART_ELECTRICAL_CONTROL__ELEC_STRENGTH_SHIFT 0
#define UART_ELECTRICAL_CONTROL__ELEC_STRENGTH_WIDTH 3
#define UART_ELECTRICAL_CONTROL__ELEC_STRENGTH_RESET_VAL 2
#define UART_ELECTRICAL_CONTROL__ELEC_STRENGTH_RMASK 0x7
#define UART_ELECTRICAL_CONTROL__ELEC_STRENGTH_MASK  0x7
#define UART_ELECTRICAL_CONTROL__ELEC_STRENGTH_FIELD 0,2

#define UART_ELECTRICAL_CONTROL__ELEC_SUSTAIN_SHIFT 3
#define UART_ELECTRICAL_CONTROL__ELEC_SUSTAIN_WIDTH 1
#define UART_ELECTRICAL_CONTROL__ELEC_SUSTAIN_RESET_VAL 0
#define UART_ELECTRICAL_CONTROL__ELEC_SUSTAIN_RMASK 0x1
#define UART_ELECTRICAL_CONTROL__ELEC_SUSTAIN_MASK  0x8
#define UART_ELECTRICAL_CONTROL__ELEC_SUSTAIN_FIELD 3,3

#define UART_ELECTRICAL_CONTROL__ELEC_SLEW_SHIFT 4
#define UART_ELECTRICAL_CONTROL__ELEC_SLEW_WIDTH 2
#define UART_ELECTRICAL_CONTROL__ELEC_SLEW_RESET_VAL 3
#define UART_ELECTRICAL_CONTROL__ELEC_SLEW_RMASK 0x3
#define UART_ELECTRICAL_CONTROL__ELEC_SLEW_MASK  0x30
#define UART_ELECTRICAL_CONTROL__ELEC_SLEW_FIELD 4,5

#define UART_ELECTRICAL_CONTROL__ELEC_PULLUP_SHIFT 6
#define UART_ELECTRICAL_CONTROL__ELEC_PULLUP_WIDTH 1
#define UART_ELECTRICAL_CONTROL__ELEC_PULLUP_RESET_VAL 0
#define UART_ELECTRICAL_CONTROL__ELEC_PULLUP_RMASK 0x1
#define UART_ELECTRICAL_CONTROL__ELEC_PULLUP_MASK  0x40
#define UART_ELECTRICAL_CONTROL__ELEC_PULLUP_FIELD 6,6

#define UART_ELECTRICAL_CONTROL__ELEC_PULLDOWN_SHIFT 7
#define UART_ELECTRICAL_CONTROL__ELEC_PULLDOWN_WIDTH 1
#define UART_ELECTRICAL_CONTROL__ELEC_PULLDOWN_RESET_VAL 0
#define UART_ELECTRICAL_CONTROL__ELEC_PULLDOWN_RMASK 0x1
#define UART_ELECTRICAL_CONTROL__ELEC_PULLDOWN_MASK  0x80
#define UART_ELECTRICAL_CONTROL__ELEC_PULLDOWN_FIELD 7,7

#define UART_ELECTRICAL_CONTROL__ELEC_SCHM_SHIFT 8
#define UART_ELECTRICAL_CONTROL__ELEC_SCHM_WIDTH 1
#define UART_ELECTRICAL_CONTROL__ELEC_SCHM_RESET_VAL 0
#define UART_ELECTRICAL_CONTROL__ELEC_SCHM_RMASK 0x1
#define UART_ELECTRICAL_CONTROL__ELEC_SCHM_MASK  0x100
#define UART_ELECTRICAL_CONTROL__ELEC_SCHM_FIELD 8,8


/* FIFO Count. */
#define UART_FIFO_COUNT 0x0110

#define UART_FIFO_COUNT__RFIFO_COUNT_SHIFT 0
#define UART_FIFO_COUNT__RFIFO_COUNT_WIDTH 9
#define UART_FIFO_COUNT__RFIFO_COUNT_RESET_VAL 0
#define UART_FIFO_COUNT__RFIFO_COUNT_RMASK 0x1ff
#define UART_FIFO_COUNT__RFIFO_COUNT_MASK  0x1ff
#define UART_FIFO_COUNT__RFIFO_COUNT_FIELD 0,8

#define UART_FIFO_COUNT__TFIFO_COUNT_SHIFT 16
#define UART_FIFO_COUNT__TFIFO_COUNT_WIDTH 9
#define UART_FIFO_COUNT__TFIFO_COUNT_RESET_VAL 0
#define UART_FIFO_COUNT__TFIFO_COUNT_RMASK 0x1ff
#define UART_FIFO_COUNT__TFIFO_COUNT_MASK  0x1ff0000
#define UART_FIFO_COUNT__TFIFO_COUNT_FIELD 16,24

#define UART_FIFO_COUNT__WFIFO_COUNT_SHIFT 32
#define UART_FIFO_COUNT__WFIFO_COUNT_WIDTH 3
#define UART_FIFO_COUNT__WFIFO_COUNT_RESET_VAL 0
#define UART_FIFO_COUNT__WFIFO_COUNT_RMASK 0x7
#define UART_FIFO_COUNT__WFIFO_COUNT_MASK  _64bit(0x700000000)
#define UART_FIFO_COUNT__WFIFO_COUNT_FIELD 32,34


/* FLAG. */
#define UART_FLAG 0x0108

#define UART_FLAG__RFIFO_EMPTY_SHIFT 1
#define UART_FLAG__RFIFO_EMPTY_WIDTH 1
#define UART_FLAG__RFIFO_EMPTY_RESET_VAL 1
#define UART_FLAG__RFIFO_EMPTY_RMASK 0x1
#define UART_FLAG__RFIFO_EMPTY_MASK  0x2
#define UART_FLAG__RFIFO_EMPTY_FIELD 1,1

#define UART_FLAG__WFIFO_EMPTY_SHIFT 2
#define UART_FLAG__WFIFO_EMPTY_WIDTH 1
#define UART_FLAG__WFIFO_EMPTY_RESET_VAL 1
#define UART_FLAG__WFIFO_EMPTY_RMASK 0x1
#define UART_FLAG__WFIFO_EMPTY_MASK  0x4
#define UART_FLAG__WFIFO_EMPTY_FIELD 2,2

#define UART_FLAG__TFIFO_EMPTY_SHIFT 3
#define UART_FLAG__TFIFO_EMPTY_WIDTH 1
#define UART_FLAG__TFIFO_EMPTY_RESET_VAL 1
#define UART_FLAG__TFIFO_EMPTY_RMASK 0x1
#define UART_FLAG__TFIFO_EMPTY_MASK  0x8
#define UART_FLAG__TFIFO_EMPTY_FIELD 3,3

#define UART_FLAG__RFIFO_FULL_SHIFT 4
#define UART_FLAG__RFIFO_FULL_WIDTH 1
#define UART_FLAG__RFIFO_FULL_RESET_VAL 0
#define UART_FLAG__RFIFO_FULL_RMASK 0x1
#define UART_FLAG__RFIFO_FULL_MASK  0x10
#define UART_FLAG__RFIFO_FULL_FIELD 4,4

#define UART_FLAG__WFIFO_FULL_SHIFT 5
#define UART_FLAG__WFIFO_FULL_WIDTH 1
#define UART_FLAG__WFIFO_FULL_RESET_VAL 0
#define UART_FLAG__WFIFO_FULL_RMASK 0x1
#define UART_FLAG__WFIFO_FULL_MASK  0x20
#define UART_FLAG__WFIFO_FULL_FIELD 5,5

#define UART_FLAG__TFIFO_FULL_SHIFT 6
#define UART_FLAG__TFIFO_FULL_WIDTH 1
#define UART_FLAG__TFIFO_FULL_RESET_VAL 0
#define UART_FLAG__TFIFO_FULL_RMASK 0x1
#define UART_FLAG__TFIFO_FULL_MASK  0x40
#define UART_FLAG__TFIFO_FULL_FIELD 6,6


/*
 * Interrupt Vector Mask.
 * Each bit in this register corresponds to a specific interrupt. When set,
 * the associated interrupt will not be dispatched.
 */
#define UART_INTERRUPT_MASK 0x0208

#define UART_INTERRUPT_MASK__RDAT_ERR_SHIFT 0
#define UART_INTERRUPT_MASK__RDAT_ERR_WIDTH 1
#define UART_INTERRUPT_MASK__RDAT_ERR_RESET_VAL 1
#define UART_INTERRUPT_MASK__RDAT_ERR_RMASK 0x1
#define UART_INTERRUPT_MASK__RDAT_ERR_MASK  0x1
#define UART_INTERRUPT_MASK__RDAT_ERR_FIELD 0,0

#define UART_INTERRUPT_MASK__WDAT_ERR_SHIFT 1
#define UART_INTERRUPT_MASK__WDAT_ERR_WIDTH 1
#define UART_INTERRUPT_MASK__WDAT_ERR_RESET_VAL 1
#define UART_INTERRUPT_MASK__WDAT_ERR_RMASK 0x1
#define UART_INTERRUPT_MASK__WDAT_ERR_MASK  0x2
#define UART_INTERRUPT_MASK__WDAT_ERR_FIELD 1,1

#define UART_INTERRUPT_MASK__FRAME_ERR_SHIFT 2
#define UART_INTERRUPT_MASK__FRAME_ERR_WIDTH 1
#define UART_INTERRUPT_MASK__FRAME_ERR_RESET_VAL 1
#define UART_INTERRUPT_MASK__FRAME_ERR_RMASK 0x1
#define UART_INTERRUPT_MASK__FRAME_ERR_MASK  0x4
#define UART_INTERRUPT_MASK__FRAME_ERR_FIELD 2,2

#define UART_INTERRUPT_MASK__PARITY_ERR_SHIFT 3
#define UART_INTERRUPT_MASK__PARITY_ERR_WIDTH 1
#define UART_INTERRUPT_MASK__PARITY_ERR_RESET_VAL 1
#define UART_INTERRUPT_MASK__PARITY_ERR_RMASK 0x1
#define UART_INTERRUPT_MASK__PARITY_ERR_MASK  0x8
#define UART_INTERRUPT_MASK__PARITY_ERR_FIELD 3,3

#define UART_INTERRUPT_MASK__RFIFO_OVERFLOW_SHIFT 4
#define UART_INTERRUPT_MASK__RFIFO_OVERFLOW_WIDTH 1
#define UART_INTERRUPT_MASK__RFIFO_OVERFLOW_RESET_VAL 1
#define UART_INTERRUPT_MASK__RFIFO_OVERFLOW_RMASK 0x1
#define UART_INTERRUPT_MASK__RFIFO_OVERFLOW_MASK  0x10
#define UART_INTERRUPT_MASK__RFIFO_OVERFLOW_FIELD 4,4

#define UART_INTERRUPT_MASK__RFIFO_AFULL_SHIFT 5
#define UART_INTERRUPT_MASK__RFIFO_AFULL_WIDTH 1
#define UART_INTERRUPT_MASK__RFIFO_AFULL_RESET_VAL 1
#define UART_INTERRUPT_MASK__RFIFO_AFULL_RMASK 0x1
#define UART_INTERRUPT_MASK__RFIFO_AFULL_MASK  0x20
#define UART_INTERRUPT_MASK__RFIFO_AFULL_FIELD 5,5

#define UART_INTERRUPT_MASK__TFIFO_RE_SHIFT 7
#define UART_INTERRUPT_MASK__TFIFO_RE_WIDTH 1
#define UART_INTERRUPT_MASK__TFIFO_RE_RESET_VAL 1
#define UART_INTERRUPT_MASK__TFIFO_RE_RMASK 0x1
#define UART_INTERRUPT_MASK__TFIFO_RE_MASK  0x80
#define UART_INTERRUPT_MASK__TFIFO_RE_FIELD 7,7

#define UART_INTERRUPT_MASK__RFIFO_WE_SHIFT 8
#define UART_INTERRUPT_MASK__RFIFO_WE_WIDTH 1
#define UART_INTERRUPT_MASK__RFIFO_WE_RESET_VAL 1
#define UART_INTERRUPT_MASK__RFIFO_WE_RMASK 0x1
#define UART_INTERRUPT_MASK__RFIFO_WE_MASK  0x100
#define UART_INTERRUPT_MASK__RFIFO_WE_FIELD 8,8

#define UART_INTERRUPT_MASK__WFIFO_RE_SHIFT 9
#define UART_INTERRUPT_MASK__WFIFO_RE_WIDTH 1
#define UART_INTERRUPT_MASK__WFIFO_RE_RESET_VAL 1
#define UART_INTERRUPT_MASK__WFIFO_RE_RMASK 0x1
#define UART_INTERRUPT_MASK__WFIFO_RE_MASK  0x200
#define UART_INTERRUPT_MASK__WFIFO_RE_FIELD 9,9

#define UART_INTERRUPT_MASK__RFIFO_ERR_SHIFT 10
#define UART_INTERRUPT_MASK__RFIFO_ERR_WIDTH 1
#define UART_INTERRUPT_MASK__RFIFO_ERR_RESET_VAL 1
#define UART_INTERRUPT_MASK__RFIFO_ERR_RMASK 0x1
#define UART_INTERRUPT_MASK__RFIFO_ERR_MASK  0x400
#define UART_INTERRUPT_MASK__RFIFO_ERR_FIELD 10,10

#define UART_INTERRUPT_MASK__TFIFO_AEMPTY_SHIFT 11
#define UART_INTERRUPT_MASK__TFIFO_AEMPTY_WIDTH 1
#define UART_INTERRUPT_MASK__TFIFO_AEMPTY_RESET_VAL 1
#define UART_INTERRUPT_MASK__TFIFO_AEMPTY_RMASK 0x1
#define UART_INTERRUPT_MASK__TFIFO_AEMPTY_MASK  0x800
#define UART_INTERRUPT_MASK__TFIFO_AEMPTY_FIELD 11,11


/*
 * Interrupt vector, write-one-to-clear.
 * Each bit in this register corresponds to a specific interrupt. Hardware
 * sets the bit when the associated condition has occurred. Writing a 1
 * clears the status bit.
 */
#define UART_INTERRUPT_STATUS 0x0200

#define UART_INTERRUPT_STATUS__RDAT_ERR_SHIFT 0
#define UART_INTERRUPT_STATUS__RDAT_ERR_WIDTH 1
#define UART_INTERRUPT_STATUS__RDAT_ERR_RESET_VAL 0
#define UART_INTERRUPT_STATUS__RDAT_ERR_RMASK 0x1
#define UART_INTERRUPT_STATUS__RDAT_ERR_MASK  0x1
#define UART_INTERRUPT_STATUS__RDAT_ERR_FIELD 0,0

#define UART_INTERRUPT_STATUS__WDAT_ERR_SHIFT 1
#define UART_INTERRUPT_STATUS__WDAT_ERR_WIDTH 1
#define UART_INTERRUPT_STATUS__WDAT_ERR_RESET_VAL 0
#define UART_INTERRUPT_STATUS__WDAT_ERR_RMASK 0x1
#define UART_INTERRUPT_STATUS__WDAT_ERR_MASK  0x2
#define UART_INTERRUPT_STATUS__WDAT_ERR_FIELD 1,1

#define UART_INTERRUPT_STATUS__FRAME_ERR_SHIFT 2
#define UART_INTERRUPT_STATUS__FRAME_ERR_WIDTH 1
#define UART_INTERRUPT_STATUS__FRAME_ERR_RESET_VAL 0
#define UART_INTERRUPT_STATUS__FRAME_ERR_RMASK 0x1
#define UART_INTERRUPT_STATUS__FRAME_ERR_MASK  0x4
#define UART_INTERRUPT_STATUS__FRAME_ERR_FIELD 2,2

#define UART_INTERRUPT_STATUS__PARITY_ERR_SHIFT 3
#define UART_INTERRUPT_STATUS__PARITY_ERR_WIDTH 1
#define UART_INTERRUPT_STATUS__PARITY_ERR_RESET_VAL 0
#define UART_INTERRUPT_STATUS__PARITY_ERR_RMASK 0x1
#define UART_INTERRUPT_STATUS__PARITY_ERR_MASK  0x8
#define UART_INTERRUPT_STATUS__PARITY_ERR_FIELD 3,3

#define UART_INTERRUPT_STATUS__RFIFO_OVERFLOW_SHIFT 4
#define UART_INTERRUPT_STATUS__RFIFO_OVERFLOW_WIDTH 1
#define UART_INTERRUPT_STATUS__RFIFO_OVERFLOW_RESET_VAL 0
#define UART_INTERRUPT_STATUS__RFIFO_OVERFLOW_RMASK 0x1
#define UART_INTERRUPT_STATUS__RFIFO_OVERFLOW_MASK  0x10
#define UART_INTERRUPT_STATUS__RFIFO_OVERFLOW_FIELD 4,4

#define UART_INTERRUPT_STATUS__RFIFO_AFULL_SHIFT 5
#define UART_INTERRUPT_STATUS__RFIFO_AFULL_WIDTH 1
#define UART_INTERRUPT_STATUS__RFIFO_AFULL_RESET_VAL 0
#define UART_INTERRUPT_STATUS__RFIFO_AFULL_RMASK 0x1
#define UART_INTERRUPT_STATUS__RFIFO_AFULL_MASK  0x20
#define UART_INTERRUPT_STATUS__RFIFO_AFULL_FIELD 5,5

#define UART_INTERRUPT_STATUS__TFIFO_RE_SHIFT 7
#define UART_INTERRUPT_STATUS__TFIFO_RE_WIDTH 1
#define UART_INTERRUPT_STATUS__TFIFO_RE_RESET_VAL 0
#define UART_INTERRUPT_STATUS__TFIFO_RE_RMASK 0x1
#define UART_INTERRUPT_STATUS__TFIFO_RE_MASK  0x80
#define UART_INTERRUPT_STATUS__TFIFO_RE_FIELD 7,7

#define UART_INTERRUPT_STATUS__RFIFO_WE_SHIFT 8
#define UART_INTERRUPT_STATUS__RFIFO_WE_WIDTH 1
#define UART_INTERRUPT_STATUS__RFIFO_WE_RESET_VAL 0
#define UART_INTERRUPT_STATUS__RFIFO_WE_RMASK 0x1
#define UART_INTERRUPT_STATUS__RFIFO_WE_MASK  0x100
#define UART_INTERRUPT_STATUS__RFIFO_WE_FIELD 8,8

#define UART_INTERRUPT_STATUS__WFIFO_RE_SHIFT 9
#define UART_INTERRUPT_STATUS__WFIFO_RE_WIDTH 1
#define UART_INTERRUPT_STATUS__WFIFO_RE_RESET_VAL 0
#define UART_INTERRUPT_STATUS__WFIFO_RE_RMASK 0x1
#define UART_INTERRUPT_STATUS__WFIFO_RE_MASK  0x200
#define UART_INTERRUPT_STATUS__WFIFO_RE_FIELD 9,9

#define UART_INTERRUPT_STATUS__RFIFO_ERR_SHIFT 10
#define UART_INTERRUPT_STATUS__RFIFO_ERR_WIDTH 1
#define UART_INTERRUPT_STATUS__RFIFO_ERR_RESET_VAL 0
#define UART_INTERRUPT_STATUS__RFIFO_ERR_RMASK 0x1
#define UART_INTERRUPT_STATUS__RFIFO_ERR_MASK  0x400
#define UART_INTERRUPT_STATUS__RFIFO_ERR_FIELD 10,10

#define UART_INTERRUPT_STATUS__TFIFO_AEMPTY_SHIFT 11
#define UART_INTERRUPT_STATUS__TFIFO_AEMPTY_WIDTH 1
#define UART_INTERRUPT_STATUS__TFIFO_AEMPTY_RESET_VAL 0
#define UART_INTERRUPT_STATUS__TFIFO_AEMPTY_RMASK 0x1
#define UART_INTERRUPT_STATUS__TFIFO_AEMPTY_MASK  0x800
#define UART_INTERRUPT_STATUS__TFIFO_AEMPTY_FIELD 11,11


/*
 * Memory Info.
 * This register provides information about memory setup required for this
 * device.
 */
#define UART_MEM_INFO 0x0018

#define UART_MEM_INFO__REQ_PORTS_SHIFT 0
#define UART_MEM_INFO__REQ_PORTS_WIDTH 32
#define UART_MEM_INFO__REQ_PORTS_RESET_VAL 32768
#define UART_MEM_INFO__REQ_PORTS_RMASK 0xffffffff
#define UART_MEM_INFO__REQ_PORTS_MASK  0xffffffff
#define UART_MEM_INFO__REQ_PORTS_FIELD 0,31

#define UART_MEM_INFO__NUM_HFH_TBL_SHIFT 32
#define UART_MEM_INFO__NUM_HFH_TBL_WIDTH 4
#define UART_MEM_INFO__NUM_HFH_TBL_RESET_VAL 0
#define UART_MEM_INFO__NUM_HFH_TBL_RMASK 0xf
#define UART_MEM_INFO__NUM_HFH_TBL_MASK  _64bit(0xf00000000)
#define UART_MEM_INFO__NUM_HFH_TBL_FIELD 32,35

#define UART_MEM_INFO__NUM_ASIDS_SHIFT 40
#define UART_MEM_INFO__NUM_ASIDS_WIDTH 8
#define UART_MEM_INFO__NUM_ASIDS_RESET_VAL 0
#define UART_MEM_INFO__NUM_ASIDS_RMASK 0xff
#define UART_MEM_INFO__NUM_ASIDS_MASK  _64bit(0xff0000000000)
#define UART_MEM_INFO__NUM_ASIDS_FIELD 40,47

#define UART_MEM_INFO__NUM_TLB_ENT_SHIFT 48
#define UART_MEM_INFO__NUM_TLB_ENT_WIDTH 8
#define UART_MEM_INFO__NUM_TLB_ENT_RESET_VAL 0
#define UART_MEM_INFO__NUM_TLB_ENT_RMASK 0xff
#define UART_MEM_INFO__NUM_TLB_ENT_MASK  _64bit(0xff000000000000)
#define UART_MEM_INFO__NUM_TLB_ENT_FIELD 48,55


/*
 * MMIO Info.
 * This register provides information about how the physical address is
 * interpreted by the IO device.  The PA is divided into
 * {CHANNEL,SVC_DOM,IGNORED,REGION,OFFSET}.  The values in this register
 * define the size of each of these fields.
 */
#define UART_MMIO_INFO 0x0010

#define UART_MMIO_INFO__CH_WIDTH_SHIFT 0
#define UART_MMIO_INFO__CH_WIDTH_WIDTH 4
#define UART_MMIO_INFO__CH_WIDTH_RESET_VAL 4
#define UART_MMIO_INFO__CH_WIDTH_RMASK 0xf
#define UART_MMIO_INFO__CH_WIDTH_MASK  0xf
#define UART_MMIO_INFO__CH_WIDTH_FIELD 0,3

#define UART_MMIO_INFO__NUM_CH_SHIFT 4
#define UART_MMIO_INFO__NUM_CH_WIDTH 15
#define UART_MMIO_INFO__NUM_CH_RESET_VAL 8
#define UART_MMIO_INFO__NUM_CH_RMASK 0x7fff
#define UART_MMIO_INFO__NUM_CH_MASK  0x7fff0
#define UART_MMIO_INFO__NUM_CH_FIELD 4,18

#define UART_MMIO_INFO__SVC_DOM_WIDTH_SHIFT 19
#define UART_MMIO_INFO__SVC_DOM_WIDTH_WIDTH 3
#define UART_MMIO_INFO__SVC_DOM_WIDTH_RESET_VAL 0
#define UART_MMIO_INFO__SVC_DOM_WIDTH_RMASK 0x7
#define UART_MMIO_INFO__SVC_DOM_WIDTH_MASK  0x380000
#define UART_MMIO_INFO__SVC_DOM_WIDTH_FIELD 19,21

#define UART_MMIO_INFO__NUM_SVC_DOM_SHIFT 22
#define UART_MMIO_INFO__NUM_SVC_DOM_WIDTH 7
#define UART_MMIO_INFO__NUM_SVC_DOM_RESET_VAL 0
#define UART_MMIO_INFO__NUM_SVC_DOM_RMASK 0x7f
#define UART_MMIO_INFO__NUM_SVC_DOM_MASK  0x1fc00000
#define UART_MMIO_INFO__NUM_SVC_DOM_FIELD 22,28

#define UART_MMIO_INFO__OFFSET_WIDTH_SHIFT 29
#define UART_MMIO_INFO__OFFSET_WIDTH_WIDTH 6
#define UART_MMIO_INFO__OFFSET_WIDTH_RESET_VAL 16
#define UART_MMIO_INFO__OFFSET_WIDTH_RMASK 0x3f
#define UART_MMIO_INFO__OFFSET_WIDTH_MASK  _64bit(0x7e0000000)
#define UART_MMIO_INFO__OFFSET_WIDTH_FIELD 29,34

#define UART_MMIO_INFO__REGION_WIDTH_SHIFT 35
#define UART_MMIO_INFO__REGION_WIDTH_WIDTH 6
#define UART_MMIO_INFO__REGION_WIDTH_RESET_VAL 0
#define UART_MMIO_INFO__REGION_WIDTH_RMASK 0x3f
#define UART_MMIO_INFO__REGION_WIDTH_MASK  _64bit(0x1f800000000)
#define UART_MMIO_INFO__REGION_WIDTH_FIELD 35,40


/*
 * Mode.
 * Protocol Mode. Each UART controller receives a static FORCE_PROTOCOL boot
 * strap input. In protocol mode, MODE.BYPASS can be programmed to 1 so that
 * the FORCE_PROTOCOL boot strap will be ignored.  The strapping pin, BYPASS
 * mode, and UART_MODE determine the behavior of the UART interface as
 * follows:
 * <br><br><table border="1">
 * <tr><th>force_protocol (pin)<th>BYPASS<th>UART_MODE<th>Description</tr>
 * <tr><td>0<td>0<td>1<td>Ingress is in interrupt mode</tr>
 * <tr><td>1<td>0<td>1<td>Ingress is in protocol mode</tr>
 * <tr><td>*<td>1<td>1<td>Ingress is in interrupt mode</tr>
 * <tr><td>*<td>1<td>0<td>Ingress is in protocol mode</tr>
 * <tr><td>*<td>0<td>0<td>Ingress is in protocol mode</tr>
 * </table>
 */
#define UART_MODE 0x0150

#define UART_MODE__UART_MODE_SHIFT 0
#define UART_MODE__UART_MODE_WIDTH 1
#define UART_MODE__UART_MODE_RESET_VAL 1
#define UART_MODE__UART_MODE_RMASK 0x1
#define UART_MODE__UART_MODE_MASK  0x1
#define UART_MODE__UART_MODE_FIELD 0,0

#define UART_MODE__BYPASS_SHIFT 1
#define UART_MODE__BYPASS_WIDTH 1
#define UART_MODE__BYPASS_RESET_VAL 0
#define UART_MODE__BYPASS_RMASK 0x1
#define UART_MODE__BYPASS_MASK  0x2
#define UART_MODE__BYPASS_FIELD 1,1


/* Receive Data. */
#define UART_RECEIVE_DATA 0x0148

#define UART_RECEIVE_DATA__RDAT_SHIFT 0
#define UART_RECEIVE_DATA__RDAT_WIDTH 8
#define UART_RECEIVE_DATA__RDAT_RESET_VAL 0
#define UART_RECEIVE_DATA__RDAT_RMASK 0xff
#define UART_RECEIVE_DATA__RDAT_MASK  0xff
#define UART_RECEIVE_DATA__RDAT_FIELD 0,7


/* Scratchpad. */
#define UART_SCRATCHPAD 0x0020

#define UART_SCRATCHPAD__SCRATCHPAD_SHIFT 0
#define UART_SCRATCHPAD__SCRATCHPAD_WIDTH 64
#define UART_SCRATCHPAD__SCRATCHPAD_RESET_VAL 0
#define UART_SCRATCHPAD__SCRATCHPAD_RMASK _64bit(0xffffffffffffffff)
#define UART_SCRATCHPAD__SCRATCHPAD_MASK  _64bit(0xffffffffffffffff)
#define UART_SCRATCHPAD__SCRATCHPAD_FIELD 0,63


/*
 * Semaphore0.
 * Semaphore
 */
#define UART_SEMAPHORE0 0x0028

#define UART_SEMAPHORE0__VAL_SHIFT 0
#define UART_SEMAPHORE0__VAL_WIDTH 1
#define UART_SEMAPHORE0__VAL_RESET_VAL 0
#define UART_SEMAPHORE0__VAL_RMASK 0x1
#define UART_SEMAPHORE0__VAL_MASK  0x1
#define UART_SEMAPHORE0__VAL_FIELD 0,0


/*
 * Semaphore1.
 * Semaphore
 */
#define UART_SEMAPHORE1 0x0030

#define UART_SEMAPHORE1__VAL_SHIFT 0
#define UART_SEMAPHORE1__VAL_WIDTH 1
#define UART_SEMAPHORE1__VAL_RESET_VAL 0
#define UART_SEMAPHORE1__VAL_RMASK 0x1
#define UART_SEMAPHORE1__VAL_MASK  0x1
#define UART_SEMAPHORE1__VAL_FIELD 0,0


/* Transmit Data. */
#define UART_TRANSMIT_DATA 0x0140

#define UART_TRANSMIT_DATA__WDAT_SHIFT 0
#define UART_TRANSMIT_DATA__WDAT_WIDTH 8
#define UART_TRANSMIT_DATA__WDAT_RESET_VAL 0
#define UART_TRANSMIT_DATA__WDAT_RMASK 0xff
#define UART_TRANSMIT_DATA__WDAT_MASK  0xff
#define UART_TRANSMIT_DATA__WDAT_FIELD 0,7


/* Type. */
#define UART_TYPE 0x0160

#define UART_TYPE__SBITS_SHIFT 0
#define UART_TYPE__SBITS_WIDTH 1
#define UART_TYPE__SBITS_RESET_VAL 1
#define UART_TYPE__SBITS_RMASK 0x1
#define UART_TYPE__SBITS_MASK  0x1
#define UART_TYPE__SBITS_FIELD 0,0
#define UART_TYPE__SBITS_VAL_ONE_SBITS 0x0
#define UART_TYPE__SBITS_VAL_TWO_SBITS 0x1

#define UART_TYPE__DBITS_SHIFT 2
#define UART_TYPE__DBITS_WIDTH 1
#define UART_TYPE__DBITS_RESET_VAL 0
#define UART_TYPE__DBITS_RMASK 0x1
#define UART_TYPE__DBITS_MASK  0x4
#define UART_TYPE__DBITS_FIELD 2,2
#define UART_TYPE__DBITS_VAL_EIGHT_DBITS 0x0
#define UART_TYPE__DBITS_VAL_SEVEN_DBITS 0x1

#define UART_TYPE__PTYPE_SHIFT 4
#define UART_TYPE__PTYPE_WIDTH 3
#define UART_TYPE__PTYPE_RESET_VAL 3
#define UART_TYPE__PTYPE_RMASK 0x7
#define UART_TYPE__PTYPE_MASK  0x70
#define UART_TYPE__PTYPE_FIELD 4,6
#define UART_TYPE__PTYPE_VAL_NONE 0x0
#define UART_TYPE__PTYPE_VAL_MARK 0x1
#define UART_TYPE__PTYPE_VAL_SPACE 0x2
#define UART_TYPE__PTYPE_VAL_EVEN 0x3
#define UART_TYPE__PTYPE_VAL_ODD 0x4



#endif /* !defined(__ARCH_UART_DEF_H__) */

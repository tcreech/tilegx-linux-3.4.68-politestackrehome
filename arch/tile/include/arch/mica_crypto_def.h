/*
 * Copyright 2013 Tilera Corporation. All Rights Reserved.
 *
 *   This program is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU General Public License
 *   as published by the Free Software Foundation, version 2.
 *
 *   This program is distributed in the hope that it will be useful, but
 *   WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or
 *   NON INFRINGEMENT.  See the GNU General Public License for
 *   more details.
 */

#ifndef __ARCH_MICA_CRYPTO_DEF_H__
#define __ARCH_MICA_CRYPTO_DEF_H__

#ifdef __ASSEMBLER__
#define _64bit(x) x
#else /* __ASSEMBLER__ */
#ifdef __tile__
#define _64bit(x) x ## UL
#else /* __tile__ */
#define _64bit(x) x ## ULL
#endif /* __tile__ */
#endif /* __ASSEMBLER */





/*
 * MiCA Address Space.
 * The MMIO physical address space for MiCA configuration registers is
 * described below.  This is a general description of the MMIO space as
 * opposed to a register description
 */
#define MICA_CRYPTO_ADDRESS_SPACE__FIRST_WORD 0x0000
#define MICA_CRYPTO_ADDRESS_SPACE__LAST_WORD 0x3fffff8

#define MICA_CRYPTO_ADDRESS_SPACE__OFFSET_SHIFT 0
#define MICA_CRYPTO_ADDRESS_SPACE__OFFSET_WIDTH 24
#define MICA_CRYPTO_ADDRESS_SPACE__OFFSET_RESET_VAL 0
#define MICA_CRYPTO_ADDRESS_SPACE__OFFSET_RMASK 0xffffff
#define MICA_CRYPTO_ADDRESS_SPACE__OFFSET_MASK  0xffffff
#define MICA_CRYPTO_ADDRESS_SPACE__OFFSET_FIELD 0,23

#define MICA_CRYPTO_ADDRESS_SPACE__PARTITION_SHIFT 24
#define MICA_CRYPTO_ADDRESS_SPACE__PARTITION_WIDTH 2
#define MICA_CRYPTO_ADDRESS_SPACE__PARTITION_RESET_VAL 0
#define MICA_CRYPTO_ADDRESS_SPACE__PARTITION_RMASK 0x3
#define MICA_CRYPTO_ADDRESS_SPACE__PARTITION_MASK  0x3000000
#define MICA_CRYPTO_ADDRESS_SPACE__PARTITION_FIELD 24,25
#define MICA_CRYPTO_ADDRESS_SPACE__PARTITION_VAL_DM_GLOBAL 0x0
#define MICA_CRYPTO_ADDRESS_SPACE__PARTITION_VAL_ENGINE_GLOBAL 0x1
#define MICA_CRYPTO_ADDRESS_SPACE__PARTITION_VAL_CONTEXT_USER 0x2
#define MICA_CRYPTO_ADDRESS_SPACE__PARTITION_VAL_CONTEXT_SYSTEM 0x3


/*
 * MiCA Address Space DM Global.
 * This register defines the DM_GLOBAL address space.  This is a general
 * description of the MMIO space as opposed to a register description
 */
#define MICA_CRYPTO_ADDRESS_SPACE_GLOBAL__FIRST_WORD 0x0000
#define MICA_CRYPTO_ADDRESS_SPACE_GLOBAL__LAST_WORD 0x3ff8

#define MICA_CRYPTO_ADDRESS_SPACE_GLOBAL__REGISTER_NUMBER_SHIFT 3
#define MICA_CRYPTO_ADDRESS_SPACE_GLOBAL__REGISTER_NUMBER_WIDTH 11
#define MICA_CRYPTO_ADDRESS_SPACE_GLOBAL__REGISTER_NUMBER_RESET_VAL 0
#define MICA_CRYPTO_ADDRESS_SPACE_GLOBAL__REGISTER_NUMBER_RMASK 0x7ff
#define MICA_CRYPTO_ADDRESS_SPACE_GLOBAL__REGISTER_NUMBER_MASK  0x3ff8
#define MICA_CRYPTO_ADDRESS_SPACE_GLOBAL__REGISTER_NUMBER_FIELD 3,13

#define MICA_CRYPTO_ADDRESS_SPACE_GLOBAL__PARTITION_SHIFT 24
#define MICA_CRYPTO_ADDRESS_SPACE_GLOBAL__PARTITION_WIDTH 2
#define MICA_CRYPTO_ADDRESS_SPACE_GLOBAL__PARTITION_RESET_VAL 0
#define MICA_CRYPTO_ADDRESS_SPACE_GLOBAL__PARTITION_RMASK 0x3
#define MICA_CRYPTO_ADDRESS_SPACE_GLOBAL__PARTITION_MASK  0x3000000
#define MICA_CRYPTO_ADDRESS_SPACE_GLOBAL__PARTITION_FIELD 24,25
#define MICA_CRYPTO_ADDRESS_SPACE_GLOBAL__PARTITION_VAL_DM_GLOBAL 0x0


/*
 * MiCA Address Space Engine Global.
 * This register defines the ENGINE_GLOBAL address space.  This is a general
 * description of the MMIO space as opposed to a register description
 */
#define MICA_CRYPTO_ADDRESS_SPACE_ENGINE__FIRST_WORD 0x1000000
#define MICA_CRYPTO_ADDRESS_SPACE_ENGINE__LAST_WORD 0x1fffff8

#define MICA_CRYPTO_ADDRESS_SPACE_ENGINE__REGISTER_NUMBER_SHIFT 3
#define MICA_CRYPTO_ADDRESS_SPACE_ENGINE__REGISTER_NUMBER_WIDTH 15
#define MICA_CRYPTO_ADDRESS_SPACE_ENGINE__REGISTER_NUMBER_RESET_VAL 0
#define MICA_CRYPTO_ADDRESS_SPACE_ENGINE__REGISTER_NUMBER_RMASK 0x7fff
#define MICA_CRYPTO_ADDRESS_SPACE_ENGINE__REGISTER_NUMBER_MASK  0x3fff8
#define MICA_CRYPTO_ADDRESS_SPACE_ENGINE__REGISTER_NUMBER_FIELD 3,17

#define MICA_CRYPTO_ADDRESS_SPACE_ENGINE__ENGINE_SHIFT 18
#define MICA_CRYPTO_ADDRESS_SPACE_ENGINE__ENGINE_WIDTH 6
#define MICA_CRYPTO_ADDRESS_SPACE_ENGINE__ENGINE_RESET_VAL 0
#define MICA_CRYPTO_ADDRESS_SPACE_ENGINE__ENGINE_RMASK 0x3f
#define MICA_CRYPTO_ADDRESS_SPACE_ENGINE__ENGINE_MASK  0xfc0000
#define MICA_CRYPTO_ADDRESS_SPACE_ENGINE__ENGINE_FIELD 18,23

#define MICA_CRYPTO_ADDRESS_SPACE_ENGINE__PARTITION_SHIFT 24
#define MICA_CRYPTO_ADDRESS_SPACE_ENGINE__PARTITION_WIDTH 2
#define MICA_CRYPTO_ADDRESS_SPACE_ENGINE__PARTITION_RESET_VAL 1
#define MICA_CRYPTO_ADDRESS_SPACE_ENGINE__PARTITION_RMASK 0x3
#define MICA_CRYPTO_ADDRESS_SPACE_ENGINE__PARTITION_MASK  0x3000000
#define MICA_CRYPTO_ADDRESS_SPACE_ENGINE__PARTITION_FIELD 24,25
#define MICA_CRYPTO_ADDRESS_SPACE_ENGINE__PARTITION_VAL_ENGINE_GLOBAL 0x1


/*
 * MiCA Address Space Context User.
 * This register defines the CONTEXT_USER address space.  This is a general
 * description of the MMIO space as opposed to a register description
 */
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_USER__FIRST_WORD 0x2000000
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_USER__LAST_WORD 0x2fffff8

#define MICA_CRYPTO_ADDRESS_SPACE_CTX_USER__REGISTER_NUMBER_SHIFT 3
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_USER__REGISTER_NUMBER_WIDTH 11
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_USER__REGISTER_NUMBER_RESET_VAL 0
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_USER__REGISTER_NUMBER_RMASK 0x7ff
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_USER__REGISTER_NUMBER_MASK  0x3ff8
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_USER__REGISTER_NUMBER_FIELD 3,13

#define MICA_CRYPTO_ADDRESS_SPACE_CTX_USER__CONTEXT_SHIFT 16
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_USER__CONTEXT_WIDTH 8
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_USER__CONTEXT_RESET_VAL 0
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_USER__CONTEXT_RMASK 0xff
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_USER__CONTEXT_MASK  0xff0000
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_USER__CONTEXT_FIELD 16,23

#define MICA_CRYPTO_ADDRESS_SPACE_CTX_USER__PARTITION_SHIFT 24
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_USER__PARTITION_WIDTH 2
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_USER__PARTITION_RESET_VAL 2
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_USER__PARTITION_RMASK 0x3
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_USER__PARTITION_MASK  0x3000000
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_USER__PARTITION_FIELD 24,25
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_USER__PARTITION_VAL_CONTEXT_USER 0x2


/*
 * MiCA Address Space Context System.
 * This register defines the CONTEXT_SYSTEM address space.  This is a general
 * description of the MMIO space as opposed to a register description
 */
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_SYS__FIRST_WORD 0x3000000
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_SYS__LAST_WORD 0x3fffff8

#define MICA_CRYPTO_ADDRESS_SPACE_CTX_SYS__REGISTER_NUMBER_SHIFT 3
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_SYS__REGISTER_NUMBER_WIDTH 11
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_SYS__REGISTER_NUMBER_RESET_VAL 0
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_SYS__REGISTER_NUMBER_RMASK 0x7ff
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_SYS__REGISTER_NUMBER_MASK  0x3ff8
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_SYS__REGISTER_NUMBER_FIELD 3,13

#define MICA_CRYPTO_ADDRESS_SPACE_CTX_SYS__CONTEXT_SHIFT 16
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_SYS__CONTEXT_WIDTH 8
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_SYS__CONTEXT_RESET_VAL 0
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_SYS__CONTEXT_RMASK 0xff
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_SYS__CONTEXT_MASK  0xff0000
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_SYS__CONTEXT_FIELD 16,23

#define MICA_CRYPTO_ADDRESS_SPACE_CTX_SYS__PARTITION_SHIFT 24
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_SYS__PARTITION_WIDTH 2
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_SYS__PARTITION_RESET_VAL 3
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_SYS__PARTITION_RMASK 0x3
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_SYS__PARTITION_MASK  0x3000000
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_SYS__PARTITION_FIELD 24,25
#define MICA_CRYPTO_ADDRESS_SPACE_CTX_SYS__PARTITION_VAL_CONTEXT_SYSTEM 0x3


/*
 * Clock Control.
 * Provides control over core PLL.  This register is in global space.
 */
#define MICA_CRYPTO_CLOCK_CONTROL 0x04f8

#define MICA_CRYPTO_CLOCK_CONTROL__ENA_SHIFT 0
#define MICA_CRYPTO_CLOCK_CONTROL__ENA_WIDTH 1
#define MICA_CRYPTO_CLOCK_CONTROL__ENA_RESET_VAL 0
#define MICA_CRYPTO_CLOCK_CONTROL__ENA_RMASK 0x1
#define MICA_CRYPTO_CLOCK_CONTROL__ENA_MASK  0x1
#define MICA_CRYPTO_CLOCK_CONTROL__ENA_FIELD 0,0

#define MICA_CRYPTO_CLOCK_CONTROL__PLL_RANGE_SHIFT 1
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_RANGE_WIDTH 3
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_RANGE_RESET_VAL 0
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_RANGE_RMASK 0x7
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_RANGE_MASK  0xe
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_RANGE_FIELD 1,3
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_RANGE_VAL_BYP 0x0
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_RANGE_VAL_R14_16 0x1
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_RANGE_VAL_R16_26 0x2
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_RANGE_VAL_R26_42 0x3
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_RANGE_VAL_R42_65 0x4
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_RANGE_VAL_R65_104 0x5
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_RANGE_VAL_R104_166 0x6
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_RANGE_VAL_R166_200 0x7

#define MICA_CRYPTO_CLOCK_CONTROL__PLL_Q_SHIFT 4
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_Q_WIDTH 3
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_Q_RESET_VAL 0
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_Q_RMASK 0x7
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_Q_MASK  0x70
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_Q_FIELD 4,6

#define MICA_CRYPTO_CLOCK_CONTROL__PLL_N_SHIFT 7
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_N_WIDTH 6
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_N_RESET_VAL 0
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_N_RMASK 0x3f
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_N_MASK  0x1f80
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_N_FIELD 7,12

#define MICA_CRYPTO_CLOCK_CONTROL__PLL_M_SHIFT 13
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_M_WIDTH 8
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_M_RESET_VAL 0
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_M_RMASK 0xff
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_M_MASK  0x1fe000
#define MICA_CRYPTO_CLOCK_CONTROL__PLL_M_FIELD 13,20

#define MICA_CRYPTO_CLOCK_CONTROL__CLOCK_READY_SHIFT 31
#define MICA_CRYPTO_CLOCK_CONTROL__CLOCK_READY_WIDTH 1
#define MICA_CRYPTO_CLOCK_CONTROL__CLOCK_READY_RESET_VAL 0
#define MICA_CRYPTO_CLOCK_CONTROL__CLOCK_READY_RMASK 0x1
#define MICA_CRYPTO_CLOCK_CONTROL__CLOCK_READY_MASK  0x80000000
#define MICA_CRYPTO_CLOCK_CONTROL__CLOCK_READY_FIELD 31,31


/* Clock Count. */
#define MICA_CRYPTO_CLOCK_COUNT 0x0038

#define MICA_CRYPTO_CLOCK_COUNT__RUN_SHIFT 0
#define MICA_CRYPTO_CLOCK_COUNT__RUN_WIDTH 1
#define MICA_CRYPTO_CLOCK_COUNT__RUN_RESET_VAL 0
#define MICA_CRYPTO_CLOCK_COUNT__RUN_RMASK 0x1
#define MICA_CRYPTO_CLOCK_COUNT__RUN_MASK  0x1
#define MICA_CRYPTO_CLOCK_COUNT__RUN_FIELD 0,0

#define MICA_CRYPTO_CLOCK_COUNT__COUNT_SHIFT 1
#define MICA_CRYPTO_CLOCK_COUNT__COUNT_WIDTH 15
#define MICA_CRYPTO_CLOCK_COUNT__COUNT_RESET_VAL 0
#define MICA_CRYPTO_CLOCK_COUNT__COUNT_RMASK 0x7fff
#define MICA_CRYPTO_CLOCK_COUNT__COUNT_MASK  0xfffe
#define MICA_CRYPTO_CLOCK_COUNT__COUNT_FIELD 1,15


/*
 * Device Control.
 * This register provides general device control.
 */
#define MICA_CRYPTO_DEV_CTL 0x0008

#define MICA_CRYPTO_DEV_CTL__RDN_ROUTE_ORDER_SHIFT 2
#define MICA_CRYPTO_DEV_CTL__RDN_ROUTE_ORDER_WIDTH 1
#define MICA_CRYPTO_DEV_CTL__RDN_ROUTE_ORDER_RESET_VAL 1
#define MICA_CRYPTO_DEV_CTL__RDN_ROUTE_ORDER_RMASK 0x1
#define MICA_CRYPTO_DEV_CTL__RDN_ROUTE_ORDER_MASK  0x4
#define MICA_CRYPTO_DEV_CTL__RDN_ROUTE_ORDER_FIELD 2,2

#define MICA_CRYPTO_DEV_CTL__SDN_ROUTE_ORDER_SHIFT 3
#define MICA_CRYPTO_DEV_CTL__SDN_ROUTE_ORDER_WIDTH 1
#define MICA_CRYPTO_DEV_CTL__SDN_ROUTE_ORDER_RESET_VAL 0
#define MICA_CRYPTO_DEV_CTL__SDN_ROUTE_ORDER_RMASK 0x1
#define MICA_CRYPTO_DEV_CTL__SDN_ROUTE_ORDER_MASK  0x8
#define MICA_CRYPTO_DEV_CTL__SDN_ROUTE_ORDER_FIELD 3,3


/*
 * Device Info.
 * This register provides general information about the device attached to
 * this port and channel.
 */
#define MICA_CRYPTO_DEV_INFO 0x0000

#define MICA_CRYPTO_DEV_INFO__TYPE_SHIFT 0
#define MICA_CRYPTO_DEV_INFO__TYPE_WIDTH 12
#define MICA_CRYPTO_DEV_INFO__TYPE_RESET_VAL 22
#define MICA_CRYPTO_DEV_INFO__TYPE_RMASK 0xfff
#define MICA_CRYPTO_DEV_INFO__TYPE_MASK  0xfff
#define MICA_CRYPTO_DEV_INFO__TYPE_FIELD 0,11
#define MICA_CRYPTO_DEV_INFO__TYPE_VAL_PCIE 0x1
#define MICA_CRYPTO_DEV_INFO__TYPE_VAL_GBE 0x10
#define MICA_CRYPTO_DEV_INFO__TYPE_VAL_XGBE 0x11
#define MICA_CRYPTO_DEV_INFO__TYPE_VAL_MPIPE 0x13
#define MICA_CRYPTO_DEV_INFO__TYPE_VAL_TRIO 0x14
#define MICA_CRYPTO_DEV_INFO__TYPE_VAL_CRYPTO 0x16
#define MICA_CRYPTO_DEV_INFO__TYPE_VAL_COMPRESSION 0x18
#define MICA_CRYPTO_DEV_INFO__TYPE_VAL_GPIO 0x20
#define MICA_CRYPTO_DEV_INFO__TYPE_VAL_RSHIM 0x21
#define MICA_CRYPTO_DEV_INFO__TYPE_VAL_SROM 0x22
#define MICA_CRYPTO_DEV_INFO__TYPE_VAL_I2CM 0x25
#define MICA_CRYPTO_DEV_INFO__TYPE_VAL_I2CS 0x26
#define MICA_CRYPTO_DEV_INFO__TYPE_VAL_UART 0x28
#define MICA_CRYPTO_DEV_INFO__TYPE_VAL_USBH 0x29
#define MICA_CRYPTO_DEV_INFO__TYPE_VAL_USBS 0x2a
#define MICA_CRYPTO_DEV_INFO__TYPE_VAL_USBHS 0x2b
#define MICA_CRYPTO_DEV_INFO__TYPE_VAL_DDR2 0x40
#define MICA_CRYPTO_DEV_INFO__TYPE_VAL_DDR3 0x42
#define MICA_CRYPTO_DEV_INFO__TYPE_VAL_DIAG_SNP 0x80
#define MICA_CRYPTO_DEV_INFO__TYPE_VAL_IPIC 0x81

#define MICA_CRYPTO_DEV_INFO__DEVICE_REV_SHIFT 16
#define MICA_CRYPTO_DEV_INFO__DEVICE_REV_WIDTH 8
#define MICA_CRYPTO_DEV_INFO__DEVICE_REV_RMASK 0xff
#define MICA_CRYPTO_DEV_INFO__DEVICE_REV_MASK  0xff0000
#define MICA_CRYPTO_DEV_INFO__DEVICE_REV_FIELD 16,23

#define MICA_CRYPTO_DEV_INFO__REGISTER_REV_SHIFT 24
#define MICA_CRYPTO_DEV_INFO__REGISTER_REV_WIDTH 4
#define MICA_CRYPTO_DEV_INFO__REGISTER_REV_RESET_VAL 0
#define MICA_CRYPTO_DEV_INFO__REGISTER_REV_RMASK 0xf
#define MICA_CRYPTO_DEV_INFO__REGISTER_REV_MASK  0xf000000
#define MICA_CRYPTO_DEV_INFO__REGISTER_REV_FIELD 24,27

#define MICA_CRYPTO_DEV_INFO__INSTANCE_SHIFT 32
#define MICA_CRYPTO_DEV_INFO__INSTANCE_WIDTH 4
#define MICA_CRYPTO_DEV_INFO__INSTANCE_RMASK 0xf
#define MICA_CRYPTO_DEV_INFO__INSTANCE_MASK  _64bit(0xf00000000)
#define MICA_CRYPTO_DEV_INFO__INSTANCE_FIELD 32,35


/*
 * Egress Credit.
 * This Global register can be used to change the number of egress credits
 * for each engine.  There are enough fields for 8 engines in this register,
 * the number actually used depends on the DataMover implementation.
 */
#define MICA_CRYPTO_EGRESS_CREDIT 0x0500

#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_0_SHIFT 0
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_0_WIDTH 8
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_0_RESET_VAL 6
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_0_RMASK 0xff
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_0_MASK  0xff
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_0_FIELD 0,7

#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_1_SHIFT 8
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_1_WIDTH 8
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_1_RESET_VAL 6
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_1_RMASK 0xff
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_1_MASK  0xff00
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_1_FIELD 8,15

#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_2_SHIFT 16
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_2_WIDTH 8
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_2_RESET_VAL 6
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_2_RMASK 0xff
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_2_MASK  0xff0000
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_2_FIELD 16,23

#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_3_SHIFT 24
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_3_WIDTH 8
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_3_RESET_VAL 6
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_3_RMASK 0xff
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_3_MASK  0xff000000
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_3_FIELD 24,31

#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_4_SHIFT 32
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_4_WIDTH 8
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_4_RESET_VAL 6
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_4_RMASK 0xff
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_4_MASK  _64bit(0xff00000000)
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_4_FIELD 32,39

#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_5_SHIFT 40
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_5_WIDTH 8
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_5_RESET_VAL 6
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_5_RMASK 0xff
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_5_MASK  _64bit(0xff0000000000)
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_5_FIELD 40,47

#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_6_SHIFT 48
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_6_WIDTH 8
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_6_RESET_VAL 6
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_6_RMASK 0xff
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_6_MASK  _64bit(0xff000000000000)
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_6_FIELD 48,55

#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_7_SHIFT 56
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_7_WIDTH 8
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_7_RESET_VAL 6
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_7_RMASK 0xff
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_7_MASK  _64bit(0xff00000000000000)
#define MICA_CRYPTO_EGRESS_CREDIT__ENGINE_7_FIELD 56,63


/*
 * Engine Disable.
 * This Global register is used to disable engines, for debug and performance
 * analysis.  If all engines of a given type are disabled then no new
 * operations for that type of function can be scheduled.
 */
#define MICA_CRYPTO_ENGINE_DISABLE 0x0040

#define MICA_CRYPTO_ENGINE_DISABLE__DISABLE_SHIFT 0
#define MICA_CRYPTO_ENGINE_DISABLE__DISABLE_WIDTH 4
#define MICA_CRYPTO_ENGINE_DISABLE__DISABLE_RESET_VAL 0
#define MICA_CRYPTO_ENGINE_DISABLE__DISABLE_RMASK 0xf
#define MICA_CRYPTO_ENGINE_DISABLE__DISABLE_MASK  0xf
#define MICA_CRYPTO_ENGINE_DISABLE__DISABLE_FIELD 0,3


/*
 * Engine Reset.
 * This Global register is used to reset engines.
 */
#define MICA_CRYPTO_ENGINE_RESET 0x0048

#define MICA_CRYPTO_ENGINE_RESET__RESET_SHIFT 0
#define MICA_CRYPTO_ENGINE_RESET__RESET_WIDTH 4
#define MICA_CRYPTO_ENGINE_RESET__RESET_RESET_VAL 0
#define MICA_CRYPTO_ENGINE_RESET__RESET_RMASK 0xf
#define MICA_CRYPTO_ENGINE_RESET__RESET_MASK  0xf
#define MICA_CRYPTO_ENGINE_RESET__RESET_FIELD 0,3


/*
 * MMIO HFH Table Init Control.
 * Initialization control for the hash-for-home table.  This register is in
 * global space because the HFH table is shared by all Contexts.
 */
#define MICA_CRYPTO_HFH_INIT_CTL 0x0050

#define MICA_CRYPTO_HFH_INIT_CTL__IDX_SHIFT 0
#define MICA_CRYPTO_HFH_INIT_CTL__IDX_WIDTH 7
#define MICA_CRYPTO_HFH_INIT_CTL__IDX_RESET_VAL 0
#define MICA_CRYPTO_HFH_INIT_CTL__IDX_RMASK 0x7f
#define MICA_CRYPTO_HFH_INIT_CTL__IDX_MASK  0x7f
#define MICA_CRYPTO_HFH_INIT_CTL__IDX_FIELD 0,6


/*
 * HFH Table Data.
 * Read/Write data for hash-for-home table
 */
#define MICA_CRYPTO_HFH_INIT_DAT 0x0058

#define MICA_CRYPTO_HFH_INIT_DAT__FRACT_SHIFT 0
#define MICA_CRYPTO_HFH_INIT_DAT__FRACT_WIDTH 7
#define MICA_CRYPTO_HFH_INIT_DAT__FRACT_RMASK 0x7f
#define MICA_CRYPTO_HFH_INIT_DAT__FRACT_MASK  0x7f
#define MICA_CRYPTO_HFH_INIT_DAT__FRACT_FIELD 0,6

#define MICA_CRYPTO_HFH_INIT_DAT__TILEB_SHIFT 7
#define MICA_CRYPTO_HFH_INIT_DAT__TILEB_WIDTH 8
#define MICA_CRYPTO_HFH_INIT_DAT__TILEB_RMASK 0xff
#define MICA_CRYPTO_HFH_INIT_DAT__TILEB_MASK  0x7f80
#define MICA_CRYPTO_HFH_INIT_DAT__TILEB_FIELD 7,14

#define MICA_CRYPTO_HFH_INIT_DAT__TILEA_SHIFT 15
#define MICA_CRYPTO_HFH_INIT_DAT__TILEA_WIDTH 8
#define MICA_CRYPTO_HFH_INIT_DAT__TILEA_RMASK 0xff
#define MICA_CRYPTO_HFH_INIT_DAT__TILEA_MASK  0x7f8000
#define MICA_CRYPTO_HFH_INIT_DAT__TILEA_FIELD 15,22


/*
 * In Use Contexts.
 * These Global registers are used to provide the status of all Contexts.
 * They can be used for monitoring and debug.  There are 4 registers to cover
 * 256 contexts, fewer contexts may be implemented in a given MiCA
 * implementation, and those bits will read as 0.
 */
#define MICA_CRYPTO_IN_USE_CONTEXTS_0 0x0080

#define MICA_CRYPTO_IN_USE_CONTEXTS_0__CTX_MASK_SHIFT 0
#define MICA_CRYPTO_IN_USE_CONTEXTS_0__CTX_MASK_WIDTH 64
#define MICA_CRYPTO_IN_USE_CONTEXTS_0__CTX_MASK_RESET_VAL 0
#define MICA_CRYPTO_IN_USE_CONTEXTS_0__CTX_MASK_RMASK _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_IN_USE_CONTEXTS_0__CTX_MASK_MASK  _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_IN_USE_CONTEXTS_0__CTX_MASK_FIELD 0,63


/*
 * In Use Contexts.
 * These Global registers are used to provide the status of all Contexts.
 * They can be used for monitoring and debug.  There are 4 registers to cover
 * 256 contexts, fewer contexts may be implemented in a given MiCA
 * implementation, and those bits will read as 0.
 */
#define MICA_CRYPTO_IN_USE_CONTEXTS_1 0x0088

#define MICA_CRYPTO_IN_USE_CONTEXTS_1__CTX_MASK_SHIFT 0
#define MICA_CRYPTO_IN_USE_CONTEXTS_1__CTX_MASK_WIDTH 64
#define MICA_CRYPTO_IN_USE_CONTEXTS_1__CTX_MASK_RESET_VAL 0
#define MICA_CRYPTO_IN_USE_CONTEXTS_1__CTX_MASK_RMASK _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_IN_USE_CONTEXTS_1__CTX_MASK_MASK  _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_IN_USE_CONTEXTS_1__CTX_MASK_FIELD 0,63


/*
 * In Use Contexts.
 * These Global registers are used to provide the status of all Contexts.
 * They can be used for monitoring and debug.  There are 4 registers to cover
 * 256 contexts, fewer contexts may be implemented in a given MiCA
 * implementation, and those bits will read as 0.
 */
#define MICA_CRYPTO_IN_USE_CONTEXTS_2 0x0090

#define MICA_CRYPTO_IN_USE_CONTEXTS_2__CTX_MASK_SHIFT 0
#define MICA_CRYPTO_IN_USE_CONTEXTS_2__CTX_MASK_WIDTH 64
#define MICA_CRYPTO_IN_USE_CONTEXTS_2__CTX_MASK_RESET_VAL 0
#define MICA_CRYPTO_IN_USE_CONTEXTS_2__CTX_MASK_RMASK _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_IN_USE_CONTEXTS_2__CTX_MASK_MASK  _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_IN_USE_CONTEXTS_2__CTX_MASK_FIELD 0,63


/*
 * In Use Contexts.
 * These Global registers are used to provide the status of all Contexts.
 * They can be used for monitoring and debug.  There are 4 registers to cover
 * 256 contexts, fewer contexts may be implemented in a given MiCA
 * implementation, and those bits will read as 0.
 */
#define MICA_CRYPTO_IN_USE_CONTEXTS_3 0x0098

#define MICA_CRYPTO_IN_USE_CONTEXTS_3__CTX_MASK_SHIFT 0
#define MICA_CRYPTO_IN_USE_CONTEXTS_3__CTX_MASK_WIDTH 64
#define MICA_CRYPTO_IN_USE_CONTEXTS_3__CTX_MASK_RESET_VAL 0
#define MICA_CRYPTO_IN_USE_CONTEXTS_3__CTX_MASK_RMASK _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_IN_USE_CONTEXTS_3__CTX_MASK_MASK  _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_IN_USE_CONTEXTS_3__CTX_MASK_FIELD 0,63


/*
 * Memory Info.
 * This register provides information about memory setup required for this
 * device.
 */
#define MICA_CRYPTO_MEM_INFO 0x0018

#define MICA_CRYPTO_MEM_INFO__REQ_PORTS_SHIFT 0
#define MICA_CRYPTO_MEM_INFO__REQ_PORTS_WIDTH 32
#define MICA_CRYPTO_MEM_INFO__REQ_PORTS_RESET_VAL 32768
#define MICA_CRYPTO_MEM_INFO__REQ_PORTS_RMASK 0xffffffff
#define MICA_CRYPTO_MEM_INFO__REQ_PORTS_MASK  0xffffffff
#define MICA_CRYPTO_MEM_INFO__REQ_PORTS_FIELD 0,31

#define MICA_CRYPTO_MEM_INFO__NUM_HFH_TBL_SHIFT 32
#define MICA_CRYPTO_MEM_INFO__NUM_HFH_TBL_WIDTH 4
#define MICA_CRYPTO_MEM_INFO__NUM_HFH_TBL_RESET_VAL 1
#define MICA_CRYPTO_MEM_INFO__NUM_HFH_TBL_RMASK 0xf
#define MICA_CRYPTO_MEM_INFO__NUM_HFH_TBL_MASK  _64bit(0xf00000000)
#define MICA_CRYPTO_MEM_INFO__NUM_HFH_TBL_FIELD 32,35

#define MICA_CRYPTO_MEM_INFO__NUM_ASIDS_SHIFT 40
#define MICA_CRYPTO_MEM_INFO__NUM_ASIDS_WIDTH 8
#define MICA_CRYPTO_MEM_INFO__NUM_ASIDS_RESET_VAL 40
#define MICA_CRYPTO_MEM_INFO__NUM_ASIDS_RMASK 0xff
#define MICA_CRYPTO_MEM_INFO__NUM_ASIDS_MASK  _64bit(0xff0000000000)
#define MICA_CRYPTO_MEM_INFO__NUM_ASIDS_FIELD 40,47

#define MICA_CRYPTO_MEM_INFO__NUM_TLB_ENT_SHIFT 48
#define MICA_CRYPTO_MEM_INFO__NUM_TLB_ENT_WIDTH 8
#define MICA_CRYPTO_MEM_INFO__NUM_TLB_ENT_RESET_VAL 16
#define MICA_CRYPTO_MEM_INFO__NUM_TLB_ENT_RMASK 0xff
#define MICA_CRYPTO_MEM_INFO__NUM_TLB_ENT_MASK  _64bit(0xff000000000000)
#define MICA_CRYPTO_MEM_INFO__NUM_TLB_ENT_FIELD 48,55


/*
 * MMIO Info.
 * This register provides information about how the physical address is
 * interpreted by the IO device.  The PA is divided into
 * {CHANNEL,SVC_DOM,IGNORED,REGION,OFFSET}.  The values in this register
 * define the size of each of these fields.
 */
#define MICA_CRYPTO_MMIO_INFO 0x0010

#define MICA_CRYPTO_MMIO_INFO__CH_WIDTH_SHIFT 0
#define MICA_CRYPTO_MMIO_INFO__CH_WIDTH_WIDTH 4
#define MICA_CRYPTO_MMIO_INFO__CH_WIDTH_RESET_VAL 0
#define MICA_CRYPTO_MMIO_INFO__CH_WIDTH_RMASK 0xf
#define MICA_CRYPTO_MMIO_INFO__CH_WIDTH_MASK  0xf
#define MICA_CRYPTO_MMIO_INFO__CH_WIDTH_FIELD 0,3

#define MICA_CRYPTO_MMIO_INFO__NUM_CH_SHIFT 4
#define MICA_CRYPTO_MMIO_INFO__NUM_CH_WIDTH 15
#define MICA_CRYPTO_MMIO_INFO__NUM_CH_RESET_VAL 1
#define MICA_CRYPTO_MMIO_INFO__NUM_CH_RMASK 0x7fff
#define MICA_CRYPTO_MMIO_INFO__NUM_CH_MASK  0x7fff0
#define MICA_CRYPTO_MMIO_INFO__NUM_CH_FIELD 4,18

#define MICA_CRYPTO_MMIO_INFO__SVC_DOM_WIDTH_SHIFT 19
#define MICA_CRYPTO_MMIO_INFO__SVC_DOM_WIDTH_WIDTH 3
#define MICA_CRYPTO_MMIO_INFO__SVC_DOM_WIDTH_RESET_VAL 0
#define MICA_CRYPTO_MMIO_INFO__SVC_DOM_WIDTH_RMASK 0x7
#define MICA_CRYPTO_MMIO_INFO__SVC_DOM_WIDTH_MASK  0x380000
#define MICA_CRYPTO_MMIO_INFO__SVC_DOM_WIDTH_FIELD 19,21

#define MICA_CRYPTO_MMIO_INFO__NUM_SVC_DOM_SHIFT 22
#define MICA_CRYPTO_MMIO_INFO__NUM_SVC_DOM_WIDTH 7
#define MICA_CRYPTO_MMIO_INFO__NUM_SVC_DOM_RESET_VAL 0
#define MICA_CRYPTO_MMIO_INFO__NUM_SVC_DOM_RMASK 0x7f
#define MICA_CRYPTO_MMIO_INFO__NUM_SVC_DOM_MASK  0x1fc00000
#define MICA_CRYPTO_MMIO_INFO__NUM_SVC_DOM_FIELD 22,28

#define MICA_CRYPTO_MMIO_INFO__OFFSET_WIDTH_SHIFT 29
#define MICA_CRYPTO_MMIO_INFO__OFFSET_WIDTH_WIDTH 6
#define MICA_CRYPTO_MMIO_INFO__OFFSET_WIDTH_RESET_VAL 16
#define MICA_CRYPTO_MMIO_INFO__OFFSET_WIDTH_RMASK 0x3f
#define MICA_CRYPTO_MMIO_INFO__OFFSET_WIDTH_MASK  _64bit(0x7e0000000)
#define MICA_CRYPTO_MMIO_INFO__OFFSET_WIDTH_FIELD 29,34

#define MICA_CRYPTO_MMIO_INFO__REGION_WIDTH_SHIFT 35
#define MICA_CRYPTO_MMIO_INFO__REGION_WIDTH_WIDTH 6
#define MICA_CRYPTO_MMIO_INFO__REGION_WIDTH_RESET_VAL 0
#define MICA_CRYPTO_MMIO_INFO__REGION_WIDTH_RMASK 0x3f
#define MICA_CRYPTO_MMIO_INFO__REGION_WIDTH_MASK  _64bit(0x1f800000000)
#define MICA_CRYPTO_MMIO_INFO__REGION_WIDTH_FIELD 35,40


/*
 * Scheduler 0 Control.
 * For Crypto, this register controls memory-to-memory copy operations; for
 * Zip it controls deflate engine operations.
 */
#define MICA_CRYPTO_SCHED_0_CTL 0x0180

#define MICA_CRYPTO_SCHED_0_CTL__SCHED_0_CTL_SHIFT 0
#define MICA_CRYPTO_SCHED_0_CTL__SCHED_0_CTL_WIDTH 64
#define MICA_CRYPTO_SCHED_0_CTL__SCHED_0_CTL_RESET_VAL 0
#define MICA_CRYPTO_SCHED_0_CTL__SCHED_0_CTL_RMASK _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_SCHED_0_CTL__SCHED_0_CTL_MASK  _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_SCHED_0_CTL__SCHED_0_CTL_FIELD 0,63


/*
 * Scheduler 1 Control.
 * For Crypto, this register controls Kasumi and Snow operations; for Zip it
 * controls inflate engine operations.
 */
#define MICA_CRYPTO_SCHED_1_CTL 0x0188

#define MICA_CRYPTO_SCHED_1_CTL__SCHED_1_CTL_SHIFT 0
#define MICA_CRYPTO_SCHED_1_CTL__SCHED_1_CTL_WIDTH 64
#define MICA_CRYPTO_SCHED_1_CTL__SCHED_1_CTL_RESET_VAL 0
#define MICA_CRYPTO_SCHED_1_CTL__SCHED_1_CTL_RMASK _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_SCHED_1_CTL__SCHED_1_CTL_MASK  _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_SCHED_1_CTL__SCHED_1_CTL_FIELD 0,63


/*
 * Scheduler 2 Control.
 * For Crypto, this register controls Packet Processor operations; Zip only
 * has 2 schedulers so this register is reserved.
 */
#define MICA_CRYPTO_SCHED_2_CTL 0x0190

#define MICA_CRYPTO_SCHED_2_CTL__SCHED_2_CTL_SHIFT 0
#define MICA_CRYPTO_SCHED_2_CTL__SCHED_2_CTL_WIDTH 64
#define MICA_CRYPTO_SCHED_2_CTL__SCHED_2_CTL_RESET_VAL 0
#define MICA_CRYPTO_SCHED_2_CTL__SCHED_2_CTL_RMASK _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_SCHED_2_CTL__SCHED_2_CTL_MASK  _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_SCHED_2_CTL__SCHED_2_CTL_FIELD 0,63


/*
 * Scheduler 3 Control.
 * Reserved.
 */
#define MICA_CRYPTO_SCHED_3_CTL 0x0198

#define MICA_CRYPTO_SCHED_3_CTL__SCHED_3_CTL_SHIFT 0
#define MICA_CRYPTO_SCHED_3_CTL__SCHED_3_CTL_WIDTH 64
#define MICA_CRYPTO_SCHED_3_CTL__SCHED_3_CTL_RESET_VAL 0
#define MICA_CRYPTO_SCHED_3_CTL__SCHED_3_CTL_RMASK _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_SCHED_3_CTL__SCHED_3_CTL_MASK  _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_SCHED_3_CTL__SCHED_3_CTL_FIELD 0,63


/*
 * Scheduler 4 Control.
 * Reserved.
 */
#define MICA_CRYPTO_SCHED_4_CTL 0x01a0

#define MICA_CRYPTO_SCHED_4_CTL__SCHED_4_CTL_SHIFT 0
#define MICA_CRYPTO_SCHED_4_CTL__SCHED_4_CTL_WIDTH 64
#define MICA_CRYPTO_SCHED_4_CTL__SCHED_4_CTL_RESET_VAL 0
#define MICA_CRYPTO_SCHED_4_CTL__SCHED_4_CTL_RMASK _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_SCHED_4_CTL__SCHED_4_CTL_MASK  _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_SCHED_4_CTL__SCHED_4_CTL_FIELD 0,63


/*
 * Scheduler 5 Control.
 * Reserved.
 */
#define MICA_CRYPTO_SCHED_5_CTL 0x01a8

#define MICA_CRYPTO_SCHED_5_CTL__SCHED_5_CTL_SHIFT 0
#define MICA_CRYPTO_SCHED_5_CTL__SCHED_5_CTL_WIDTH 64
#define MICA_CRYPTO_SCHED_5_CTL__SCHED_5_CTL_RESET_VAL 0
#define MICA_CRYPTO_SCHED_5_CTL__SCHED_5_CTL_RMASK _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_SCHED_5_CTL__SCHED_5_CTL_MASK  _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_SCHED_5_CTL__SCHED_5_CTL_FIELD 0,63


/*
 * Scheduler 6 Control.
 * Reserved.
 */
#define MICA_CRYPTO_SCHED_6_CTL 0x01b0

#define MICA_CRYPTO_SCHED_6_CTL__SCHED_6_CTL_SHIFT 0
#define MICA_CRYPTO_SCHED_6_CTL__SCHED_6_CTL_WIDTH 64
#define MICA_CRYPTO_SCHED_6_CTL__SCHED_6_CTL_RESET_VAL 0
#define MICA_CRYPTO_SCHED_6_CTL__SCHED_6_CTL_RMASK _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_SCHED_6_CTL__SCHED_6_CTL_MASK  _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_SCHED_6_CTL__SCHED_6_CTL_FIELD 0,63


/*
 * Scheduler 7 Control.
 * Reserved.
 */
#define MICA_CRYPTO_SCHED_7_CTL 0x01b8

#define MICA_CRYPTO_SCHED_7_CTL__SCHED_7_CTL_SHIFT 0
#define MICA_CRYPTO_SCHED_7_CTL__SCHED_7_CTL_WIDTH 64
#define MICA_CRYPTO_SCHED_7_CTL__SCHED_7_CTL_RESET_VAL 0
#define MICA_CRYPTO_SCHED_7_CTL__SCHED_7_CTL_RMASK _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_SCHED_7_CTL__SCHED_7_CTL_MASK  _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_SCHED_7_CTL__SCHED_7_CTL_FIELD 0,63


/* Scratchpad. */
#define MICA_CRYPTO_SCRATCHPAD 0x0020

#define MICA_CRYPTO_SCRATCHPAD__SCRATCHPAD_SHIFT 0
#define MICA_CRYPTO_SCRATCHPAD__SCRATCHPAD_WIDTH 64
#define MICA_CRYPTO_SCRATCHPAD__SCRATCHPAD_RESET_VAL 0
#define MICA_CRYPTO_SCRATCHPAD__SCRATCHPAD_RMASK _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_SCRATCHPAD__SCRATCHPAD_MASK  _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_SCRATCHPAD__SCRATCHPAD_FIELD 0,63


/*
 * Semaphore0.
 * Semaphore
 */
#define MICA_CRYPTO_SEMAPHORE0 0x0028

#define MICA_CRYPTO_SEMAPHORE0__VAL_SHIFT 0
#define MICA_CRYPTO_SEMAPHORE0__VAL_WIDTH 1
#define MICA_CRYPTO_SEMAPHORE0__VAL_RESET_VAL 0
#define MICA_CRYPTO_SEMAPHORE0__VAL_RMASK 0x1
#define MICA_CRYPTO_SEMAPHORE0__VAL_MASK  0x1
#define MICA_CRYPTO_SEMAPHORE0__VAL_FIELD 0,0


/*
 * Semaphore1.
 * Semaphore
 */
#define MICA_CRYPTO_SEMAPHORE1 0x0030

#define MICA_CRYPTO_SEMAPHORE1__VAL_SHIFT 0
#define MICA_CRYPTO_SEMAPHORE1__VAL_WIDTH 1
#define MICA_CRYPTO_SEMAPHORE1__VAL_RESET_VAL 0
#define MICA_CRYPTO_SEMAPHORE1__VAL_RMASK 0x1
#define MICA_CRYPTO_SEMAPHORE1__VAL_MASK  0x1
#define MICA_CRYPTO_SEMAPHORE1__VAL_FIELD 0,0



#endif /* !defined(__ARCH_MICA_CRYPTO_DEF_H__) */

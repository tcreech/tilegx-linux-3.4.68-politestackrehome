/*
 * Copyright 2013 Tilera Corporation. All Rights Reserved.
 *
 *   This program is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU General Public License
 *   as published by the Free Software Foundation, version 2.
 *
 *   This program is distributed in the hope that it will be useful, but
 *   WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or
 *   NON INFRINGEMENT.  See the GNU General Public License for
 *   more details.
 */

#ifndef __ARCH_MICA_CRYPTO_ENG_DEF_H__
#define __ARCH_MICA_CRYPTO_ENG_DEF_H__

#ifdef __ASSEMBLER__
#define _64bit(x) x
#else /* __ASSEMBLER__ */
#ifdef __tile__
#define _64bit(x) x ## UL
#else /* __tile__ */
#define _64bit(x) x ## ULL
#endif /* __tile__ */
#endif /* __ASSEMBLER */





/*
 * AIC Acknowledge.
 * Used to clear interrupts. A 1 written to any one of the bit locations
 * acknowledges the respective interrupt and clears the status bit.
 */
#define MICA_CRYPTO_ENG_AIC_ACK 0x7e20

#define MICA_CRYPTO_ENG_AIC_ACK__QUEUE_EMPTY_IRQ_SHIFT 0
#define MICA_CRYPTO_ENG_AIC_ACK__QUEUE_EMPTY_IRQ_WIDTH 4
#define MICA_CRYPTO_ENG_AIC_ACK__QUEUE_EMPTY_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_ACK__QUEUE_EMPTY_IRQ_RMASK 0xf
#define MICA_CRYPTO_ENG_AIC_ACK__QUEUE_EMPTY_IRQ_MASK  0xf
#define MICA_CRYPTO_ENG_AIC_ACK__QUEUE_EMPTY_IRQ_FIELD 0,3

#define MICA_CRYPTO_ENG_AIC_ACK__QUEUE_RESULT_IRQ_SHIFT 4
#define MICA_CRYPTO_ENG_AIC_ACK__QUEUE_RESULT_IRQ_WIDTH 4
#define MICA_CRYPTO_ENG_AIC_ACK__QUEUE_RESULT_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_ACK__QUEUE_RESULT_IRQ_RMASK 0xf
#define MICA_CRYPTO_ENG_AIC_ACK__QUEUE_RESULT_IRQ_MASK  0xf0
#define MICA_CRYPTO_ENG_AIC_ACK__QUEUE_RESULT_IRQ_FIELD 4,7

#define MICA_CRYPTO_ENG_AIC_ACK__MASTER_IRQ_SHIFT 8
#define MICA_CRYPTO_ENG_AIC_ACK__MASTER_IRQ_WIDTH 1
#define MICA_CRYPTO_ENG_AIC_ACK__MASTER_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_ACK__MASTER_IRQ_RMASK 0x1
#define MICA_CRYPTO_ENG_AIC_ACK__MASTER_IRQ_MASK  0x100
#define MICA_CRYPTO_ENG_AIC_ACK__MASTER_IRQ_FIELD 8,8

#define MICA_CRYPTO_ENG_AIC_ACK__TRNG_IRQ_SHIFT 9
#define MICA_CRYPTO_ENG_AIC_ACK__TRNG_IRQ_WIDTH 1
#define MICA_CRYPTO_ENG_AIC_ACK__TRNG_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_ACK__TRNG_IRQ_RMASK 0x1
#define MICA_CRYPTO_ENG_AIC_ACK__TRNG_IRQ_MASK  0x200
#define MICA_CRYPTO_ENG_AIC_ACK__TRNG_IRQ_FIELD 9,9


/*
 * AIC Enabled Status.
 * These bits reflect the status of the interrupts after polarity control and
 * optional edge detection (i.e. just before masking with the bits in the
 * AIC_ENABLE_CTRL register).
 */
#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT 0x7e20

#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__QUEUE_EMPTY_IRQ_SHIFT 0
#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__QUEUE_EMPTY_IRQ_WIDTH 4
#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__QUEUE_EMPTY_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__QUEUE_EMPTY_IRQ_RMASK 0xf
#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__QUEUE_EMPTY_IRQ_MASK  0xf
#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__QUEUE_EMPTY_IRQ_FIELD 0,3

#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__QUEUE_RESULT_IRQ_SHIFT 4
#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__QUEUE_RESULT_IRQ_WIDTH 4
#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__QUEUE_RESULT_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__QUEUE_RESULT_IRQ_RMASK 0xf
#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__QUEUE_RESULT_IRQ_MASK  0xf0
#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__QUEUE_RESULT_IRQ_FIELD 4,7

#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__MASTER_IRQ_SHIFT 8
#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__MASTER_IRQ_WIDTH 1
#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__MASTER_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__MASTER_IRQ_RMASK 0x1
#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__MASTER_IRQ_MASK  0x100
#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__MASTER_IRQ_FIELD 8,8

#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__TRNG_IRQ_SHIFT 9
#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__TRNG_IRQ_WIDTH 1
#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__TRNG_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__TRNG_IRQ_RMASK 0x1
#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__TRNG_IRQ_MASK  0x200
#define MICA_CRYPTO_ENG_AIC_ENABLED_STAT__TRNG_IRQ_FIELD 9,9


/*
 * AIC Enable Clear.
 * This register provides a way to clear the bits in AIC_ENABLE_CTRL.
 * Writing a '1' clears the corresponding bit; writing a '0' has no effect.
 */
#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR 0x7e28

#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__QUEUE_EMPTY_IRQ_SHIFT 0
#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__QUEUE_EMPTY_IRQ_WIDTH 4
#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__QUEUE_EMPTY_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__QUEUE_EMPTY_IRQ_RMASK 0xf
#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__QUEUE_EMPTY_IRQ_MASK  0xf
#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__QUEUE_EMPTY_IRQ_FIELD 0,3

#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__QUEUE_RESULT_IRQ_SHIFT 4
#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__QUEUE_RESULT_IRQ_WIDTH 4
#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__QUEUE_RESULT_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__QUEUE_RESULT_IRQ_RMASK 0xf
#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__QUEUE_RESULT_IRQ_MASK  0xf0
#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__QUEUE_RESULT_IRQ_FIELD 4,7

#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__MASTER_IRQ_SHIFT 8
#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__MASTER_IRQ_WIDTH 1
#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__MASTER_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__MASTER_IRQ_RMASK 0x1
#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__MASTER_IRQ_MASK  0x100
#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__MASTER_IRQ_FIELD 8,8

#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__TRNG_IRQ_SHIFT 9
#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__TRNG_IRQ_WIDTH 1
#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__TRNG_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__TRNG_IRQ_RMASK 0x1
#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__TRNG_IRQ_MASK  0x200
#define MICA_CRYPTO_ENG_AIC_ENABLE_CLR__TRNG_IRQ_FIELD 9,9


/*
 * AIC Enable Control.
 * This register provides enable control bits per interrupt.  Note that
 * PKA_INT_MASK is used to prevent PKA from sending IPI interrupts.
 */
#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL 0x7e10

#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__QUEUE_EMPTY_IRQ_SHIFT 0
#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__QUEUE_EMPTY_IRQ_WIDTH 4
#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__QUEUE_EMPTY_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__QUEUE_EMPTY_IRQ_RMASK 0xf
#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__QUEUE_EMPTY_IRQ_MASK  0xf
#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__QUEUE_EMPTY_IRQ_FIELD 0,3

#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__QUEUE_RESULT_IRQ_SHIFT 4
#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__QUEUE_RESULT_IRQ_WIDTH 4
#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__QUEUE_RESULT_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__QUEUE_RESULT_IRQ_RMASK 0xf
#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__QUEUE_RESULT_IRQ_MASK  0xf0
#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__QUEUE_RESULT_IRQ_FIELD 4,7

#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__MASTER_IRQ_SHIFT 8
#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__MASTER_IRQ_WIDTH 1
#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__MASTER_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__MASTER_IRQ_RMASK 0x1
#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__MASTER_IRQ_MASK  0x100
#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__MASTER_IRQ_FIELD 8,8

#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__TRNG_IRQ_SHIFT 9
#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__TRNG_IRQ_WIDTH 1
#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__TRNG_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__TRNG_IRQ_RMASK 0x1
#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__TRNG_IRQ_MASK  0x200
#define MICA_CRYPTO_ENG_AIC_ENABLE_CTRL__TRNG_IRQ_FIELD 9,9


/*
 * AIC Enable Set.
 * This register provides a way to set the bits in AIC_ENABLE_CTRL.  Writing
 * a '1' sets the corresponding bit; writing a '0' has no effect.
 */
#define MICA_CRYPTO_ENG_AIC_ENABLE_SET 0x7e18

#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__QUEUE_EMPTY_IRQ_SHIFT 0
#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__QUEUE_EMPTY_IRQ_WIDTH 4
#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__QUEUE_EMPTY_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__QUEUE_EMPTY_IRQ_RMASK 0xf
#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__QUEUE_EMPTY_IRQ_MASK  0xf
#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__QUEUE_EMPTY_IRQ_FIELD 0,3

#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__QUEUE_RESULT_IRQ_SHIFT 4
#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__QUEUE_RESULT_IRQ_WIDTH 4
#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__QUEUE_RESULT_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__QUEUE_RESULT_IRQ_RMASK 0xf
#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__QUEUE_RESULT_IRQ_MASK  0xf0
#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__QUEUE_RESULT_IRQ_FIELD 4,7

#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__MASTER_IRQ_SHIFT 8
#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__MASTER_IRQ_WIDTH 1
#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__MASTER_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__MASTER_IRQ_RMASK 0x1
#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__MASTER_IRQ_MASK  0x100
#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__MASTER_IRQ_FIELD 8,8

#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__TRNG_IRQ_SHIFT 9
#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__TRNG_IRQ_WIDTH 1
#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__TRNG_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__TRNG_IRQ_RMASK 0x1
#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__TRNG_IRQ_MASK  0x200
#define MICA_CRYPTO_ENG_AIC_ENABLE_SET__TRNG_IRQ_FIELD 9,9


/* AIC module configuration. */
#define MICA_CRYPTO_ENG_AIC_OPTIONS 0x7e30

#define MICA_CRYPTO_ENG_AIC_OPTIONS__NUMBER_OF_INPUTS_SHIFT 0
#define MICA_CRYPTO_ENG_AIC_OPTIONS__NUMBER_OF_INPUTS_WIDTH 6
#define MICA_CRYPTO_ENG_AIC_OPTIONS__NUMBER_OF_INPUTS_RESET_VAL 10
#define MICA_CRYPTO_ENG_AIC_OPTIONS__NUMBER_OF_INPUTS_RMASK 0x3f
#define MICA_CRYPTO_ENG_AIC_OPTIONS__NUMBER_OF_INPUTS_MASK  0x3f
#define MICA_CRYPTO_ENG_AIC_OPTIONS__NUMBER_OF_INPUTS_FIELD 0,5


/*
 * AIC Polarity Control.
 * This register is used to configure the signal polarity for each individual
 * interrupt.  Should be written to 0x3ff to indicate high level.
 */
#define MICA_CRYPTO_ENG_AIC_POL_CTRL 0x7e00

#define MICA_CRYPTO_ENG_AIC_POL_CTRL__QUEUE_EMPTY_IRQ_SHIFT 0
#define MICA_CRYPTO_ENG_AIC_POL_CTRL__QUEUE_EMPTY_IRQ_WIDTH 4
#define MICA_CRYPTO_ENG_AIC_POL_CTRL__QUEUE_EMPTY_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_POL_CTRL__QUEUE_EMPTY_IRQ_RMASK 0xf
#define MICA_CRYPTO_ENG_AIC_POL_CTRL__QUEUE_EMPTY_IRQ_MASK  0xf
#define MICA_CRYPTO_ENG_AIC_POL_CTRL__QUEUE_EMPTY_IRQ_FIELD 0,3

#define MICA_CRYPTO_ENG_AIC_POL_CTRL__QUEUE_RESULT_IRQ_SHIFT 4
#define MICA_CRYPTO_ENG_AIC_POL_CTRL__QUEUE_RESULT_IRQ_WIDTH 4
#define MICA_CRYPTO_ENG_AIC_POL_CTRL__QUEUE_RESULT_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_POL_CTRL__QUEUE_RESULT_IRQ_RMASK 0xf
#define MICA_CRYPTO_ENG_AIC_POL_CTRL__QUEUE_RESULT_IRQ_MASK  0xf0
#define MICA_CRYPTO_ENG_AIC_POL_CTRL__QUEUE_RESULT_IRQ_FIELD 4,7

#define MICA_CRYPTO_ENG_AIC_POL_CTRL__MASTER_IRQ_SHIFT 8
#define MICA_CRYPTO_ENG_AIC_POL_CTRL__MASTER_IRQ_WIDTH 1
#define MICA_CRYPTO_ENG_AIC_POL_CTRL__MASTER_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_POL_CTRL__MASTER_IRQ_RMASK 0x1
#define MICA_CRYPTO_ENG_AIC_POL_CTRL__MASTER_IRQ_MASK  0x100
#define MICA_CRYPTO_ENG_AIC_POL_CTRL__MASTER_IRQ_FIELD 8,8

#define MICA_CRYPTO_ENG_AIC_POL_CTRL__TRNG_IRQ_SHIFT 9
#define MICA_CRYPTO_ENG_AIC_POL_CTRL__TRNG_IRQ_WIDTH 1
#define MICA_CRYPTO_ENG_AIC_POL_CTRL__TRNG_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_POL_CTRL__TRNG_IRQ_RMASK 0x1
#define MICA_CRYPTO_ENG_AIC_POL_CTRL__TRNG_IRQ_MASK  0x200
#define MICA_CRYPTO_ENG_AIC_POL_CTRL__TRNG_IRQ_FIELD 9,9


/*
 * AIC Raw Source Status.
 * These bits reflect the status of the interrupts after polarity control and
 * optional edge detection (i.e. just before masking with the bits in the
 * AIC_ENABLE_CTRL register).
 */
#define MICA_CRYPTO_ENG_AIC_RAW_STAT 0x7e18

#define MICA_CRYPTO_ENG_AIC_RAW_STAT__QUEUE_EMPTY_IRQ_SHIFT 0
#define MICA_CRYPTO_ENG_AIC_RAW_STAT__QUEUE_EMPTY_IRQ_WIDTH 4
#define MICA_CRYPTO_ENG_AIC_RAW_STAT__QUEUE_EMPTY_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_RAW_STAT__QUEUE_EMPTY_IRQ_RMASK 0xf
#define MICA_CRYPTO_ENG_AIC_RAW_STAT__QUEUE_EMPTY_IRQ_MASK  0xf
#define MICA_CRYPTO_ENG_AIC_RAW_STAT__QUEUE_EMPTY_IRQ_FIELD 0,3

#define MICA_CRYPTO_ENG_AIC_RAW_STAT__QUEUE_RESULT_IRQ_SHIFT 4
#define MICA_CRYPTO_ENG_AIC_RAW_STAT__QUEUE_RESULT_IRQ_WIDTH 4
#define MICA_CRYPTO_ENG_AIC_RAW_STAT__QUEUE_RESULT_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_RAW_STAT__QUEUE_RESULT_IRQ_RMASK 0xf
#define MICA_CRYPTO_ENG_AIC_RAW_STAT__QUEUE_RESULT_IRQ_MASK  0xf0
#define MICA_CRYPTO_ENG_AIC_RAW_STAT__QUEUE_RESULT_IRQ_FIELD 4,7

#define MICA_CRYPTO_ENG_AIC_RAW_STAT__MASTER_IRQ_SHIFT 8
#define MICA_CRYPTO_ENG_AIC_RAW_STAT__MASTER_IRQ_WIDTH 1
#define MICA_CRYPTO_ENG_AIC_RAW_STAT__MASTER_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_RAW_STAT__MASTER_IRQ_RMASK 0x1
#define MICA_CRYPTO_ENG_AIC_RAW_STAT__MASTER_IRQ_MASK  0x100
#define MICA_CRYPTO_ENG_AIC_RAW_STAT__MASTER_IRQ_FIELD 8,8

#define MICA_CRYPTO_ENG_AIC_RAW_STAT__TRNG_IRQ_SHIFT 9
#define MICA_CRYPTO_ENG_AIC_RAW_STAT__TRNG_IRQ_WIDTH 1
#define MICA_CRYPTO_ENG_AIC_RAW_STAT__TRNG_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_RAW_STAT__TRNG_IRQ_RMASK 0x1
#define MICA_CRYPTO_ENG_AIC_RAW_STAT__TRNG_IRQ_MASK  0x200
#define MICA_CRYPTO_ENG_AIC_RAW_STAT__TRNG_IRQ_FIELD 9,9


/*
 * AIC Type Control.
 * This register is used to configure the signal type for each individual
 * interrupt.  Should be written to 0x3ff to indicate edge.
 */
#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL 0x7e08

#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__QUEUE_EMPTY_IRQ_SHIFT 0
#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__QUEUE_EMPTY_IRQ_WIDTH 4
#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__QUEUE_EMPTY_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__QUEUE_EMPTY_IRQ_RMASK 0xf
#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__QUEUE_EMPTY_IRQ_MASK  0xf
#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__QUEUE_EMPTY_IRQ_FIELD 0,3

#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__QUEUE_RESULT_IRQ_SHIFT 4
#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__QUEUE_RESULT_IRQ_WIDTH 4
#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__QUEUE_RESULT_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__QUEUE_RESULT_IRQ_RMASK 0xf
#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__QUEUE_RESULT_IRQ_MASK  0xf0
#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__QUEUE_RESULT_IRQ_FIELD 4,7

#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__MASTER_IRQ_SHIFT 8
#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__MASTER_IRQ_WIDTH 1
#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__MASTER_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__MASTER_IRQ_RMASK 0x1
#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__MASTER_IRQ_MASK  0x100
#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__MASTER_IRQ_FIELD 8,8

#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__TRNG_IRQ_SHIFT 9
#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__TRNG_IRQ_WIDTH 1
#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__TRNG_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__TRNG_IRQ_RMASK 0x1
#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__TRNG_IRQ_MASK  0x200
#define MICA_CRYPTO_ENG_AIC_TYPE_CTRL__TRNG_IRQ_FIELD 9,9


/*
 * PKA module version.
 */
#define MICA_CRYPTO_ENG_AIC_VERSION 0x7e38

#define MICA_CRYPTO_ENG_AIC_VERSION__AIC_NUMBER_SHIFT 0
#define MICA_CRYPTO_ENG_AIC_VERSION__AIC_NUMBER_WIDTH 8
#define MICA_CRYPTO_ENG_AIC_VERSION__AIC_NUMBER_RESET_VAL 201
#define MICA_CRYPTO_ENG_AIC_VERSION__AIC_NUMBER_RMASK 0xff
#define MICA_CRYPTO_ENG_AIC_VERSION__AIC_NUMBER_MASK  0xff
#define MICA_CRYPTO_ENG_AIC_VERSION__AIC_NUMBER_FIELD 0,7

#define MICA_CRYPTO_ENG_AIC_VERSION__AIC_NUMBER_COMPLEMENT_SHIFT 8
#define MICA_CRYPTO_ENG_AIC_VERSION__AIC_NUMBER_COMPLEMENT_WIDTH 8
#define MICA_CRYPTO_ENG_AIC_VERSION__AIC_NUMBER_COMPLEMENT_RESET_VAL 54
#define MICA_CRYPTO_ENG_AIC_VERSION__AIC_NUMBER_COMPLEMENT_RMASK 0xff
#define MICA_CRYPTO_ENG_AIC_VERSION__AIC_NUMBER_COMPLEMENT_MASK  0xff00
#define MICA_CRYPTO_ENG_AIC_VERSION__AIC_NUMBER_COMPLEMENT_FIELD 8,15

#define MICA_CRYPTO_ENG_AIC_VERSION__PATCH_LEVEL_SHIFT 16
#define MICA_CRYPTO_ENG_AIC_VERSION__PATCH_LEVEL_WIDTH 4
#define MICA_CRYPTO_ENG_AIC_VERSION__PATCH_LEVEL_RESET_VAL 0
#define MICA_CRYPTO_ENG_AIC_VERSION__PATCH_LEVEL_RMASK 0xf
#define MICA_CRYPTO_ENG_AIC_VERSION__PATCH_LEVEL_MASK  0xf0000
#define MICA_CRYPTO_ENG_AIC_VERSION__PATCH_LEVEL_FIELD 16,19

#define MICA_CRYPTO_ENG_AIC_VERSION__MINOR_VERSION_NUMBER_SHIFT 20
#define MICA_CRYPTO_ENG_AIC_VERSION__MINOR_VERSION_NUMBER_WIDTH 4
#define MICA_CRYPTO_ENG_AIC_VERSION__MINOR_VERSION_NUMBER_RESET_VAL 1
#define MICA_CRYPTO_ENG_AIC_VERSION__MINOR_VERSION_NUMBER_RMASK 0xf
#define MICA_CRYPTO_ENG_AIC_VERSION__MINOR_VERSION_NUMBER_MASK  0xf00000
#define MICA_CRYPTO_ENG_AIC_VERSION__MINOR_VERSION_NUMBER_FIELD 20,23

#define MICA_CRYPTO_ENG_AIC_VERSION__MAJOR_VERSION_NUMBER_SHIFT 24
#define MICA_CRYPTO_ENG_AIC_VERSION__MAJOR_VERSION_NUMBER_WIDTH 4
#define MICA_CRYPTO_ENG_AIC_VERSION__MAJOR_VERSION_NUMBER_RESET_VAL 1
#define MICA_CRYPTO_ENG_AIC_VERSION__MAJOR_VERSION_NUMBER_RMASK 0xf
#define MICA_CRYPTO_ENG_AIC_VERSION__MAJOR_VERSION_NUMBER_MASK  0xf000000
#define MICA_CRYPTO_ENG_AIC_VERSION__MAJOR_VERSION_NUMBER_FIELD 24,27


/*
 * PKA Command Ring Base 0.
 * Base address in Window RAM for command queue 0
 */
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_0 0x0000

#define MICA_CRYPTO_ENG_CMMD_RING_BASE_0__ADDRESS_SHIFT 0
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_0__ADDRESS_WIDTH 32
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_0__ADDRESS_RESET_VAL 0
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_0__ADDRESS_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_0__ADDRESS_MASK  0xffffffff
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_0__ADDRESS_FIELD 0,31


/*
 * PKA Command Ring Base 1.
 * Base address in Window RAM for command queue 1
 */
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_1 0x0020

#define MICA_CRYPTO_ENG_CMMD_RING_BASE_1__ADDRESS_SHIFT 0
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_1__ADDRESS_WIDTH 32
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_1__ADDRESS_RESET_VAL 0
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_1__ADDRESS_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_1__ADDRESS_MASK  0xffffffff
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_1__ADDRESS_FIELD 0,31


/*
 * PKA Command Ring Base 2.
 * Base address in Window RAM for command queue 2
 */
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_2 0x0040

#define MICA_CRYPTO_ENG_CMMD_RING_BASE_2__ADDRESS_SHIFT 0
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_2__ADDRESS_WIDTH 32
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_2__ADDRESS_RESET_VAL 0
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_2__ADDRESS_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_2__ADDRESS_MASK  0xffffffff
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_2__ADDRESS_FIELD 0,31


/*
 * PKA Command Ring Base 3.
 * Base address in Window RAM for command queue 3
 */
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_3 0x0060

#define MICA_CRYPTO_ENG_CMMD_RING_BASE_3__ADDRESS_SHIFT 0
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_3__ADDRESS_WIDTH 32
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_3__ADDRESS_RESET_VAL 0
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_3__ADDRESS_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_3__ADDRESS_MASK  0xffffffff
#define MICA_CRYPTO_ENG_CMMD_RING_BASE_3__ADDRESS_FIELD 0,31


/*
 * PKA Command Count 0.
 * Command count for command queue 0
 */
#define MICA_CRYPTO_ENG_COMMAND_COUNT_0 0x7c00

#define MICA_CRYPTO_ENG_COMMAND_COUNT_0__VALUE_SHIFT 0
#define MICA_CRYPTO_ENG_COMMAND_COUNT_0__VALUE_WIDTH 16
#define MICA_CRYPTO_ENG_COMMAND_COUNT_0__VALUE_RESET_VAL 0
#define MICA_CRYPTO_ENG_COMMAND_COUNT_0__VALUE_RMASK 0xffff
#define MICA_CRYPTO_ENG_COMMAND_COUNT_0__VALUE_MASK  0xffff
#define MICA_CRYPTO_ENG_COMMAND_COUNT_0__VALUE_FIELD 0,15


/*
 * PKA Command Count 1.
 * Command count for command queue 1
 */
#define MICA_CRYPTO_ENG_COMMAND_COUNT_1 0x7c08

#define MICA_CRYPTO_ENG_COMMAND_COUNT_1__VALUE_SHIFT 0
#define MICA_CRYPTO_ENG_COMMAND_COUNT_1__VALUE_WIDTH 16
#define MICA_CRYPTO_ENG_COMMAND_COUNT_1__VALUE_RESET_VAL 0
#define MICA_CRYPTO_ENG_COMMAND_COUNT_1__VALUE_RMASK 0xffff
#define MICA_CRYPTO_ENG_COMMAND_COUNT_1__VALUE_MASK  0xffff
#define MICA_CRYPTO_ENG_COMMAND_COUNT_1__VALUE_FIELD 0,15


/*
 * PKA Command Count 2.
 * Command count for command queue 2
 */
#define MICA_CRYPTO_ENG_COMMAND_COUNT_2 0x7c10

#define MICA_CRYPTO_ENG_COMMAND_COUNT_2__VALUE_SHIFT 0
#define MICA_CRYPTO_ENG_COMMAND_COUNT_2__VALUE_WIDTH 16
#define MICA_CRYPTO_ENG_COMMAND_COUNT_2__VALUE_RESET_VAL 0
#define MICA_CRYPTO_ENG_COMMAND_COUNT_2__VALUE_RMASK 0xffff
#define MICA_CRYPTO_ENG_COMMAND_COUNT_2__VALUE_MASK  0xffff
#define MICA_CRYPTO_ENG_COMMAND_COUNT_2__VALUE_FIELD 0,15


/*
 * PKA Command Count 3.
 * Command count for command queue 3
 */
#define MICA_CRYPTO_ENG_COMMAND_COUNT_3 0x7c18

#define MICA_CRYPTO_ENG_COMMAND_COUNT_3__VALUE_SHIFT 0
#define MICA_CRYPTO_ENG_COMMAND_COUNT_3__VALUE_WIDTH 16
#define MICA_CRYPTO_ENG_COMMAND_COUNT_3__VALUE_RESET_VAL 0
#define MICA_CRYPTO_ENG_COMMAND_COUNT_3__VALUE_RMASK 0xffff
#define MICA_CRYPTO_ENG_COMMAND_COUNT_3__VALUE_MASK  0xffff
#define MICA_CRYPTO_ENG_COMMAND_COUNT_3__VALUE_FIELD 0,15


/*
 * Packet Engine Context Control.
 * This register configures the context size and context fetching mode.
 */
#define MICA_CRYPTO_ENG_CONTEXT_CONTROL 0x0040

#define MICA_CRYPTO_ENG_CONTEXT_CONTROL__SIZE_SHIFT 0
#define MICA_CRYPTO_ENG_CONTEXT_CONTROL__SIZE_WIDTH 8
#define MICA_CRYPTO_ENG_CONTEXT_CONTROL__SIZE_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_CONTROL__SIZE_RMASK 0xff
#define MICA_CRYPTO_ENG_CONTEXT_CONTROL__SIZE_MASK  0xff
#define MICA_CRYPTO_ENG_CONTEXT_CONTROL__SIZE_FIELD 0,7

#define MICA_CRYPTO_ENG_CONTEXT_CONTROL__ADDRESS_MODE_SHIFT 8
#define MICA_CRYPTO_ENG_CONTEXT_CONTROL__ADDRESS_MODE_WIDTH 1
#define MICA_CRYPTO_ENG_CONTEXT_CONTROL__ADDRESS_MODE_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_CONTROL__ADDRESS_MODE_RMASK 0x1
#define MICA_CRYPTO_ENG_CONTEXT_CONTROL__ADDRESS_MODE_MASK  0x100
#define MICA_CRYPTO_ENG_CONTEXT_CONTROL__ADDRESS_MODE_FIELD 8,8

#define MICA_CRYPTO_ENG_CONTEXT_CONTROL__CONTROL_MODE_SHIFT 9
#define MICA_CRYPTO_ENG_CONTEXT_CONTROL__CONTROL_MODE_WIDTH 1
#define MICA_CRYPTO_ENG_CONTEXT_CONTROL__CONTROL_MODE_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_CONTROL__CONTROL_MODE_RMASK 0x1
#define MICA_CRYPTO_ENG_CONTEXT_CONTROL__CONTROL_MODE_MASK  0x200
#define MICA_CRYPTO_ENG_CONTEXT_CONTROL__CONTROL_MODE_FIELD 9,9


/*
 * Context Status.
 * This register provides the context status of the currently active packet.
 */
#define MICA_CRYPTO_ENG_CONTEXT_STATUS 0x0060

#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E0_SHIFT 0
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E0_WIDTH 1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E0_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E0_RMASK 0x1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E0_MASK  0x1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E0_FIELD 0,0

#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E1_SHIFT 1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E1_WIDTH 1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E1_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E1_RMASK 0x1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E1_MASK  0x2
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E1_FIELD 1,1

#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E2_SHIFT 2
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E2_WIDTH 1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E2_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E2_RMASK 0x1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E2_MASK  0x4
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E2_FIELD 2,2

#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E3_SHIFT 3
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E3_WIDTH 1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E3_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E3_RMASK 0x1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E3_MASK  0x8
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E3_FIELD 3,3

#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E4_SHIFT 4
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E4_WIDTH 1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E4_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E4_RMASK 0x1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E4_MASK  0x10
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E4_FIELD 4,4

#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E5_SHIFT 5
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E5_WIDTH 1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E5_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E5_RMASK 0x1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E5_MASK  0x20
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E5_FIELD 5,5

#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E6_SHIFT 6
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E6_WIDTH 1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E6_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E6_RMASK 0x1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E6_MASK  0x40
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E6_FIELD 6,6

#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E7_SHIFT 7
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E7_WIDTH 1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E7_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E7_RMASK 0x1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E7_MASK  0x80
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E7_FIELD 7,7

#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E8_SHIFT 8
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E8_WIDTH 1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E8_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E8_RMASK 0x1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E8_MASK  0x100
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E8_FIELD 8,8

#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E9_SHIFT 9
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E9_WIDTH 1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E9_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E9_RMASK 0x1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E9_MASK  0x200
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E9_FIELD 9,9

#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E10_SHIFT 10
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E10_WIDTH 1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E10_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E10_RMASK 0x1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E10_MASK  0x400
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E10_FIELD 10,10

#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E11_SHIFT 11
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E11_WIDTH 1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E11_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E11_RMASK 0x1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E11_MASK  0x800
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E11_FIELD 11,11

#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E12_SHIFT 12
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E12_WIDTH 1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E12_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E12_RMASK 0x1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E12_MASK  0x1000
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E12_FIELD 12,12

#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E13_SHIFT 13
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E13_WIDTH 1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E13_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E13_RMASK 0x1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E13_MASK  0x2000
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E13_FIELD 13,13

#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E14_SHIFT 14
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E14_WIDTH 1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E14_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E14_RMASK 0x1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E14_MASK  0x4000
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__E14_FIELD 14,14

#define MICA_CRYPTO_ENG_CONTEXT_STATUS__AVAILABLE_TOKENS_SHIFT 16
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__AVAILABLE_TOKENS_WIDTH 2
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__AVAILABLE_TOKENS_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__AVAILABLE_TOKENS_RMASK 0x3
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__AVAILABLE_TOKENS_MASK  0x30000
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__AVAILABLE_TOKENS_FIELD 16,17

#define MICA_CRYPTO_ENG_CONTEXT_STATUS__ACTIVE_CONTEXT_SHIFT 18
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__ACTIVE_CONTEXT_WIDTH 1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__ACTIVE_CONTEXT_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__ACTIVE_CONTEXT_RMASK 0x1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__ACTIVE_CONTEXT_MASK  0x40000
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__ACTIVE_CONTEXT_FIELD 18,18

#define MICA_CRYPTO_ENG_CONTEXT_STATUS__NEXT_CONTEXT_SHIFT 19
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__NEXT_CONTEXT_WIDTH 1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__NEXT_CONTEXT_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__NEXT_CONTEXT_RMASK 0x1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__NEXT_CONTEXT_MASK  0x80000
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__NEXT_CONTEXT_FIELD 19,19

#define MICA_CRYPTO_ENG_CONTEXT_STATUS__RESULT_CONTEXT_SHIFT 20
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__RESULT_CONTEXT_WIDTH 1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__RESULT_CONTEXT_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__RESULT_CONTEXT_RMASK 0x1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__RESULT_CONTEXT_MASK  0x100000
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__RESULT_CONTEXT_FIELD 20,20

#define MICA_CRYPTO_ENG_CONTEXT_STATUS__ERROR_RECOVERY_SHIFT 21
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__ERROR_RECOVERY_WIDTH 1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__ERROR_RECOVERY_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__ERROR_RECOVERY_RMASK 0x1
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__ERROR_RECOVERY_MASK  0x200000
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__ERROR_RECOVERY_FIELD 21,21

#define MICA_CRYPTO_ENG_CONTEXT_STATUS__PACKET_PROCESSING_CURRENT_STATE_SHIFT 24
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__PACKET_PROCESSING_CURRENT_STATE_WIDTH 4
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__PACKET_PROCESSING_CURRENT_STATE_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__PACKET_PROCESSING_CURRENT_STATE_RMASK 0xf
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__PACKET_PROCESSING_CURRENT_STATE_MASK  0xf000000
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__PACKET_PROCESSING_CURRENT_STATE_FIELD 24,27

#define MICA_CRYPTO_ENG_CONTEXT_STATUS__NEXT_PACKET_CURRENT_STATE_SHIFT 28
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__NEXT_PACKET_CURRENT_STATE_WIDTH 4
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__NEXT_PACKET_CURRENT_STATE_RESET_VAL 0
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__NEXT_PACKET_CURRENT_STATE_RMASK 0xf
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__NEXT_PACKET_CURRENT_STATE_MASK  0xf0000000
#define MICA_CRYPTO_ENG_CONTEXT_STATUS__NEXT_PACKET_CURRENT_STATE_FIELD 28,31


/*
 * Engine Performance Operations.
 * This register counts cycles that the Engine is active.
 */
#define MICA_CRYPTO_ENG_EP_ACTIVE_CYCLES 0x3f830

#define MICA_CRYPTO_ENG_EP_ACTIVE_CYCLES__ACTIVE_CYCLES_SHIFT 0
#define MICA_CRYPTO_ENG_EP_ACTIVE_CYCLES__ACTIVE_CYCLES_WIDTH 32
#define MICA_CRYPTO_ENG_EP_ACTIVE_CYCLES__ACTIVE_CYCLES_RESET_VAL 0
#define MICA_CRYPTO_ENG_EP_ACTIVE_CYCLES__ACTIVE_CYCLES_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_EP_ACTIVE_CYCLES__ACTIVE_CYCLES_MASK  0xffffffff
#define MICA_CRYPTO_ENG_EP_ACTIVE_CYCLES__ACTIVE_CYCLES_FIELD 0,31


/*
 * Engine Performance Clear.
 * This register is used to clear the Engine performance monitor counters.
 */
#define MICA_CRYPTO_ENG_EP_CLEAR 0x3f808

#define MICA_CRYPTO_ENG_EP_CLEAR__CLEAR_SHIFT 0
#define MICA_CRYPTO_ENG_EP_CLEAR__CLEAR_WIDTH 32
#define MICA_CRYPTO_ENG_EP_CLEAR__CLEAR_RESET_VAL 0
#define MICA_CRYPTO_ENG_EP_CLEAR__CLEAR_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_EP_CLEAR__CLEAR_MASK  0xffffffff
#define MICA_CRYPTO_ENG_EP_CLEAR__CLEAR_FIELD 0,31


/*
 * Engine Performance Cycles.
 * This register counts clock cycles of the MiCA clock.
 */
#define MICA_CRYPTO_ENG_EP_CYCLES 0x3f810

#define MICA_CRYPTO_ENG_EP_CYCLES__CYCLES_SHIFT 0
#define MICA_CRYPTO_ENG_EP_CYCLES__CYCLES_WIDTH 32
#define MICA_CRYPTO_ENG_EP_CYCLES__CYCLES_RESET_VAL 0
#define MICA_CRYPTO_ENG_EP_CYCLES__CYCLES_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_EP_CYCLES__CYCLES_MASK  0xffffffff
#define MICA_CRYPTO_ENG_EP_CYCLES__CYCLES_FIELD 0,31


/*
 * Engine Performance Source Bytes.
 * This register counts the number of bytes of Destination Data written by
 * the Engine.
 */
#define MICA_CRYPTO_ENG_EP_DST_BYTES 0x3f828

#define MICA_CRYPTO_ENG_EP_DST_BYTES__DST_BYTES_SHIFT 0
#define MICA_CRYPTO_ENG_EP_DST_BYTES__DST_BYTES_WIDTH 32
#define MICA_CRYPTO_ENG_EP_DST_BYTES__DST_BYTES_RESET_VAL 0
#define MICA_CRYPTO_ENG_EP_DST_BYTES__DST_BYTES_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_EP_DST_BYTES__DST_BYTES_MASK  0xffffffff
#define MICA_CRYPTO_ENG_EP_DST_BYTES__DST_BYTES_FIELD 0,31


/*
 * Engine Performance Enable.
 * This register is used to enable performance monitoring in the Engine.
 */
#define MICA_CRYPTO_ENG_EP_ENABLE 0x3f800

#define MICA_CRYPTO_ENG_EP_ENABLE__ENABLE_SHIFT 0
#define MICA_CRYPTO_ENG_EP_ENABLE__ENABLE_WIDTH 1
#define MICA_CRYPTO_ENG_EP_ENABLE__ENABLE_RESET_VAL 0
#define MICA_CRYPTO_ENG_EP_ENABLE__ENABLE_RMASK 0x1
#define MICA_CRYPTO_ENG_EP_ENABLE__ENABLE_MASK  0x1
#define MICA_CRYPTO_ENG_EP_ENABLE__ENABLE_FIELD 0,0


/*
 * Engine Performance Operations.
 * This register counts operations done by the Engine.
 */
#define MICA_CRYPTO_ENG_EP_OPS 0x3f818

#define MICA_CRYPTO_ENG_EP_OPS__OPS_SHIFT 0
#define MICA_CRYPTO_ENG_EP_OPS__OPS_WIDTH 32
#define MICA_CRYPTO_ENG_EP_OPS__OPS_RESET_VAL 0
#define MICA_CRYPTO_ENG_EP_OPS__OPS_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_EP_OPS__OPS_MASK  0xffffffff
#define MICA_CRYPTO_ENG_EP_OPS__OPS_FIELD 0,31


/*
 * Engine Performance Source Bytes.
 * This register counts the number of bytes of Source Data read by the Engine.
 */
#define MICA_CRYPTO_ENG_EP_SRC_BYTES 0x3f820

#define MICA_CRYPTO_ENG_EP_SRC_BYTES__SRC_BYTES_SHIFT 0
#define MICA_CRYPTO_ENG_EP_SRC_BYTES__SRC_BYTES_WIDTH 32
#define MICA_CRYPTO_ENG_EP_SRC_BYTES__SRC_BYTES_RESET_VAL 0
#define MICA_CRYPTO_ENG_EP_SRC_BYTES__SRC_BYTES_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_EP_SRC_BYTES__SRC_BYTES_MASK  0xffffffff
#define MICA_CRYPTO_ENG_EP_SRC_BYTES__SRC_BYTES_FIELD 0,31


/*
 * Free Running Oscillator Clock Count.
 * Provides count of FRO selected by TST_FRO register, relative to crypto
 * block reference clock.
 */
#define MICA_CRYPTO_ENG_FRO_COUNT 0x0058

#define MICA_CRYPTO_ENG_FRO_COUNT__RUN_SHIFT 0
#define MICA_CRYPTO_ENG_FRO_COUNT__RUN_WIDTH 1
#define MICA_CRYPTO_ENG_FRO_COUNT__RUN_RESET_VAL 0
#define MICA_CRYPTO_ENG_FRO_COUNT__RUN_RMASK 0x1
#define MICA_CRYPTO_ENG_FRO_COUNT__RUN_MASK  0x1
#define MICA_CRYPTO_ENG_FRO_COUNT__RUN_FIELD 0,0

#define MICA_CRYPTO_ENG_FRO_COUNT__COUNT_SHIFT 1
#define MICA_CRYPTO_ENG_FRO_COUNT__COUNT_WIDTH 15
#define MICA_CRYPTO_ENG_FRO_COUNT__COUNT_RESET_VAL 0
#define MICA_CRYPTO_ENG_FRO_COUNT__COUNT_RMASK 0x7fff
#define MICA_CRYPTO_ENG_FRO_COUNT__COUNT_MASK  0xfffe
#define MICA_CRYPTO_ENG_FRO_COUNT__COUNT_FIELD 1,15


/*
 * Input transfer Control and Status.
 * Input transfer Control and Status.
 */
#define MICA_CRYPTO_ENG_INPUT_TRANSFER_CONTROL_STATUS 0x00a0

#define MICA_CRYPTO_ENG_INPUT_TRANSFER_CONTROL_STATUS__AVAILABLE_DWORDS_SHIFT 0
#define MICA_CRYPTO_ENG_INPUT_TRANSFER_CONTROL_STATUS__AVAILABLE_DWORDS_WIDTH 8
#define MICA_CRYPTO_ENG_INPUT_TRANSFER_CONTROL_STATUS__AVAILABLE_DWORDS_RESET_VAL 0
#define MICA_CRYPTO_ENG_INPUT_TRANSFER_CONTROL_STATUS__AVAILABLE_DWORDS_RMASK 0xff
#define MICA_CRYPTO_ENG_INPUT_TRANSFER_CONTROL_STATUS__AVAILABLE_DWORDS_MASK  0xff
#define MICA_CRYPTO_ENG_INPUT_TRANSFER_CONTROL_STATUS__AVAILABLE_DWORDS_FIELD 0,7


/*
 * Parity Error Interrupt Binding.
 * This register contains the interrupt binding for parity error interrupts.
 */
#define MICA_CRYPTO_ENG_INT_BINDING_PARITY 0x0150

#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__EVENT_NUM_SHIFT 0
#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__EVENT_NUM_WIDTH 5
#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__EVENT_NUM_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__EVENT_NUM_RMASK 0x1f
#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__EVENT_NUM_MASK  0x1f
#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__EVENT_NUM_FIELD 0,4

#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__INT_NUM_SHIFT 5
#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__INT_NUM_WIDTH 2
#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__INT_NUM_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__INT_NUM_RMASK 0x3
#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__INT_NUM_MASK  0x60
#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__INT_NUM_FIELD 5,6

#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__Y_COORD_SHIFT 7
#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__Y_COORD_WIDTH 4
#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__Y_COORD_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__Y_COORD_RMASK 0xf
#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__Y_COORD_MASK  0x780
#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__Y_COORD_FIELD 7,10

#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__X_COORD_SHIFT 18
#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__X_COORD_WIDTH 4
#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__X_COORD_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__X_COORD_RMASK 0xf
#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__X_COORD_MASK  0x3c0000
#define MICA_CRYPTO_ENG_INT_BINDING_PARITY__X_COORD_FIELD 18,21


/*
 * PKA Master Controller Interrupt Binding.
 * This register contains the interrupt binding for PKA master controller
 * interrupts.
 */
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER 0x0140

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__EVENT_NUM_SHIFT 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__EVENT_NUM_WIDTH 5
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__EVENT_NUM_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__EVENT_NUM_RMASK 0x1f
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__EVENT_NUM_MASK  0x1f
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__EVENT_NUM_FIELD 0,4

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__INT_NUM_SHIFT 5
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__INT_NUM_WIDTH 2
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__INT_NUM_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__INT_NUM_RMASK 0x3
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__INT_NUM_MASK  0x60
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__INT_NUM_FIELD 5,6

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__Y_COORD_SHIFT 7
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__Y_COORD_WIDTH 4
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__Y_COORD_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__Y_COORD_RMASK 0xf
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__Y_COORD_MASK  0x780
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__Y_COORD_FIELD 7,10

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__X_COORD_SHIFT 18
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__X_COORD_WIDTH 4
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__X_COORD_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__X_COORD_RMASK 0xf
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__X_COORD_MASK  0x3c0000
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_MASTER__X_COORD_FIELD 18,21


/*
 * PKA Command Queue 0 Empty Interrupt Binding.
 * This register contains the interrupt binding for PKA Command Queue 0 empty
 * (below threshold)interrupts.
 */
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY 0x0100

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__EVENT_NUM_SHIFT 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__EVENT_NUM_WIDTH 5
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__EVENT_NUM_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__EVENT_NUM_RMASK 0x1f
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__EVENT_NUM_MASK  0x1f
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__EVENT_NUM_FIELD 0,4

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__INT_NUM_SHIFT 5
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__INT_NUM_WIDTH 2
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__INT_NUM_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__INT_NUM_RMASK 0x3
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__INT_NUM_MASK  0x60
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__INT_NUM_FIELD 5,6

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__Y_COORD_SHIFT 7
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__Y_COORD_WIDTH 4
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__Y_COORD_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__Y_COORD_RMASK 0xf
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__Y_COORD_MASK  0x780
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__Y_COORD_FIELD 7,10

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__X_COORD_SHIFT 18
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__X_COORD_WIDTH 4
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__X_COORD_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__X_COORD_RMASK 0xf
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__X_COORD_MASK  0x3c0000
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_EMPTY__X_COORD_FIELD 18,21


/*
 * PKA Command Queue 0 Interrupt Binding.
 * This register contains the interrupt binding for PKA Result Queue 0 above
 * threshold interrupts.
 */
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT 0x0120

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__EVENT_NUM_SHIFT 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__EVENT_NUM_WIDTH 5
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__EVENT_NUM_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__EVENT_NUM_RMASK 0x1f
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__EVENT_NUM_MASK  0x1f
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__EVENT_NUM_FIELD 0,4

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__INT_NUM_SHIFT 5
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__INT_NUM_WIDTH 2
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__INT_NUM_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__INT_NUM_RMASK 0x3
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__INT_NUM_MASK  0x60
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__INT_NUM_FIELD 5,6

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__Y_COORD_SHIFT 7
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__Y_COORD_WIDTH 4
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__Y_COORD_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__Y_COORD_RMASK 0xf
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__Y_COORD_MASK  0x780
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__Y_COORD_FIELD 7,10

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__X_COORD_SHIFT 18
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__X_COORD_WIDTH 4
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__X_COORD_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__X_COORD_RMASK 0xf
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__X_COORD_MASK  0x3c0000
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_0_RESULT__X_COORD_FIELD 18,21


/*
 * PKA Command Queue 1 Empty Interrupt Binding.
 * This register contains the interrupt binding for PKA Command Queue 1 empty
 * (below threshold)interrupts.
 */
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY 0x0108

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__EVENT_NUM_SHIFT 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__EVENT_NUM_WIDTH 5
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__EVENT_NUM_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__EVENT_NUM_RMASK 0x1f
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__EVENT_NUM_MASK  0x1f
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__EVENT_NUM_FIELD 0,4

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__INT_NUM_SHIFT 5
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__INT_NUM_WIDTH 2
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__INT_NUM_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__INT_NUM_RMASK 0x3
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__INT_NUM_MASK  0x60
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__INT_NUM_FIELD 5,6

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__Y_COORD_SHIFT 7
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__Y_COORD_WIDTH 4
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__Y_COORD_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__Y_COORD_RMASK 0xf
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__Y_COORD_MASK  0x780
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__Y_COORD_FIELD 7,10

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__X_COORD_SHIFT 18
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__X_COORD_WIDTH 4
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__X_COORD_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__X_COORD_RMASK 0xf
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__X_COORD_MASK  0x3c0000
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_EMPTY__X_COORD_FIELD 18,21


/*
 * PKA Command Queue 1 Interrupt Binding.
 * This register contains the interrupt binding for PKA Result Queue 1 above
 * threshold interrupts.
 */
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT 0x0128

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__EVENT_NUM_SHIFT 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__EVENT_NUM_WIDTH 5
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__EVENT_NUM_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__EVENT_NUM_RMASK 0x1f
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__EVENT_NUM_MASK  0x1f
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__EVENT_NUM_FIELD 0,4

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__INT_NUM_SHIFT 5
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__INT_NUM_WIDTH 2
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__INT_NUM_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__INT_NUM_RMASK 0x3
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__INT_NUM_MASK  0x60
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__INT_NUM_FIELD 5,6

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__Y_COORD_SHIFT 7
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__Y_COORD_WIDTH 4
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__Y_COORD_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__Y_COORD_RMASK 0xf
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__Y_COORD_MASK  0x780
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__Y_COORD_FIELD 7,10

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__X_COORD_SHIFT 18
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__X_COORD_WIDTH 4
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__X_COORD_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__X_COORD_RMASK 0xf
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__X_COORD_MASK  0x3c0000
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_1_RESULT__X_COORD_FIELD 18,21


/*
 * PKA Command Queue 2 Empty Interrupt Binding.
 * This register contains the interrupt binding for PKA Command Queue 2 empty
 * (below threshold)interrupts.
 */
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY 0x0110

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__EVENT_NUM_SHIFT 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__EVENT_NUM_WIDTH 5
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__EVENT_NUM_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__EVENT_NUM_RMASK 0x1f
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__EVENT_NUM_MASK  0x1f
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__EVENT_NUM_FIELD 0,4

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__INT_NUM_SHIFT 5
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__INT_NUM_WIDTH 2
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__INT_NUM_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__INT_NUM_RMASK 0x3
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__INT_NUM_MASK  0x60
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__INT_NUM_FIELD 5,6

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__Y_COORD_SHIFT 7
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__Y_COORD_WIDTH 4
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__Y_COORD_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__Y_COORD_RMASK 0xf
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__Y_COORD_MASK  0x780
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__Y_COORD_FIELD 7,10

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__X_COORD_SHIFT 18
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__X_COORD_WIDTH 4
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__X_COORD_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__X_COORD_RMASK 0xf
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__X_COORD_MASK  0x3c0000
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_EMPTY__X_COORD_FIELD 18,21


/*
 * PKA Command Queue 2 Interrupt Binding.
 * This register contains the interrupt binding for PKA Result Queue 2 above
 * threshold interrupts.
 */
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT 0x0130

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__EVENT_NUM_SHIFT 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__EVENT_NUM_WIDTH 5
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__EVENT_NUM_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__EVENT_NUM_RMASK 0x1f
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__EVENT_NUM_MASK  0x1f
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__EVENT_NUM_FIELD 0,4

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__INT_NUM_SHIFT 5
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__INT_NUM_WIDTH 2
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__INT_NUM_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__INT_NUM_RMASK 0x3
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__INT_NUM_MASK  0x60
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__INT_NUM_FIELD 5,6

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__Y_COORD_SHIFT 7
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__Y_COORD_WIDTH 4
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__Y_COORD_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__Y_COORD_RMASK 0xf
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__Y_COORD_MASK  0x780
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__Y_COORD_FIELD 7,10

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__X_COORD_SHIFT 18
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__X_COORD_WIDTH 4
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__X_COORD_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__X_COORD_RMASK 0xf
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__X_COORD_MASK  0x3c0000
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_2_RESULT__X_COORD_FIELD 18,21


/*
 * PKA Command Queue 3 Empty Interrupt Binding.
 * This register contains the interrupt binding for PKA Command Queue 3 empty
 * (below threshold)interrupts.
 */
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY 0x0118

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__EVENT_NUM_SHIFT 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__EVENT_NUM_WIDTH 5
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__EVENT_NUM_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__EVENT_NUM_RMASK 0x1f
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__EVENT_NUM_MASK  0x1f
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__EVENT_NUM_FIELD 0,4

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__INT_NUM_SHIFT 5
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__INT_NUM_WIDTH 2
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__INT_NUM_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__INT_NUM_RMASK 0x3
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__INT_NUM_MASK  0x60
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__INT_NUM_FIELD 5,6

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__Y_COORD_SHIFT 7
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__Y_COORD_WIDTH 4
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__Y_COORD_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__Y_COORD_RMASK 0xf
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__Y_COORD_MASK  0x780
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__Y_COORD_FIELD 7,10

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__X_COORD_SHIFT 18
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__X_COORD_WIDTH 4
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__X_COORD_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__X_COORD_RMASK 0xf
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__X_COORD_MASK  0x3c0000
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_EMPTY__X_COORD_FIELD 18,21


/*
 * PKA Command Queue 3 Interrupt Binding.
 * This register contains the interrupt binding for PKA Result Queue 3 above
 * threshold interrupts.
 */
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT 0x0138

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__EVENT_NUM_SHIFT 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__EVENT_NUM_WIDTH 5
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__EVENT_NUM_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__EVENT_NUM_RMASK 0x1f
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__EVENT_NUM_MASK  0x1f
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__EVENT_NUM_FIELD 0,4

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__INT_NUM_SHIFT 5
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__INT_NUM_WIDTH 2
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__INT_NUM_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__INT_NUM_RMASK 0x3
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__INT_NUM_MASK  0x60
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__INT_NUM_FIELD 5,6

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__Y_COORD_SHIFT 7
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__Y_COORD_WIDTH 4
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__Y_COORD_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__Y_COORD_RMASK 0xf
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__Y_COORD_MASK  0x780
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__Y_COORD_FIELD 7,10

#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__X_COORD_SHIFT 18
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__X_COORD_WIDTH 4
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__X_COORD_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__X_COORD_RMASK 0xf
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__X_COORD_MASK  0x3c0000
#define MICA_CRYPTO_ENG_INT_BINDING_PKA_QUEUE_3_RESULT__X_COORD_FIELD 18,21


/*
 * TRNG (True Random Number Generator) Interrupt Binding.
 * This register contains the interrupt binding for TRNG interrupts.
 */
#define MICA_CRYPTO_ENG_INT_BINDING_TRNG 0x0148

#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__EVENT_NUM_SHIFT 0
#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__EVENT_NUM_WIDTH 5
#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__EVENT_NUM_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__EVENT_NUM_RMASK 0x1f
#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__EVENT_NUM_MASK  0x1f
#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__EVENT_NUM_FIELD 0,4

#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__INT_NUM_SHIFT 5
#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__INT_NUM_WIDTH 2
#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__INT_NUM_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__INT_NUM_RMASK 0x3
#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__INT_NUM_MASK  0x60
#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__INT_NUM_FIELD 5,6

#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__Y_COORD_SHIFT 7
#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__Y_COORD_WIDTH 4
#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__Y_COORD_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__Y_COORD_RMASK 0xf
#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__Y_COORD_MASK  0x780
#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__Y_COORD_FIELD 7,10

#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__X_COORD_SHIFT 18
#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__X_COORD_WIDTH 4
#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__X_COORD_RESET_VAL 0
#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__X_COORD_RMASK 0xf
#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__X_COORD_MASK  0x3c0000
#define MICA_CRYPTO_ENG_INT_BINDING_TRNG__X_COORD_FIELD 18,21


/*
 * PKA Interrupt Threshold 0.
 * Interrupt threshold control for result queue 0
 */
#define MICA_CRYPTO_ENG_IRQ_THRESH_0 0x7c40

#define MICA_CRYPTO_ENG_IRQ_THRESH_0__COMMAND_THRESHOLD_SHIFT 0
#define MICA_CRYPTO_ENG_IRQ_THRESH_0__COMMAND_THRESHOLD_WIDTH 16
#define MICA_CRYPTO_ENG_IRQ_THRESH_0__COMMAND_THRESHOLD_RESET_VAL 0
#define MICA_CRYPTO_ENG_IRQ_THRESH_0__COMMAND_THRESHOLD_RMASK 0xffff
#define MICA_CRYPTO_ENG_IRQ_THRESH_0__COMMAND_THRESHOLD_MASK  0xffff
#define MICA_CRYPTO_ENG_IRQ_THRESH_0__COMMAND_THRESHOLD_FIELD 0,15

#define MICA_CRYPTO_ENG_IRQ_THRESH_0__RESULT_THRESHOLD_SHIFT 16
#define MICA_CRYPTO_ENG_IRQ_THRESH_0__RESULT_THRESHOLD_WIDTH 4
#define MICA_CRYPTO_ENG_IRQ_THRESH_0__RESULT_THRESHOLD_RESET_VAL 0
#define MICA_CRYPTO_ENG_IRQ_THRESH_0__RESULT_THRESHOLD_RMASK 0xf
#define MICA_CRYPTO_ENG_IRQ_THRESH_0__RESULT_THRESHOLD_MASK  0xf0000
#define MICA_CRYPTO_ENG_IRQ_THRESH_0__RESULT_THRESHOLD_FIELD 16,19

#define MICA_CRYPTO_ENG_IRQ_THRESH_0__RESULT_TIME_OUT_SHIFT 20
#define MICA_CRYPTO_ENG_IRQ_THRESH_0__RESULT_TIME_OUT_WIDTH 4
#define MICA_CRYPTO_ENG_IRQ_THRESH_0__RESULT_TIME_OUT_RESET_VAL 0
#define MICA_CRYPTO_ENG_IRQ_THRESH_0__RESULT_TIME_OUT_RMASK 0xf
#define MICA_CRYPTO_ENG_IRQ_THRESH_0__RESULT_TIME_OUT_MASK  0xf00000
#define MICA_CRYPTO_ENG_IRQ_THRESH_0__RESULT_TIME_OUT_FIELD 20,23


/*
 * PKA Interrupt Threshold 1.
 * Interrupt threshold control for result queue 1
 */
#define MICA_CRYPTO_ENG_IRQ_THRESH_1 0x7c48

#define MICA_CRYPTO_ENG_IRQ_THRESH_1__COMMAND_THRESHOLD_SHIFT 0
#define MICA_CRYPTO_ENG_IRQ_THRESH_1__COMMAND_THRESHOLD_WIDTH 16
#define MICA_CRYPTO_ENG_IRQ_THRESH_1__COMMAND_THRESHOLD_RESET_VAL 0
#define MICA_CRYPTO_ENG_IRQ_THRESH_1__COMMAND_THRESHOLD_RMASK 0xffff
#define MICA_CRYPTO_ENG_IRQ_THRESH_1__COMMAND_THRESHOLD_MASK  0xffff
#define MICA_CRYPTO_ENG_IRQ_THRESH_1__COMMAND_THRESHOLD_FIELD 0,15

#define MICA_CRYPTO_ENG_IRQ_THRESH_1__RESULT_THRESHOLD_SHIFT 16
#define MICA_CRYPTO_ENG_IRQ_THRESH_1__RESULT_THRESHOLD_WIDTH 4
#define MICA_CRYPTO_ENG_IRQ_THRESH_1__RESULT_THRESHOLD_RESET_VAL 0
#define MICA_CRYPTO_ENG_IRQ_THRESH_1__RESULT_THRESHOLD_RMASK 0xf
#define MICA_CRYPTO_ENG_IRQ_THRESH_1__RESULT_THRESHOLD_MASK  0xf0000
#define MICA_CRYPTO_ENG_IRQ_THRESH_1__RESULT_THRESHOLD_FIELD 16,19

#define MICA_CRYPTO_ENG_IRQ_THRESH_1__RESULT_TIME_OUT_SHIFT 20
#define MICA_CRYPTO_ENG_IRQ_THRESH_1__RESULT_TIME_OUT_WIDTH 4
#define MICA_CRYPTO_ENG_IRQ_THRESH_1__RESULT_TIME_OUT_RESET_VAL 0
#define MICA_CRYPTO_ENG_IRQ_THRESH_1__RESULT_TIME_OUT_RMASK 0xf
#define MICA_CRYPTO_ENG_IRQ_THRESH_1__RESULT_TIME_OUT_MASK  0xf00000
#define MICA_CRYPTO_ENG_IRQ_THRESH_1__RESULT_TIME_OUT_FIELD 20,23


/*
 * PKA Interrupt Threshold 2.
 * Interrupt threshold control for result queue 2
 */
#define MICA_CRYPTO_ENG_IRQ_THRESH_2 0x7c50

#define MICA_CRYPTO_ENG_IRQ_THRESH_2__COMMAND_THRESHOLD_SHIFT 0
#define MICA_CRYPTO_ENG_IRQ_THRESH_2__COMMAND_THRESHOLD_WIDTH 16
#define MICA_CRYPTO_ENG_IRQ_THRESH_2__COMMAND_THRESHOLD_RESET_VAL 0
#define MICA_CRYPTO_ENG_IRQ_THRESH_2__COMMAND_THRESHOLD_RMASK 0xffff
#define MICA_CRYPTO_ENG_IRQ_THRESH_2__COMMAND_THRESHOLD_MASK  0xffff
#define MICA_CRYPTO_ENG_IRQ_THRESH_2__COMMAND_THRESHOLD_FIELD 0,15

#define MICA_CRYPTO_ENG_IRQ_THRESH_2__RESULT_THRESHOLD_SHIFT 16
#define MICA_CRYPTO_ENG_IRQ_THRESH_2__RESULT_THRESHOLD_WIDTH 4
#define MICA_CRYPTO_ENG_IRQ_THRESH_2__RESULT_THRESHOLD_RESET_VAL 0
#define MICA_CRYPTO_ENG_IRQ_THRESH_2__RESULT_THRESHOLD_RMASK 0xf
#define MICA_CRYPTO_ENG_IRQ_THRESH_2__RESULT_THRESHOLD_MASK  0xf0000
#define MICA_CRYPTO_ENG_IRQ_THRESH_2__RESULT_THRESHOLD_FIELD 16,19

#define MICA_CRYPTO_ENG_IRQ_THRESH_2__RESULT_TIME_OUT_SHIFT 20
#define MICA_CRYPTO_ENG_IRQ_THRESH_2__RESULT_TIME_OUT_WIDTH 4
#define MICA_CRYPTO_ENG_IRQ_THRESH_2__RESULT_TIME_OUT_RESET_VAL 0
#define MICA_CRYPTO_ENG_IRQ_THRESH_2__RESULT_TIME_OUT_RMASK 0xf
#define MICA_CRYPTO_ENG_IRQ_THRESH_2__RESULT_TIME_OUT_MASK  0xf00000
#define MICA_CRYPTO_ENG_IRQ_THRESH_2__RESULT_TIME_OUT_FIELD 20,23


/*
 * PKA Interrupt Threshold 3.
 * Interrupt threshold control for result queue 3
 */
#define MICA_CRYPTO_ENG_IRQ_THRESH_3 0x7c58

#define MICA_CRYPTO_ENG_IRQ_THRESH_3__COMMAND_THRESHOLD_SHIFT 0
#define MICA_CRYPTO_ENG_IRQ_THRESH_3__COMMAND_THRESHOLD_WIDTH 16
#define MICA_CRYPTO_ENG_IRQ_THRESH_3__COMMAND_THRESHOLD_RESET_VAL 0
#define MICA_CRYPTO_ENG_IRQ_THRESH_3__COMMAND_THRESHOLD_RMASK 0xffff
#define MICA_CRYPTO_ENG_IRQ_THRESH_3__COMMAND_THRESHOLD_MASK  0xffff
#define MICA_CRYPTO_ENG_IRQ_THRESH_3__COMMAND_THRESHOLD_FIELD 0,15

#define MICA_CRYPTO_ENG_IRQ_THRESH_3__RESULT_THRESHOLD_SHIFT 16
#define MICA_CRYPTO_ENG_IRQ_THRESH_3__RESULT_THRESHOLD_WIDTH 4
#define MICA_CRYPTO_ENG_IRQ_THRESH_3__RESULT_THRESHOLD_RESET_VAL 0
#define MICA_CRYPTO_ENG_IRQ_THRESH_3__RESULT_THRESHOLD_RMASK 0xf
#define MICA_CRYPTO_ENG_IRQ_THRESH_3__RESULT_THRESHOLD_MASK  0xf0000
#define MICA_CRYPTO_ENG_IRQ_THRESH_3__RESULT_THRESHOLD_FIELD 16,19

#define MICA_CRYPTO_ENG_IRQ_THRESH_3__RESULT_TIME_OUT_SHIFT 20
#define MICA_CRYPTO_ENG_IRQ_THRESH_3__RESULT_TIME_OUT_WIDTH 4
#define MICA_CRYPTO_ENG_IRQ_THRESH_3__RESULT_TIME_OUT_RESET_VAL 0
#define MICA_CRYPTO_ENG_IRQ_THRESH_3__RESULT_TIME_OUT_RMASK 0xf
#define MICA_CRYPTO_ENG_IRQ_THRESH_3__RESULT_TIME_OUT_MASK  0xf00000
#define MICA_CRYPTO_ENG_IRQ_THRESH_3__RESULT_TIME_OUT_FIELD 20,23


/*
 * Master Firmware Version.
 * Master firmware version information.
 */
#define MICA_CRYPTO_ENG_MASTER_FW_VERSION 0x00e8

#define MICA_CRYPTO_ENG_MASTER_FW_VERSION__PATCH_LEVEL_SHIFT 0
#define MICA_CRYPTO_ENG_MASTER_FW_VERSION__PATCH_LEVEL_WIDTH 8
#define MICA_CRYPTO_ENG_MASTER_FW_VERSION__PATCH_LEVEL_RMASK 0xff
#define MICA_CRYPTO_ENG_MASTER_FW_VERSION__PATCH_LEVEL_MASK  0xff
#define MICA_CRYPTO_ENG_MASTER_FW_VERSION__PATCH_LEVEL_FIELD 0,7

#define MICA_CRYPTO_ENG_MASTER_FW_VERSION__MINOR_VERSION_NUMBER_SHIFT 8
#define MICA_CRYPTO_ENG_MASTER_FW_VERSION__MINOR_VERSION_NUMBER_WIDTH 8
#define MICA_CRYPTO_ENG_MASTER_FW_VERSION__MINOR_VERSION_NUMBER_RMASK 0xff
#define MICA_CRYPTO_ENG_MASTER_FW_VERSION__MINOR_VERSION_NUMBER_MASK  0xff00
#define MICA_CRYPTO_ENG_MASTER_FW_VERSION__MINOR_VERSION_NUMBER_FIELD 8,15

#define MICA_CRYPTO_ENG_MASTER_FW_VERSION__MAJOR_VERSION_NUMBER_SHIFT 16
#define MICA_CRYPTO_ENG_MASTER_FW_VERSION__MAJOR_VERSION_NUMBER_WIDTH 8
#define MICA_CRYPTO_ENG_MASTER_FW_VERSION__MAJOR_VERSION_NUMBER_RMASK 0xff
#define MICA_CRYPTO_ENG_MASTER_FW_VERSION__MAJOR_VERSION_NUMBER_MASK  0xff0000
#define MICA_CRYPTO_ENG_MASTER_FW_VERSION__MAJOR_VERSION_NUMBER_FIELD 16,23


/*
 * PKA module operation mode control.
 * This register is used to control High Assurance and Debug modes from the
 * Host.
 */
#define MICA_CRYPTO_ENG_MODE_SELECTION 0x7c88

#define MICA_CRYPTO_ENG_MODE_SELECTION__DEBUG_ENABLE_SHIFT 10
#define MICA_CRYPTO_ENG_MODE_SELECTION__DEBUG_ENABLE_WIDTH 2
#define MICA_CRYPTO_ENG_MODE_SELECTION__DEBUG_ENABLE_RESET_VAL 0
#define MICA_CRYPTO_ENG_MODE_SELECTION__DEBUG_ENABLE_RMASK 0x3
#define MICA_CRYPTO_ENG_MODE_SELECTION__DEBUG_ENABLE_MASK  0xc00
#define MICA_CRYPTO_ENG_MODE_SELECTION__DEBUG_ENABLE_FIELD 10,11

#define MICA_CRYPTO_ENG_MODE_SELECTION__TRNG_LOCK_SHIFT 13
#define MICA_CRYPTO_ENG_MODE_SELECTION__TRNG_LOCK_WIDTH 1
#define MICA_CRYPTO_ENG_MODE_SELECTION__TRNG_LOCK_RESET_VAL 0
#define MICA_CRYPTO_ENG_MODE_SELECTION__TRNG_LOCK_RMASK 0x1
#define MICA_CRYPTO_ENG_MODE_SELECTION__TRNG_LOCK_MASK  0x2000
#define MICA_CRYPTO_ENG_MODE_SELECTION__TRNG_LOCK_FIELD 13,13

#define MICA_CRYPTO_ENG_MODE_SELECTION__DEBUG_SOFT_SHIFT 14
#define MICA_CRYPTO_ENG_MODE_SELECTION__DEBUG_SOFT_WIDTH 1
#define MICA_CRYPTO_ENG_MODE_SELECTION__DEBUG_SOFT_RESET_VAL 0
#define MICA_CRYPTO_ENG_MODE_SELECTION__DEBUG_SOFT_RMASK 0x1
#define MICA_CRYPTO_ENG_MODE_SELECTION__DEBUG_SOFT_MASK  0x4000
#define MICA_CRYPTO_ENG_MODE_SELECTION__DEBUG_SOFT_FIELD 14,14

#define MICA_CRYPTO_ENG_MODE_SELECTION__DEBUG_DISABLE_SHIFT 15
#define MICA_CRYPTO_ENG_MODE_SELECTION__DEBUG_DISABLE_WIDTH 1
#define MICA_CRYPTO_ENG_MODE_SELECTION__DEBUG_DISABLE_RESET_VAL 0
#define MICA_CRYPTO_ENG_MODE_SELECTION__DEBUG_DISABLE_RMASK 0x1
#define MICA_CRYPTO_ENG_MODE_SELECTION__DEBUG_DISABLE_MASK  0x8000
#define MICA_CRYPTO_ENG_MODE_SELECTION__DEBUG_DISABLE_FIELD 15,15

#define MICA_CRYPTO_ENG_MODE_SELECTION__HA_UNLOCK_SHIFT 26
#define MICA_CRYPTO_ENG_MODE_SELECTION__HA_UNLOCK_WIDTH 2
#define MICA_CRYPTO_ENG_MODE_SELECTION__HA_UNLOCK_RESET_VAL 0
#define MICA_CRYPTO_ENG_MODE_SELECTION__HA_UNLOCK_RMASK 0x3
#define MICA_CRYPTO_ENG_MODE_SELECTION__HA_UNLOCK_MASK  0xc000000
#define MICA_CRYPTO_ENG_MODE_SELECTION__HA_UNLOCK_FIELD 26,27

#define MICA_CRYPTO_ENG_MODE_SELECTION__HA_SOFT_SHIFT 30
#define MICA_CRYPTO_ENG_MODE_SELECTION__HA_SOFT_WIDTH 1
#define MICA_CRYPTO_ENG_MODE_SELECTION__HA_SOFT_RESET_VAL 0
#define MICA_CRYPTO_ENG_MODE_SELECTION__HA_SOFT_RMASK 0x1
#define MICA_CRYPTO_ENG_MODE_SELECTION__HA_SOFT_MASK  0x40000000
#define MICA_CRYPTO_ENG_MODE_SELECTION__HA_SOFT_FIELD 30,30

#define MICA_CRYPTO_ENG_MODE_SELECTION__HA_LOCK_SHIFT 31
#define MICA_CRYPTO_ENG_MODE_SELECTION__HA_LOCK_WIDTH 1
#define MICA_CRYPTO_ENG_MODE_SELECTION__HA_LOCK_RESET_VAL 0
#define MICA_CRYPTO_ENG_MODE_SELECTION__HA_LOCK_RMASK 0x1
#define MICA_CRYPTO_ENG_MODE_SELECTION__HA_LOCK_MASK  0x80000000
#define MICA_CRYPTO_ENG_MODE_SELECTION__HA_LOCK_FIELD 31,31


/*
 * Output transfer Control and Status.
 * Output transfer Control and Status.
 */
#define MICA_CRYPTO_ENG_OUTPUT_TRANSFER_CONTROL_STATUS 0x00c0

#define MICA_CRYPTO_ENG_OUTPUT_TRANSFER_CONTROL_STATUS__AVAILABLE_DWORDS_SHIFT 0
#define MICA_CRYPTO_ENG_OUTPUT_TRANSFER_CONTROL_STATUS__AVAILABLE_DWORDS_WIDTH 32
#define MICA_CRYPTO_ENG_OUTPUT_TRANSFER_CONTROL_STATUS__AVAILABLE_DWORDS_RESET_VAL 0
#define MICA_CRYPTO_ENG_OUTPUT_TRANSFER_CONTROL_STATUS__AVAILABLE_DWORDS_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_OUTPUT_TRANSFER_CONTROL_STATUS__AVAILABLE_DWORDS_MASK  0xffffffff
#define MICA_CRYPTO_ENG_OUTPUT_TRANSFER_CONTROL_STATUS__AVAILABLE_DWORDS_FIELD 0,31


/*
 * PKA Buffer RAM.
 * 8 kbyte shared data space between PKA master controller and external Host
 * processor(s). Actual use depends upon internal firmware and external
 * driver software.
 */
#define MICA_CRYPTO_ENG_PKA_BUFFER_RAM 0x0000

#define MICA_CRYPTO_ENG_PKA_BUFFER_RAM__PKA_BUFFER_RAM_SHIFT 0
#define MICA_CRYPTO_ENG_PKA_BUFFER_RAM__PKA_BUFFER_RAM_WIDTH 64
#define MICA_CRYPTO_ENG_PKA_BUFFER_RAM__PKA_BUFFER_RAM_RMASK _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_ENG_PKA_BUFFER_RAM__PKA_BUFFER_RAM_MASK  _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_ENG_PKA_BUFFER_RAM__PKA_BUFFER_RAM_FIELD 0,63


/*
 * PKA Clock Switch Forcing.
 * PKA Clock Switch Forcing Register
 */
#define MICA_CRYPTO_ENG_PKA_CLK_FORCE 0x7c80

#define MICA_CRYPTO_ENG_PKA_CLK_FORCE__PKA_FARM_X_CLK_ON_SHIFT 0
#define MICA_CRYPTO_ENG_PKA_CLK_FORCE__PKA_FARM_X_CLK_ON_WIDTH 6
#define MICA_CRYPTO_ENG_PKA_CLK_FORCE__PKA_FARM_X_CLK_ON_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_CLK_FORCE__PKA_FARM_X_CLK_ON_RMASK 0x3f
#define MICA_CRYPTO_ENG_PKA_CLK_FORCE__PKA_FARM_X_CLK_ON_MASK  0x3f
#define MICA_CRYPTO_ENG_PKA_CLK_FORCE__PKA_FARM_X_CLK_ON_FIELD 0,5

#define MICA_CRYPTO_ENG_PKA_CLK_FORCE__PKA_MASTER_CLK_ON_SHIFT 10
#define MICA_CRYPTO_ENG_PKA_CLK_FORCE__PKA_MASTER_CLK_ON_WIDTH 1
#define MICA_CRYPTO_ENG_PKA_CLK_FORCE__PKA_MASTER_CLK_ON_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_CLK_FORCE__PKA_MASTER_CLK_ON_RMASK 0x1
#define MICA_CRYPTO_ENG_PKA_CLK_FORCE__PKA_MASTER_CLK_ON_MASK  0x400
#define MICA_CRYPTO_ENG_PKA_CLK_FORCE__PKA_MASTER_CLK_ON_FIELD 10,10

#define MICA_CRYPTO_ENG_PKA_CLK_FORCE__TRNG_CLK_ON_SHIFT 11
#define MICA_CRYPTO_ENG_PKA_CLK_FORCE__TRNG_CLK_ON_WIDTH 1
#define MICA_CRYPTO_ENG_PKA_CLK_FORCE__TRNG_CLK_ON_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_CLK_FORCE__TRNG_CLK_ON_RMASK 0x1
#define MICA_CRYPTO_ENG_PKA_CLK_FORCE__TRNG_CLK_ON_MASK  0x800
#define MICA_CRYPTO_ENG_PKA_CLK_FORCE__TRNG_CLK_ON_FIELD 11,11


/*
 * PKA Farm Clock Control.
 * This register provides clock enables for various parts of the PKA Farm.
 */
#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH 0x7c68

#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__FARM_CLOCK_ENABLE_SHIFT 0
#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__FARM_CLOCK_ENABLE_WIDTH 6
#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__FARM_CLOCK_ENABLE_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__FARM_CLOCK_ENABLE_RMASK 0x3f
#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__FARM_CLOCK_ENABLE_MASK  0x3f
#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__FARM_CLOCK_ENABLE_FIELD 0,5

#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__SLEEP_FOR_FARM_RESULT_SHIFT 14
#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__SLEEP_FOR_FARM_RESULT_WIDTH 1
#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__SLEEP_FOR_FARM_RESULT_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__SLEEP_FOR_FARM_RESULT_RMASK 0x1
#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__SLEEP_FOR_FARM_RESULT_MASK  0x4000
#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__SLEEP_FOR_FARM_RESULT_FIELD 14,14

#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__SLEEP_FOR_COMMAND_SHIFT 15
#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__SLEEP_FOR_COMMAND_WIDTH 1
#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__SLEEP_FOR_COMMAND_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__SLEEP_FOR_COMMAND_RMASK 0x1
#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__SLEEP_FOR_COMMAND_MASK  0x8000
#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__SLEEP_FOR_COMMAND_FIELD 15,15

#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__TRNG_CLOCK_ENABLE_SHIFT 16
#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__TRNG_CLOCK_ENABLE_WIDTH 1
#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__TRNG_CLOCK_ENABLE_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__TRNG_CLOCK_ENABLE_RMASK 0x1
#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__TRNG_CLOCK_ENABLE_MASK  0x10000
#define MICA_CRYPTO_ENG_PKA_CLOCK_SWITCH__TRNG_CLOCK_ENABLE_FIELD 16,16


/*
 * PKA Interrupt Mask.
 * Interrupt Masks for Public Key Accelerator.  The bit positions are the
 * same as in the PKA Interrupt Controller registers.
 */
#define MICA_CRYPTO_ENG_PKA_INT_MASK 0x0000

#define MICA_CRYPTO_ENG_PKA_INT_MASK__PKA_INT_MASK_SHIFT 0
#define MICA_CRYPTO_ENG_PKA_INT_MASK__PKA_INT_MASK_WIDTH 64
#define MICA_CRYPTO_ENG_PKA_INT_MASK__PKA_INT_MASK_RESET_VAL 1
#define MICA_CRYPTO_ENG_PKA_INT_MASK__PKA_INT_MASK_RMASK _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_ENG_PKA_INT_MASK__PKA_INT_MASK_MASK  _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_ENG_PKA_INT_MASK__PKA_INT_MASK_FIELD 0,63


/*
 * PKA Interrupt Mask.
 * Write 1 to Reset Interrupt Masks for Public Key Accelerator.
 */
#define MICA_CRYPTO_ENG_PKA_INT_MASK_RESET 0x0010

#define MICA_CRYPTO_ENG_PKA_INT_MASK_RESET__PKA_INT_MASK_RESET_SHIFT 0
#define MICA_CRYPTO_ENG_PKA_INT_MASK_RESET__PKA_INT_MASK_RESET_WIDTH 64
#define MICA_CRYPTO_ENG_PKA_INT_MASK_RESET__PKA_INT_MASK_RESET_RESET_VAL 1
#define MICA_CRYPTO_ENG_PKA_INT_MASK_RESET__PKA_INT_MASK_RESET_RMASK _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_ENG_PKA_INT_MASK_RESET__PKA_INT_MASK_RESET_MASK  _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_ENG_PKA_INT_MASK_RESET__PKA_INT_MASK_RESET_FIELD 0,63


/*
 * PKA Interrupt Mask.
 * Write 1 to set Interrupt Masks for Public Key Accelerator.
 */
#define MICA_CRYPTO_ENG_PKA_INT_MASK_SET 0x0008

#define MICA_CRYPTO_ENG_PKA_INT_MASK_SET__PKA_INT_MASK_SET_SHIFT 0
#define MICA_CRYPTO_ENG_PKA_INT_MASK_SET__PKA_INT_MASK_SET_WIDTH 64
#define MICA_CRYPTO_ENG_PKA_INT_MASK_SET__PKA_INT_MASK_SET_RESET_VAL 1
#define MICA_CRYPTO_ENG_PKA_INT_MASK_SET__PKA_INT_MASK_SET_RMASK _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_ENG_PKA_INT_MASK_SET__PKA_INT_MASK_SET_MASK  _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_ENG_PKA_INT_MASK_SET__PKA_INT_MASK_SET_FIELD 0,63


/* PKA Key Decrypt Keys. */
#define MICA_CRYPTO_ENG_PKA_KDK_1_0 0x80a0

#define MICA_CRYPTO_ENG_PKA_KDK_1_0__KDK_0_SHIFT 0
#define MICA_CRYPTO_ENG_PKA_KDK_1_0__KDK_0_WIDTH 32
#define MICA_CRYPTO_ENG_PKA_KDK_1_0__KDK_0_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_KDK_1_0__KDK_0_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_PKA_KDK_1_0__KDK_0_MASK  0xffffffff
#define MICA_CRYPTO_ENG_PKA_KDK_1_0__KDK_0_FIELD 0,31


/* PKA Key Decrypt Keys. */
#define MICA_CRYPTO_ENG_PKA_KDK_1_1 0x80a8

#define MICA_CRYPTO_ENG_PKA_KDK_1_1__KDK_1_SHIFT 0
#define MICA_CRYPTO_ENG_PKA_KDK_1_1__KDK_1_WIDTH 32
#define MICA_CRYPTO_ENG_PKA_KDK_1_1__KDK_1_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_KDK_1_1__KDK_1_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_PKA_KDK_1_1__KDK_1_MASK  0xffffffff
#define MICA_CRYPTO_ENG_PKA_KDK_1_1__KDK_1_FIELD 0,31


/* PKA Key Decrypt Keys. */
#define MICA_CRYPTO_ENG_PKA_KDK_1_2 0x80b0

#define MICA_CRYPTO_ENG_PKA_KDK_1_2__KDK_2_SHIFT 0
#define MICA_CRYPTO_ENG_PKA_KDK_1_2__KDK_2_WIDTH 32
#define MICA_CRYPTO_ENG_PKA_KDK_1_2__KDK_2_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_KDK_1_2__KDK_2_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_PKA_KDK_1_2__KDK_2_MASK  0xffffffff
#define MICA_CRYPTO_ENG_PKA_KDK_1_2__KDK_2_FIELD 0,31


/* PKA Key Decrypt Keys. */
#define MICA_CRYPTO_ENG_PKA_KDK_1_3 0x80b8

#define MICA_CRYPTO_ENG_PKA_KDK_1_3__KDK_3_SHIFT 0
#define MICA_CRYPTO_ENG_PKA_KDK_1_3__KDK_3_WIDTH 32
#define MICA_CRYPTO_ENG_PKA_KDK_1_3__KDK_3_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_KDK_1_3__KDK_3_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_PKA_KDK_1_3__KDK_3_MASK  0xffffffff
#define MICA_CRYPTO_ENG_PKA_KDK_1_3__KDK_3_FIELD 0,31


/* PKA Key Decrypt Keys. */
#define MICA_CRYPTO_ENG_PKA_KDK_1_4 0x80c0

#define MICA_CRYPTO_ENG_PKA_KDK_1_4__KDK_4_SHIFT 0
#define MICA_CRYPTO_ENG_PKA_KDK_1_4__KDK_4_WIDTH 32
#define MICA_CRYPTO_ENG_PKA_KDK_1_4__KDK_4_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_KDK_1_4__KDK_4_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_PKA_KDK_1_4__KDK_4_MASK  0xffffffff
#define MICA_CRYPTO_ENG_PKA_KDK_1_4__KDK_4_FIELD 0,31


/* PKA Key Decrypt Keys. */
#define MICA_CRYPTO_ENG_PKA_KDK_1_5 0x80c8

#define MICA_CRYPTO_ENG_PKA_KDK_1_5__KDK_5_SHIFT 0
#define MICA_CRYPTO_ENG_PKA_KDK_1_5__KDK_5_WIDTH 32
#define MICA_CRYPTO_ENG_PKA_KDK_1_5__KDK_5_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_KDK_1_5__KDK_5_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_PKA_KDK_1_5__KDK_5_MASK  0xffffffff
#define MICA_CRYPTO_ENG_PKA_KDK_1_5__KDK_5_FIELD 0,31


/* PKA Key Decrypt Keys. */
#define MICA_CRYPTO_ENG_PKA_KDK_1_6 0x80d0

#define MICA_CRYPTO_ENG_PKA_KDK_1_6__KDK_6_SHIFT 0
#define MICA_CRYPTO_ENG_PKA_KDK_1_6__KDK_6_WIDTH 32
#define MICA_CRYPTO_ENG_PKA_KDK_1_6__KDK_6_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_KDK_1_6__KDK_6_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_PKA_KDK_1_6__KDK_6_MASK  0xffffffff
#define MICA_CRYPTO_ENG_PKA_KDK_1_6__KDK_6_FIELD 0,31


/* PKA Key Decrypt Keys. */
#define MICA_CRYPTO_ENG_PKA_KDK_1_7 0x80d8

#define MICA_CRYPTO_ENG_PKA_KDK_1_7__KDK_7_SHIFT 0
#define MICA_CRYPTO_ENG_PKA_KDK_1_7__KDK_7_WIDTH 32
#define MICA_CRYPTO_ENG_PKA_KDK_1_7__KDK_7_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_KDK_1_7__KDK_7_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_PKA_KDK_1_7__KDK_7_MASK  0xffffffff
#define MICA_CRYPTO_ENG_PKA_KDK_1_7__KDK_7_FIELD 0,31


/*
 * PKA Master Sequencer Program RAM.
 * The PKA master Sequencer program RAM (6 kword of 24 bits each) is
 * accessible from the Host bus. It holds the firmware to be executed by this
 * Sequencer and can only be accessed when bit [31] of the
 * PKA_MASTER_SEQ_CTRL register is 1.
 */
#define MICA_CRYPTO_ENG_PKA_MASTER_PROG_RAM 0x30000

#define MICA_CRYPTO_ENG_PKA_MASTER_PROG_RAM__PKA_MASTER_PROG_RAM_SHIFT 0
#define MICA_CRYPTO_ENG_PKA_MASTER_PROG_RAM__PKA_MASTER_PROG_RAM_WIDTH 64
#define MICA_CRYPTO_ENG_PKA_MASTER_PROG_RAM__PKA_MASTER_PROG_RAM_RMASK _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_ENG_PKA_MASTER_PROG_RAM__PKA_MASTER_PROG_RAM_MASK  _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_ENG_PKA_MASTER_PROG_RAM__PKA_MASTER_PROG_RAM_FIELD 0,63


/*
 * PKA Master Sequencer Control/Status.
 * The PKA Master controller Sequencer is interfaced with the outside world
 * through a single control/status register. With the exception of bit [31],
 * the actual use of bits in the separate sub-fields of this register is
 * determined by the downloaded Sequencer firmware. This register is also
 * accessible from the PKA Master controller Sequencer itself (with slightly
 * different functionality).
 */
#define MICA_CRYPTO_ENG_PKA_MASTER_SEQ_CTRL 0x27f90

#define MICA_CRYPTO_ENG_PKA_MASTER_SEQ_CTRL__SW_CONTROL_TRIGGERS_SHIFT 0
#define MICA_CRYPTO_ENG_PKA_MASTER_SEQ_CTRL__SW_CONTROL_TRIGGERS_WIDTH 8
#define MICA_CRYPTO_ENG_PKA_MASTER_SEQ_CTRL__SW_CONTROL_TRIGGERS_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_MASTER_SEQ_CTRL__SW_CONTROL_TRIGGERS_RMASK 0xff
#define MICA_CRYPTO_ENG_PKA_MASTER_SEQ_CTRL__SW_CONTROL_TRIGGERS_MASK  0xff
#define MICA_CRYPTO_ENG_PKA_MASTER_SEQ_CTRL__SW_CONTROL_TRIGGERS_FIELD 0,7

#define MICA_CRYPTO_ENG_PKA_MASTER_SEQ_CTRL__SEQUENCER_STATUS_SHIFT 8
#define MICA_CRYPTO_ENG_PKA_MASTER_SEQ_CTRL__SEQUENCER_STATUS_WIDTH 8
#define MICA_CRYPTO_ENG_PKA_MASTER_SEQ_CTRL__SEQUENCER_STATUS_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_MASTER_SEQ_CTRL__SEQUENCER_STATUS_RMASK 0xff
#define MICA_CRYPTO_ENG_PKA_MASTER_SEQ_CTRL__SEQUENCER_STATUS_MASK  0xff00
#define MICA_CRYPTO_ENG_PKA_MASTER_SEQ_CTRL__SEQUENCER_STATUS_FIELD 8,15

#define MICA_CRYPTO_ENG_PKA_MASTER_SEQ_CTRL__RESET_SHIFT 31
#define MICA_CRYPTO_ENG_PKA_MASTER_SEQ_CTRL__RESET_WIDTH 1
#define MICA_CRYPTO_ENG_PKA_MASTER_SEQ_CTRL__RESET_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_MASTER_SEQ_CTRL__RESET_RMASK 0x1
#define MICA_CRYPTO_ENG_PKA_MASTER_SEQ_CTRL__RESET_MASK  0x80000000
#define MICA_CRYPTO_ENG_PKA_MASTER_SEQ_CTRL__RESET_FIELD 31,31


/*
 * PKA module configuration.
 * Read only information about PKA.
 */
#define MICA_CRYPTO_ENG_PKA_OPTIONS 0x7df0

#define MICA_CRYPTO_ENG_PKA_OPTIONS__NUMBER_OF_FARM_ENGINES_SHIFT 0
#define MICA_CRYPTO_ENG_PKA_OPTIONS__NUMBER_OF_FARM_ENGINES_WIDTH 4
#define MICA_CRYPTO_ENG_PKA_OPTIONS__NUMBER_OF_FARM_ENGINES_RESET_VAL 6
#define MICA_CRYPTO_ENG_PKA_OPTIONS__NUMBER_OF_FARM_ENGINES_RMASK 0xf
#define MICA_CRYPTO_ENG_PKA_OPTIONS__NUMBER_OF_FARM_ENGINES_MASK  0xf
#define MICA_CRYPTO_ENG_PKA_OPTIONS__NUMBER_OF_FARM_ENGINES_FIELD 0,3

#define MICA_CRYPTO_ENG_PKA_OPTIONS__HA_STRAP_SHIFT 4
#define MICA_CRYPTO_ENG_PKA_OPTIONS__HA_STRAP_WIDTH 1
#define MICA_CRYPTO_ENG_PKA_OPTIONS__HA_STRAP_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_OPTIONS__HA_STRAP_RMASK 0x1
#define MICA_CRYPTO_ENG_PKA_OPTIONS__HA_STRAP_MASK  0x10
#define MICA_CRYPTO_ENG_PKA_OPTIONS__HA_STRAP_FIELD 4,4

#define MICA_CRYPTO_ENG_PKA_OPTIONS__AES_SHIFT 5
#define MICA_CRYPTO_ENG_PKA_OPTIONS__AES_WIDTH 1
#define MICA_CRYPTO_ENG_PKA_OPTIONS__AES_RESET_VAL 1
#define MICA_CRYPTO_ENG_PKA_OPTIONS__AES_RMASK 0x1
#define MICA_CRYPTO_ENG_PKA_OPTIONS__AES_MASK  0x20
#define MICA_CRYPTO_ENG_PKA_OPTIONS__AES_FIELD 5,5

#define MICA_CRYPTO_ENG_PKA_OPTIONS__TRNG_SHIFT 6
#define MICA_CRYPTO_ENG_PKA_OPTIONS__TRNG_WIDTH 1
#define MICA_CRYPTO_ENG_PKA_OPTIONS__TRNG_RESET_VAL 1
#define MICA_CRYPTO_ENG_PKA_OPTIONS__TRNG_RMASK 0x1
#define MICA_CRYPTO_ENG_PKA_OPTIONS__TRNG_MASK  0x40
#define MICA_CRYPTO_ENG_PKA_OPTIONS__TRNG_FIELD 6,6


/* PKA Ring Options Control Word. */
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS 0x00e0

#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__PRIO_SHIFT 0
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__PRIO_WIDTH 2
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__PRIO_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__PRIO_RMASK 0x3
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__PRIO_MASK  0x3
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__PRIO_FIELD 0,1

#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__ENABLE_SHIFT 2
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__ENABLE_WIDTH 2
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__ENABLE_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__ENABLE_RMASK 0x3
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__ENABLE_MASK  0xc
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__ENABLE_FIELD 2,3

#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__RING_N_IN_ORDER_SHIFT 4
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__RING_N_IN_ORDER_WIDTH 4
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__RING_N_IN_ORDER_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__RING_N_IN_ORDER_RMASK 0xf
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__RING_N_IN_ORDER_MASK  0xf0
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__RING_N_IN_ORDER_FIELD 4,7

#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__ZERO_KDKS_SHIFT 8
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__ZERO_KDKS_WIDTH 1
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__ZERO_KDKS_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__ZERO_KDKS_RMASK 0x1
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__ZERO_KDKS_MASK  0x100
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__ZERO_KDKS_FIELD 8,8

#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__SIGNATURE_BYTE_SHIFT 24
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__SIGNATURE_BYTE_WIDTH 8
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__SIGNATURE_BYTE_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__SIGNATURE_BYTE_RMASK 0xff
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__SIGNATURE_BYTE_MASK  0xff000000
#define MICA_CRYPTO_ENG_PKA_RING_OPTIONS__SIGNATURE_BYTE_FIELD 24,31


/*
 * PKA Secure RAM.
 * 8 kbyte of secure data storage for use by the PKA Farm. Actual use depends
 * upon internal firmware.
 */
#define MICA_CRYPTO_ENG_PKA_SECURE_RAM 0x20000

#define MICA_CRYPTO_ENG_PKA_SECURE_RAM__PKA_SECURE_RAM_SHIFT 0
#define MICA_CRYPTO_ENG_PKA_SECURE_RAM__PKA_SECURE_RAM_WIDTH 64
#define MICA_CRYPTO_ENG_PKA_SECURE_RAM__PKA_SECURE_RAM_RMASK _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_ENG_PKA_SECURE_RAM__PKA_SECURE_RAM_MASK  _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_ENG_PKA_SECURE_RAM__PKA_SECURE_RAM_FIELD 0,63


/*
 * PKA module version.
 * Hardware version information.
 */
#define MICA_CRYPTO_ENG_PKA_VERSION 0x7df8

#define MICA_CRYPTO_ENG_PKA_VERSION__PKA_NUMBER_SHIFT 0
#define MICA_CRYPTO_ENG_PKA_VERSION__PKA_NUMBER_WIDTH 8
#define MICA_CRYPTO_ENG_PKA_VERSION__PKA_NUMBER_RESET_VAL 154
#define MICA_CRYPTO_ENG_PKA_VERSION__PKA_NUMBER_RMASK 0xff
#define MICA_CRYPTO_ENG_PKA_VERSION__PKA_NUMBER_MASK  0xff
#define MICA_CRYPTO_ENG_PKA_VERSION__PKA_NUMBER_FIELD 0,7

#define MICA_CRYPTO_ENG_PKA_VERSION__PKA_NUMBER_COMPLEMENT_SHIFT 8
#define MICA_CRYPTO_ENG_PKA_VERSION__PKA_NUMBER_COMPLEMENT_WIDTH 8
#define MICA_CRYPTO_ENG_PKA_VERSION__PKA_NUMBER_COMPLEMENT_RESET_VAL 101
#define MICA_CRYPTO_ENG_PKA_VERSION__PKA_NUMBER_COMPLEMENT_RMASK 0xff
#define MICA_CRYPTO_ENG_PKA_VERSION__PKA_NUMBER_COMPLEMENT_MASK  0xff00
#define MICA_CRYPTO_ENG_PKA_VERSION__PKA_NUMBER_COMPLEMENT_FIELD 8,15

#define MICA_CRYPTO_ENG_PKA_VERSION__PATCH_LEVEL_SHIFT 16
#define MICA_CRYPTO_ENG_PKA_VERSION__PATCH_LEVEL_WIDTH 4
#define MICA_CRYPTO_ENG_PKA_VERSION__PATCH_LEVEL_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_VERSION__PATCH_LEVEL_RMASK 0xf
#define MICA_CRYPTO_ENG_PKA_VERSION__PATCH_LEVEL_MASK  0xf0000
#define MICA_CRYPTO_ENG_PKA_VERSION__PATCH_LEVEL_FIELD 16,19

#define MICA_CRYPTO_ENG_PKA_VERSION__MINOR_VERSION_NUMBER_SHIFT 20
#define MICA_CRYPTO_ENG_PKA_VERSION__MINOR_VERSION_NUMBER_WIDTH 4
#define MICA_CRYPTO_ENG_PKA_VERSION__MINOR_VERSION_NUMBER_RESET_VAL 1
#define MICA_CRYPTO_ENG_PKA_VERSION__MINOR_VERSION_NUMBER_RMASK 0xf
#define MICA_CRYPTO_ENG_PKA_VERSION__MINOR_VERSION_NUMBER_MASK  0xf00000
#define MICA_CRYPTO_ENG_PKA_VERSION__MINOR_VERSION_NUMBER_FIELD 20,23

#define MICA_CRYPTO_ENG_PKA_VERSION__MAJOR_VERSION_NUMBER_SHIFT 24
#define MICA_CRYPTO_ENG_PKA_VERSION__MAJOR_VERSION_NUMBER_WIDTH 4
#define MICA_CRYPTO_ENG_PKA_VERSION__MAJOR_VERSION_NUMBER_RESET_VAL 1
#define MICA_CRYPTO_ENG_PKA_VERSION__MAJOR_VERSION_NUMBER_RMASK 0xf
#define MICA_CRYPTO_ENG_PKA_VERSION__MAJOR_VERSION_NUMBER_MASK  0xf000000
#define MICA_CRYPTO_ENG_PKA_VERSION__MAJOR_VERSION_NUMBER_FIELD 24,27


/*
 * PKA to Host Window RAM.
 * 64 kB RAM used as the interface between PKA and Host (e.g. Tiles).  PKA
 * command and result queues, operands, and results are stored in this RAM
 */
#define MICA_CRYPTO_ENG_PKA_WINDOW_RAM 0x0000

#define MICA_CRYPTO_ENG_PKA_WINDOW_RAM__PKA_WINDOW_RAM_SHIFT 0
#define MICA_CRYPTO_ENG_PKA_WINDOW_RAM__PKA_WINDOW_RAM_WIDTH 64
#define MICA_CRYPTO_ENG_PKA_WINDOW_RAM__PKA_WINDOW_RAM_RMASK _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_ENG_PKA_WINDOW_RAM__PKA_WINDOW_RAM_MASK  _64bit(0xffffffffffffffff)
#define MICA_CRYPTO_ENG_PKA_WINDOW_RAM__PKA_WINDOW_RAM_FIELD 0,63


/*
 * Zeroize Public Key Accelerator.
 * This register is used to zeroize the Public Key Accelerator. When this
 * register is written (with any value) sensitive data in the PKA is zeroed
 * out.  Note that this bit also resets PKA, the same as if the ENGINE_RESET
 * register bit was set.
 */
#define MICA_CRYPTO_ENG_PKA_ZEROIZE 0x0040

#define MICA_CRYPTO_ENG_PKA_ZEROIZE__COUNT_SHIFT 0
#define MICA_CRYPTO_ENG_PKA_ZEROIZE__COUNT_WIDTH 11
#define MICA_CRYPTO_ENG_PKA_ZEROIZE__COUNT_RESET_VAL 0
#define MICA_CRYPTO_ENG_PKA_ZEROIZE__COUNT_RMASK 0x7ff
#define MICA_CRYPTO_ENG_PKA_ZEROIZE__COUNT_MASK  0x7ff
#define MICA_CRYPTO_ENG_PKA_ZEROIZE__COUNT_FIELD 0,10


/* PRNG Control. */
#define MICA_CRYPTO_ENG_PRNG_CTRL 0x0220

#define MICA_CRYPTO_ENG_PRNG_CTRL__ENABLE_SHIFT 0
#define MICA_CRYPTO_ENG_PRNG_CTRL__ENABLE_WIDTH 1
#define MICA_CRYPTO_ENG_PRNG_CTRL__ENABLE_RESET_VAL 0
#define MICA_CRYPTO_ENG_PRNG_CTRL__ENABLE_RMASK 0x1
#define MICA_CRYPTO_ENG_PRNG_CTRL__ENABLE_MASK  0x1
#define MICA_CRYPTO_ENG_PRNG_CTRL__ENABLE_FIELD 0,0

#define MICA_CRYPTO_ENG_PRNG_CTRL__AUTO_MODE_SHIFT 1
#define MICA_CRYPTO_ENG_PRNG_CTRL__AUTO_MODE_WIDTH 1
#define MICA_CRYPTO_ENG_PRNG_CTRL__AUTO_MODE_RESET_VAL 0
#define MICA_CRYPTO_ENG_PRNG_CTRL__AUTO_MODE_RMASK 0x1
#define MICA_CRYPTO_ENG_PRNG_CTRL__AUTO_MODE_MASK  0x2
#define MICA_CRYPTO_ENG_PRNG_CTRL__AUTO_MODE_FIELD 1,1

#define MICA_CRYPTO_ENG_PRNG_CTRL__RESULT_128_SHIFT 2
#define MICA_CRYPTO_ENG_PRNG_CTRL__RESULT_128_WIDTH 1
#define MICA_CRYPTO_ENG_PRNG_CTRL__RESULT_128_RESET_VAL 0
#define MICA_CRYPTO_ENG_PRNG_CTRL__RESULT_128_RMASK 0x1
#define MICA_CRYPTO_ENG_PRNG_CTRL__RESULT_128_MASK  0x4
#define MICA_CRYPTO_ENG_PRNG_CTRL__RESULT_128_FIELD 2,2


/*
 * PRNG DES Key 0 High Part.
 * Contains part of the secret key that is used for Triple-DES operations.
 * The DES keys are 64-bits long, but this includes 8 parity-check bits (bits
 * on positions 0, 8, 16, 24, 32, 40, 48 and 56). The key registers are
 * implemented using a 56-bit maximum length LFSR implementation, ignoring
 * the parity bits. The key registers are updated (LFSR changes to next
 * value) after every PRNG operation. This register should NOT contain all
 * zeroes. When the Host reads this register, it returns an undefined value.
 */
#define MICA_CRYPTO_ENG_PRNG_KEY_0_H 0x02a0

#define MICA_CRYPTO_ENG_PRNG_KEY_0_H__DES_KEY_SHIFT 0
#define MICA_CRYPTO_ENG_PRNG_KEY_0_H__DES_KEY_WIDTH 32
#define MICA_CRYPTO_ENG_PRNG_KEY_0_H__DES_KEY_RESET_VAL 0
#define MICA_CRYPTO_ENG_PRNG_KEY_0_H__DES_KEY_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_PRNG_KEY_0_H__DES_KEY_MASK  0xffffffff
#define MICA_CRYPTO_ENG_PRNG_KEY_0_H__DES_KEY_FIELD 0,31


/*
 * PRNG DES Key 0 Low Part.
 * Contains part of the secret key that is used for Triple-DES operations.
 * The DES keys are 64-bits long, but this includes 8 parity-check bits (bits
 * on positions 0, 8, 16, 24, 32, 40, 48 and 56). The key registers are
 * implemented using a 56-bit maximum length LFSR implementation, ignoring
 * the parity bits. The key registers are updated (LFSR changes to next
 * value) after every PRNG operation. This register should NOT contain all
 * zeroes. When the Host reads this register, it returns an undefined value.
 */
#define MICA_CRYPTO_ENG_PRNG_KEY_0_L 0x0280

#define MICA_CRYPTO_ENG_PRNG_KEY_0_L__DES_KEY_SHIFT 0
#define MICA_CRYPTO_ENG_PRNG_KEY_0_L__DES_KEY_WIDTH 32
#define MICA_CRYPTO_ENG_PRNG_KEY_0_L__DES_KEY_RESET_VAL 0
#define MICA_CRYPTO_ENG_PRNG_KEY_0_L__DES_KEY_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_PRNG_KEY_0_L__DES_KEY_MASK  0xffffffff
#define MICA_CRYPTO_ENG_PRNG_KEY_0_L__DES_KEY_FIELD 0,31


/*
 * PRNG DES Key 1 High Part.
 * Contains part of the secret key that is used for Triple-DES operations.
 * The DES keys are 64-bits long, but this includes 8 parity-check bits (bits
 * on positions 0, 8, 16, 24, 32, 40, 48 and 56). The key registers are
 * implemented using a 56-bit maximum length LFSR implementation, ignoring
 * the parity bits. The key registers are updated (LFSR changes to next
 * value) after every PRNG operation. This register should NOT contain all
 * zeroes. When the Host reads this register, it returns an undefined value.
 */
#define MICA_CRYPTO_ENG_PRNG_KEY_1_H 0x02e0

#define MICA_CRYPTO_ENG_PRNG_KEY_1_H__DES_KEY_SHIFT 0
#define MICA_CRYPTO_ENG_PRNG_KEY_1_H__DES_KEY_WIDTH 32
#define MICA_CRYPTO_ENG_PRNG_KEY_1_H__DES_KEY_RESET_VAL 0
#define MICA_CRYPTO_ENG_PRNG_KEY_1_H__DES_KEY_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_PRNG_KEY_1_H__DES_KEY_MASK  0xffffffff
#define MICA_CRYPTO_ENG_PRNG_KEY_1_H__DES_KEY_FIELD 0,31


/*
 * PRNG DES Key 1 Low Part.
 * Contains part of the secret key that is used for Triple-DES operations.
 * The DES keys are 64-bits long, but this includes 8 parity-check bits (bits
 * on positions 0, 8, 16, 24, 32, 40, 48 and 56). The key registers are
 * implemented using a 56-bit maximum length LFSR implementation, ignoring
 * the parity bits. The key registers are updated (LFSR changes to next
 * value) after every PRNG operation. This register should NOT contain all
 * zeroes. When the Host reads this register, it returns an undefined value.
 */
#define MICA_CRYPTO_ENG_PRNG_KEY_1_L 0x02c0

#define MICA_CRYPTO_ENG_PRNG_KEY_1_L__DES_KEY_SHIFT 0
#define MICA_CRYPTO_ENG_PRNG_KEY_1_L__DES_KEY_WIDTH 32
#define MICA_CRYPTO_ENG_PRNG_KEY_1_L__DES_KEY_RESET_VAL 0
#define MICA_CRYPTO_ENG_PRNG_KEY_1_L__DES_KEY_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_PRNG_KEY_1_L__DES_KEY_MASK  0xffffffff
#define MICA_CRYPTO_ENG_PRNG_KEY_1_L__DES_KEY_FIELD 0,31


/*
 * PRNG LRSR higher part.
 * The Linear Feedback Shift Register (LFSR) contains a unique input DT as
 * plaintext input for the first Triple-DES operation. The register is
 * implemented using a 64-bit maximum length LFSR implementation. The
 * register is updated (LFSR changes to next value) after every PRNG
 * operation. This register should NOT contain all zeroes.
 */
#define MICA_CRYPTO_ENG_PRNG_LFSR_H 0x03a0

#define MICA_CRYPTO_ENG_PRNG_LFSR_H__COUNTER_SHIFT 0
#define MICA_CRYPTO_ENG_PRNG_LFSR_H__COUNTER_WIDTH 32
#define MICA_CRYPTO_ENG_PRNG_LFSR_H__COUNTER_RESET_VAL 0
#define MICA_CRYPTO_ENG_PRNG_LFSR_H__COUNTER_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_PRNG_LFSR_H__COUNTER_MASK  0xffffffff
#define MICA_CRYPTO_ENG_PRNG_LFSR_H__COUNTER_FIELD 0,31


/*
 * PRNG LRSR lower part.
 * The Linear Feedback Shift Register (LFSR) contains a unique input DT as
 * plaintext input for the first Triple-DES operation. The register is
 * implemented using a 64-bit maximum length LFSR implementation. The
 * register is updated (LFSR changes to next value) after every PRNG
 * operation. This register should NOT contain all zeroes.
 */
#define MICA_CRYPTO_ENG_PRNG_LFSR_L 0x0380

#define MICA_CRYPTO_ENG_PRNG_LFSR_L__COUNTER_SHIFT 0
#define MICA_CRYPTO_ENG_PRNG_LFSR_L__COUNTER_WIDTH 32
#define MICA_CRYPTO_ENG_PRNG_LFSR_L__COUNTER_RESET_VAL 0
#define MICA_CRYPTO_ENG_PRNG_LFSR_L__COUNTER_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_PRNG_LFSR_L__COUNTER_MASK  0xffffffff
#define MICA_CRYPTO_ENG_PRNG_LFSR_L__COUNTER_FIELD 0,31


/*
 * PRNG Result 0.
 * Contains part of the generated pseudo-random number, the result R of the
 * PRNG processing. The results registers can be concatenated to form one
 * unique 128-bit result. The contents of the result registers are valid when
 * the Busy bit, PRNG_STAT[0], is 0.
 */
#define MICA_CRYPTO_ENG_PRNG_RES_0 0x0300

#define MICA_CRYPTO_ENG_PRNG_RES_0__PRNG_OUTPUT_SHIFT 0
#define MICA_CRYPTO_ENG_PRNG_RES_0__PRNG_OUTPUT_WIDTH 32
#define MICA_CRYPTO_ENG_PRNG_RES_0__PRNG_OUTPUT_RESET_VAL 0
#define MICA_CRYPTO_ENG_PRNG_RES_0__PRNG_OUTPUT_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_PRNG_RES_0__PRNG_OUTPUT_MASK  0xffffffff
#define MICA_CRYPTO_ENG_PRNG_RES_0__PRNG_OUTPUT_FIELD 0,31


/*
 * PRNG Result 1.
 * Contains part of the generated pseudo-random number, the result R of the
 * PRNG processing. The results registers can be concatenated to form one
 * unique 128-bit result. The contents of the result registers are valid when
 * the Busy bit, PRNG_STAT[0], is 0.
 */
#define MICA_CRYPTO_ENG_PRNG_RES_1 0x0320

#define MICA_CRYPTO_ENG_PRNG_RES_1__PRNG_OUTPUT_SHIFT 0
#define MICA_CRYPTO_ENG_PRNG_RES_1__PRNG_OUTPUT_WIDTH 32
#define MICA_CRYPTO_ENG_PRNG_RES_1__PRNG_OUTPUT_RESET_VAL 0
#define MICA_CRYPTO_ENG_PRNG_RES_1__PRNG_OUTPUT_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_PRNG_RES_1__PRNG_OUTPUT_MASK  0xffffffff
#define MICA_CRYPTO_ENG_PRNG_RES_1__PRNG_OUTPUT_FIELD 0,31


/*
 * PRNG Result 2.
 * Contains part of the generated pseudo-random number, the result R of the
 * PRNG processing. The results registers can be concatenated to form one
 * unique 128-bit result. The contents of the result registers are valid when
 * the Busy bit, PRNG_STAT[0], is 0.
 */
#define MICA_CRYPTO_ENG_PRNG_RES_2 0x0340

#define MICA_CRYPTO_ENG_PRNG_RES_2__PRNG_OUTPUT_SHIFT 0
#define MICA_CRYPTO_ENG_PRNG_RES_2__PRNG_OUTPUT_WIDTH 32
#define MICA_CRYPTO_ENG_PRNG_RES_2__PRNG_OUTPUT_RESET_VAL 0
#define MICA_CRYPTO_ENG_PRNG_RES_2__PRNG_OUTPUT_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_PRNG_RES_2__PRNG_OUTPUT_MASK  0xffffffff
#define MICA_CRYPTO_ENG_PRNG_RES_2__PRNG_OUTPUT_FIELD 0,31


/*
 * PRNG Result 3.
 * Contains part of the generated pseudo-random number, the result R of the
 * PRNG processing. The results registers can be concatenated to form one
 * unique 128-bit result. The contents of the result registers are valid when
 * the Busy bit, PRNG_STAT[0], is 0.
 */
#define MICA_CRYPTO_ENG_PRNG_RES_3 0x0360

#define MICA_CRYPTO_ENG_PRNG_RES_3__PRNG_OUTPUT_SHIFT 0
#define MICA_CRYPTO_ENG_PRNG_RES_3__PRNG_OUTPUT_WIDTH 32
#define MICA_CRYPTO_ENG_PRNG_RES_3__PRNG_OUTPUT_RESET_VAL 0
#define MICA_CRYPTO_ENG_PRNG_RES_3__PRNG_OUTPUT_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_PRNG_RES_3__PRNG_OUTPUT_MASK  0xffffffff
#define MICA_CRYPTO_ENG_PRNG_RES_3__PRNG_OUTPUT_FIELD 0,31


/*
 * PRNG Seed High Part.
 * The PRNG must be seeded with a 64-bit random number by writing a secret
 * 64-bit seed value (V) to this register. This seed is needed once after
 * reset; the packet processor then automatically updates V with the output
 * of the third Triple-DES operation. Note: It is recommended that an
 * external RNG be used to generate the 64-bit random number used to 'seed'
 * the PRNG Seed Low and High registers.
 */
#define MICA_CRYPTO_ENG_PRNG_SEED_H 0x0260

#define MICA_CRYPTO_ENG_PRNG_SEED_H__PRNG_SEED_SHIFT 0
#define MICA_CRYPTO_ENG_PRNG_SEED_H__PRNG_SEED_WIDTH 32
#define MICA_CRYPTO_ENG_PRNG_SEED_H__PRNG_SEED_RESET_VAL 0
#define MICA_CRYPTO_ENG_PRNG_SEED_H__PRNG_SEED_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_PRNG_SEED_H__PRNG_SEED_MASK  0xffffffff
#define MICA_CRYPTO_ENG_PRNG_SEED_H__PRNG_SEED_FIELD 0,31


/*
 * PRNG Seed Low Part.
 * The PRNG must be seeded with a 64-bit random number by writing a secret
 * 64-bit seed value (V) to this register. This seed is needed once after
 * reset; the packet processor then automatically updates V with the output
 * of the third Triple-DES operation. Note: It is recommended that an
 * external RNG be used to generate the 64-bit random number used to 'seed'
 * the PRNG Seed Low and High registers.
 */
#define MICA_CRYPTO_ENG_PRNG_SEED_L 0x0240

#define MICA_CRYPTO_ENG_PRNG_SEED_L__PRNG_SEED_SHIFT 0
#define MICA_CRYPTO_ENG_PRNG_SEED_L__PRNG_SEED_WIDTH 32
#define MICA_CRYPTO_ENG_PRNG_SEED_L__PRNG_SEED_RESET_VAL 0
#define MICA_CRYPTO_ENG_PRNG_SEED_L__PRNG_SEED_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_PRNG_SEED_L__PRNG_SEED_MASK  0xffffffff
#define MICA_CRYPTO_ENG_PRNG_SEED_L__PRNG_SEED_FIELD 0,31


/* PRNG Status. */
#define MICA_CRYPTO_ENG_PRNG_STAT 0x0200

#define MICA_CRYPTO_ENG_PRNG_STAT__BUSY_SHIFT 0
#define MICA_CRYPTO_ENG_PRNG_STAT__BUSY_WIDTH 1
#define MICA_CRYPTO_ENG_PRNG_STAT__BUSY_RESET_VAL 0
#define MICA_CRYPTO_ENG_PRNG_STAT__BUSY_RMASK 0x1
#define MICA_CRYPTO_ENG_PRNG_STAT__BUSY_MASK  0x1
#define MICA_CRYPTO_ENG_PRNG_STAT__BUSY_FIELD 0,0

#define MICA_CRYPTO_ENG_PRNG_STAT__RESULT_READY_SHIFT 1
#define MICA_CRYPTO_ENG_PRNG_STAT__RESULT_READY_WIDTH 1
#define MICA_CRYPTO_ENG_PRNG_STAT__RESULT_READY_RESET_VAL 0
#define MICA_CRYPTO_ENG_PRNG_STAT__RESULT_READY_RMASK 0x1
#define MICA_CRYPTO_ENG_PRNG_STAT__RESULT_READY_MASK  0x2
#define MICA_CRYPTO_ENG_PRNG_STAT__RESULT_READY_FIELD 1,1


/*
 * Protocol and Algorithm Enable.
 * This register allows software on the Host system to determine the hardware
 * capabilities that it can access.  A setting of 1. indicates that the
 * protocol or algorithm is enabled. A 0. setting indicates that it is
 * disabled and therefore inaccessible. If a disabled algorithm is selected
 * in the context, an error will be generated.
 */
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE 0x0020

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HASH_ONLY_SHIFT 0
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HASH_ONLY_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HASH_ONLY_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HASH_ONLY_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HASH_ONLY_MASK  0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HASH_ONLY_FIELD 0,0

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__ENCRYPT_ONLY_SHIFT 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__ENCRYPT_ONLY_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__ENCRYPT_ONLY_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__ENCRYPT_ONLY_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__ENCRYPT_ONLY_MASK  0x2
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__ENCRYPT_ONLY_FIELD 1,1

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HASH_ENCRYPT_SHIFT 2
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HASH_ENCRYPT_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HASH_ENCRYPT_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HASH_ENCRYPT_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HASH_ENCRYPT_MASK  0x4
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HASH_ENCRYPT_FIELD 2,2

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HASH_DECRYPT_SHIFT 3
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HASH_DECRYPT_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HASH_DECRYPT_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HASH_DECRYPT_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HASH_DECRYPT_MASK  0x8
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HASH_DECRYPT_FIELD 3,3

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__ENCRYPT_HASH_SHIFT 4
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__ENCRYPT_HASH_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__ENCRYPT_HASH_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__ENCRYPT_HASH_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__ENCRYPT_HASH_MASK  0x10
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__ENCRYPT_HASH_FIELD 4,4

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DECRYPT_HASH_SHIFT 5
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DECRYPT_HASH_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DECRYPT_HASH_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DECRYPT_HASH_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DECRYPT_HASH_MASK  0x20
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DECRYPT_HASH_FIELD 5,5

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__ARC4_SHIFT 7
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__ARC4_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__ARC4_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__ARC4_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__ARC4_MASK  0x80
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__ARC4_FIELD 7,7

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_EBC_SHIFT 8
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_EBC_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_EBC_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_EBC_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_EBC_MASK  0x100
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_EBC_FIELD 8,8

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_CBC_SHIFT 9
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_CBC_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_CBC_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_CBC_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_CBC_MASK  0x200
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_CBC_FIELD 9,9

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_CTR_ICM_SHIFT 10
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_CTR_ICM_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_CTR_ICM_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_CTR_ICM_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_CTR_ICM_MASK  0x400
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_CTR_ICM_FIELD 10,10

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_OFB_SHIFT 11
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_OFB_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_OFB_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_OFB_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_OFB_MASK  0x800
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_OFB_FIELD 11,11

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_CFB_SHIFT 12
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_CFB_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_CFB_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_CFB_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_CFB_MASK  0x1000
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_CFB_FIELD 12,12

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_ECB_SHIFT 13
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_ECB_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_ECB_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_ECB_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_ECB_MASK  0x2000
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_ECB_FIELD 13,13

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_CBC_SHIFT 14
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_CBC_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_CBC_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_CBC_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_CBC_MASK  0x4000
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_CBC_FIELD 14,14

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_OFB_SHIFT 16
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_OFB_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_OFB_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_OFB_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_OFB_MASK  0x10000
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_OFB_FIELD 16,16

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_CFB_SHIFT 17
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_CFB_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_CFB_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_CFB_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_CFB_MASK  0x20000
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__DES_CFB_FIELD 17,17

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_ECB_SHIFT 18
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_ECB_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_ECB_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_ECB_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_ECB_MASK  0x40000
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_ECB_FIELD 18,18

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_CBC_SHIFT 19
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_CBC_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_CBC_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_CBC_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_CBC_MASK  0x80000
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_CBC_FIELD 19,19

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_OFB_SHIFT 21
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_OFB_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_OFB_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_OFB_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_OFB_MASK  0x200000
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_OFB_FIELD 21,21

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_CFB_SHIFT 22
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_CFB_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_CFB_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_CFB_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_CFB_MASK  0x400000
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__TDES_CFB_FIELD 22,22

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__BASIC_MD5_SHIFT 24
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__BASIC_MD5_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__BASIC_MD5_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__BASIC_MD5_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__BASIC_MD5_MASK  0x1000000
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__BASIC_MD5_FIELD 24,24

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HMAC_MD5_SHIFT 25
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HMAC_MD5_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HMAC_MD5_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HMAC_MD5_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HMAC_MD5_MASK  0x2000000
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HMAC_MD5_FIELD 25,25

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__BASIC_SHA_1_SHIFT 26
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__BASIC_SHA_1_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__BASIC_SHA_1_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__BASIC_SHA_1_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__BASIC_SHA_1_MASK  0x4000000
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__BASIC_SHA_1_FIELD 26,26

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HMAC_SHA_1_SHIFT 27
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HMAC_SHA_1_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HMAC_SHA_1_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HMAC_SHA_1_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HMAC_SHA_1_MASK  0x8000000
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HMAC_SHA_1_FIELD 27,27

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__BASIC_SHA_2_SHIFT 28
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__BASIC_SHA_2_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__BASIC_SHA_2_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__BASIC_SHA_2_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__BASIC_SHA_2_MASK  0x10000000
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__BASIC_SHA_2_FIELD 28,28

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HMAC_SHA_2_SHIFT 29
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HMAC_SHA_2_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HMAC_SHA_2_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HMAC_SHA_2_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HMAC_SHA_2_MASK  0x20000000
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__HMAC_SHA_2_FIELD 29,29

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_XCBC_MAC_SHIFT 30
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_XCBC_MAC_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_XCBC_MAC_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_XCBC_MAC_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_XCBC_MAC_MASK  0x40000000
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__AES_XCBC_MAC_FIELD 30,30

#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__GCM_HASH_SHIFT 31
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__GCM_HASH_WIDTH 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__GCM_HASH_RESET_VAL 1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__GCM_HASH_RMASK 0x1
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__GCM_HASH_MASK  0x80000000
#define MICA_CRYPTO_ENG_PROTOCOL_ALGORITHM_ENABLE__GCM_HASH_FIELD 31,31


/*
 * PKA Result Count 0.
 * Result count for result queue 0
 */
#define MICA_CRYPTO_ENG_RESULT_COUNT_0 0x7c20

#define MICA_CRYPTO_ENG_RESULT_COUNT_0__VALUE_SHIFT 0
#define MICA_CRYPTO_ENG_RESULT_COUNT_0__VALUE_WIDTH 16
#define MICA_CRYPTO_ENG_RESULT_COUNT_0__VALUE_RESET_VAL 0
#define MICA_CRYPTO_ENG_RESULT_COUNT_0__VALUE_RMASK 0xffff
#define MICA_CRYPTO_ENG_RESULT_COUNT_0__VALUE_MASK  0xffff
#define MICA_CRYPTO_ENG_RESULT_COUNT_0__VALUE_FIELD 0,15


/*
 * PKA Result Count 1.
 * Result count for result queue 1
 */
#define MICA_CRYPTO_ENG_RESULT_COUNT_1 0x7c28

#define MICA_CRYPTO_ENG_RESULT_COUNT_1__VALUE_SHIFT 0
#define MICA_CRYPTO_ENG_RESULT_COUNT_1__VALUE_WIDTH 16
#define MICA_CRYPTO_ENG_RESULT_COUNT_1__VALUE_RESET_VAL 0
#define MICA_CRYPTO_ENG_RESULT_COUNT_1__VALUE_RMASK 0xffff
#define MICA_CRYPTO_ENG_RESULT_COUNT_1__VALUE_MASK  0xffff
#define MICA_CRYPTO_ENG_RESULT_COUNT_1__VALUE_FIELD 0,15


/*
 * PKA Result Count 2.
 * Result count for result queue 2
 */
#define MICA_CRYPTO_ENG_RESULT_COUNT_2 0x7c30

#define MICA_CRYPTO_ENG_RESULT_COUNT_2__VALUE_SHIFT 0
#define MICA_CRYPTO_ENG_RESULT_COUNT_2__VALUE_WIDTH 16
#define MICA_CRYPTO_ENG_RESULT_COUNT_2__VALUE_RESET_VAL 0
#define MICA_CRYPTO_ENG_RESULT_COUNT_2__VALUE_RMASK 0xffff
#define MICA_CRYPTO_ENG_RESULT_COUNT_2__VALUE_MASK  0xffff
#define MICA_CRYPTO_ENG_RESULT_COUNT_2__VALUE_FIELD 0,15


/*
 * PKA Result Count 3.
 * Result count for result queue 3
 */
#define MICA_CRYPTO_ENG_RESULT_COUNT_3 0x7c38

#define MICA_CRYPTO_ENG_RESULT_COUNT_3__VALUE_SHIFT 0
#define MICA_CRYPTO_ENG_RESULT_COUNT_3__VALUE_WIDTH 16
#define MICA_CRYPTO_ENG_RESULT_COUNT_3__VALUE_RESET_VAL 0
#define MICA_CRYPTO_ENG_RESULT_COUNT_3__VALUE_RMASK 0xffff
#define MICA_CRYPTO_ENG_RESULT_COUNT_3__VALUE_MASK  0xffff
#define MICA_CRYPTO_ENG_RESULT_COUNT_3__VALUE_FIELD 0,15


/*
 * PKA read/write pointers 0.
 * Command and result pointers for ring 0
 */
#define MICA_CRYPTO_ENG_RING_RW_PTRS_0 0x00a0

#define MICA_CRYPTO_ENG_RING_RW_PTRS_0__COMMAND_SHIFT 0
#define MICA_CRYPTO_ENG_RING_RW_PTRS_0__COMMAND_WIDTH 16
#define MICA_CRYPTO_ENG_RING_RW_PTRS_0__COMMAND_RESET_VAL 0
#define MICA_CRYPTO_ENG_RING_RW_PTRS_0__COMMAND_RMASK 0xffff
#define MICA_CRYPTO_ENG_RING_RW_PTRS_0__COMMAND_MASK  0xffff
#define MICA_CRYPTO_ENG_RING_RW_PTRS_0__COMMAND_FIELD 0,15

#define MICA_CRYPTO_ENG_RING_RW_PTRS_0__RESULT_SHIFT 16
#define MICA_CRYPTO_ENG_RING_RW_PTRS_0__RESULT_WIDTH 16
#define MICA_CRYPTO_ENG_RING_RW_PTRS_0__RESULT_RESET_VAL 0
#define MICA_CRYPTO_ENG_RING_RW_PTRS_0__RESULT_RMASK 0xffff
#define MICA_CRYPTO_ENG_RING_RW_PTRS_0__RESULT_MASK  0xffff0000
#define MICA_CRYPTO_ENG_RING_RW_PTRS_0__RESULT_FIELD 16,31


/*
 * PKA read/write pointers 1.
 * Command and result pointers for ring 1
 */
#define MICA_CRYPTO_ENG_RING_RW_PTRS_1 0x00a8

#define MICA_CRYPTO_ENG_RING_RW_PTRS_1__COMMAND_SHIFT 0
#define MICA_CRYPTO_ENG_RING_RW_PTRS_1__COMMAND_WIDTH 16
#define MICA_CRYPTO_ENG_RING_RW_PTRS_1__COMMAND_RESET_VAL 0
#define MICA_CRYPTO_ENG_RING_RW_PTRS_1__COMMAND_RMASK 0xffff
#define MICA_CRYPTO_ENG_RING_RW_PTRS_1__COMMAND_MASK  0xffff
#define MICA_CRYPTO_ENG_RING_RW_PTRS_1__COMMAND_FIELD 0,15

#define MICA_CRYPTO_ENG_RING_RW_PTRS_1__RESULT_SHIFT 16
#define MICA_CRYPTO_ENG_RING_RW_PTRS_1__RESULT_WIDTH 16
#define MICA_CRYPTO_ENG_RING_RW_PTRS_1__RESULT_RESET_VAL 0
#define MICA_CRYPTO_ENG_RING_RW_PTRS_1__RESULT_RMASK 0xffff
#define MICA_CRYPTO_ENG_RING_RW_PTRS_1__RESULT_MASK  0xffff0000
#define MICA_CRYPTO_ENG_RING_RW_PTRS_1__RESULT_FIELD 16,31


/*
 * PKA read/write pointers 2.
 * Command and result pointers for ring 2
 */
#define MICA_CRYPTO_ENG_RING_RW_PTRS_2 0x00b0

#define MICA_CRYPTO_ENG_RING_RW_PTRS_2__COMMAND_SHIFT 0
#define MICA_CRYPTO_ENG_RING_RW_PTRS_2__COMMAND_WIDTH 16
#define MICA_CRYPTO_ENG_RING_RW_PTRS_2__COMMAND_RESET_VAL 0
#define MICA_CRYPTO_ENG_RING_RW_PTRS_2__COMMAND_RMASK 0xffff
#define MICA_CRYPTO_ENG_RING_RW_PTRS_2__COMMAND_MASK  0xffff
#define MICA_CRYPTO_ENG_RING_RW_PTRS_2__COMMAND_FIELD 0,15

#define MICA_CRYPTO_ENG_RING_RW_PTRS_2__RESULT_SHIFT 16
#define MICA_CRYPTO_ENG_RING_RW_PTRS_2__RESULT_WIDTH 16
#define MICA_CRYPTO_ENG_RING_RW_PTRS_2__RESULT_RESET_VAL 0
#define MICA_CRYPTO_ENG_RING_RW_PTRS_2__RESULT_RMASK 0xffff
#define MICA_CRYPTO_ENG_RING_RW_PTRS_2__RESULT_MASK  0xffff0000
#define MICA_CRYPTO_ENG_RING_RW_PTRS_2__RESULT_FIELD 16,31


/*
 * PKA read/write pointers 3.
 * Command and result pointers for ring 3
 */
#define MICA_CRYPTO_ENG_RING_RW_PTRS_3 0x00b8

#define MICA_CRYPTO_ENG_RING_RW_PTRS_3__COMMAND_SHIFT 0
#define MICA_CRYPTO_ENG_RING_RW_PTRS_3__COMMAND_WIDTH 16
#define MICA_CRYPTO_ENG_RING_RW_PTRS_3__COMMAND_RESET_VAL 0
#define MICA_CRYPTO_ENG_RING_RW_PTRS_3__COMMAND_RMASK 0xffff
#define MICA_CRYPTO_ENG_RING_RW_PTRS_3__COMMAND_MASK  0xffff
#define MICA_CRYPTO_ENG_RING_RW_PTRS_3__COMMAND_FIELD 0,15

#define MICA_CRYPTO_ENG_RING_RW_PTRS_3__RESULT_SHIFT 16
#define MICA_CRYPTO_ENG_RING_RW_PTRS_3__RESULT_WIDTH 16
#define MICA_CRYPTO_ENG_RING_RW_PTRS_3__RESULT_RESET_VAL 0
#define MICA_CRYPTO_ENG_RING_RW_PTRS_3__RESULT_RMASK 0xffff
#define MICA_CRYPTO_ENG_RING_RW_PTRS_3__RESULT_MASK  0xffff0000
#define MICA_CRYPTO_ENG_RING_RW_PTRS_3__RESULT_FIELD 16,31


/*
 * PKA Ring Size 0.
 * Size of command and result queue 0
 */
#define MICA_CRYPTO_ENG_RING_SIZE_0 0x0080

#define MICA_CRYPTO_ENG_RING_SIZE_0__SIZE_SHIFT 0
#define MICA_CRYPTO_ENG_RING_SIZE_0__SIZE_WIDTH 16
#define MICA_CRYPTO_ENG_RING_SIZE_0__SIZE_RESET_VAL 0
#define MICA_CRYPTO_ENG_RING_SIZE_0__SIZE_RMASK 0xffff
#define MICA_CRYPTO_ENG_RING_SIZE_0__SIZE_MASK  0xffff
#define MICA_CRYPTO_ENG_RING_SIZE_0__SIZE_FIELD 0,15

#define MICA_CRYPTO_ENG_RING_SIZE_0__OFFSET_SHIFT 16
#define MICA_CRYPTO_ENG_RING_SIZE_0__OFFSET_WIDTH 16
#define MICA_CRYPTO_ENG_RING_SIZE_0__OFFSET_RESET_VAL 0
#define MICA_CRYPTO_ENG_RING_SIZE_0__OFFSET_RMASK 0xffff
#define MICA_CRYPTO_ENG_RING_SIZE_0__OFFSET_MASK  0xffff0000
#define MICA_CRYPTO_ENG_RING_SIZE_0__OFFSET_FIELD 16,31


/*
 * PKA Ring Size 1.
 * Size of command and result queue 1
 */
#define MICA_CRYPTO_ENG_RING_SIZE_1 0x0088

#define MICA_CRYPTO_ENG_RING_SIZE_1__SIZE_SHIFT 0
#define MICA_CRYPTO_ENG_RING_SIZE_1__SIZE_WIDTH 16
#define MICA_CRYPTO_ENG_RING_SIZE_1__SIZE_RESET_VAL 0
#define MICA_CRYPTO_ENG_RING_SIZE_1__SIZE_RMASK 0xffff
#define MICA_CRYPTO_ENG_RING_SIZE_1__SIZE_MASK  0xffff
#define MICA_CRYPTO_ENG_RING_SIZE_1__SIZE_FIELD 0,15

#define MICA_CRYPTO_ENG_RING_SIZE_1__OFFSET_SHIFT 16
#define MICA_CRYPTO_ENG_RING_SIZE_1__OFFSET_WIDTH 16
#define MICA_CRYPTO_ENG_RING_SIZE_1__OFFSET_RESET_VAL 0
#define MICA_CRYPTO_ENG_RING_SIZE_1__OFFSET_RMASK 0xffff
#define MICA_CRYPTO_ENG_RING_SIZE_1__OFFSET_MASK  0xffff0000
#define MICA_CRYPTO_ENG_RING_SIZE_1__OFFSET_FIELD 16,31


/*
 * PKA Ring Size 2.
 * Size of command and result queue 2
 */
#define MICA_CRYPTO_ENG_RING_SIZE_2 0x0090

#define MICA_CRYPTO_ENG_RING_SIZE_2__SIZE_SHIFT 0
#define MICA_CRYPTO_ENG_RING_SIZE_2__SIZE_WIDTH 16
#define MICA_CRYPTO_ENG_RING_SIZE_2__SIZE_RESET_VAL 0
#define MICA_CRYPTO_ENG_RING_SIZE_2__SIZE_RMASK 0xffff
#define MICA_CRYPTO_ENG_RING_SIZE_2__SIZE_MASK  0xffff
#define MICA_CRYPTO_ENG_RING_SIZE_2__SIZE_FIELD 0,15

#define MICA_CRYPTO_ENG_RING_SIZE_2__OFFSET_SHIFT 16
#define MICA_CRYPTO_ENG_RING_SIZE_2__OFFSET_WIDTH 16
#define MICA_CRYPTO_ENG_RING_SIZE_2__OFFSET_RESET_VAL 0
#define MICA_CRYPTO_ENG_RING_SIZE_2__OFFSET_RMASK 0xffff
#define MICA_CRYPTO_ENG_RING_SIZE_2__OFFSET_MASK  0xffff0000
#define MICA_CRYPTO_ENG_RING_SIZE_2__OFFSET_FIELD 16,31


/*
 * PKA Ring Size 3.
 * Size of command and result queue 3
 */
#define MICA_CRYPTO_ENG_RING_SIZE_3 0x0098

#define MICA_CRYPTO_ENG_RING_SIZE_3__SIZE_SHIFT 0
#define MICA_CRYPTO_ENG_RING_SIZE_3__SIZE_WIDTH 16
#define MICA_CRYPTO_ENG_RING_SIZE_3__SIZE_RESET_VAL 0
#define MICA_CRYPTO_ENG_RING_SIZE_3__SIZE_RMASK 0xffff
#define MICA_CRYPTO_ENG_RING_SIZE_3__SIZE_MASK  0xffff
#define MICA_CRYPTO_ENG_RING_SIZE_3__SIZE_FIELD 0,15

#define MICA_CRYPTO_ENG_RING_SIZE_3__OFFSET_SHIFT 16
#define MICA_CRYPTO_ENG_RING_SIZE_3__OFFSET_WIDTH 16
#define MICA_CRYPTO_ENG_RING_SIZE_3__OFFSET_RESET_VAL 0
#define MICA_CRYPTO_ENG_RING_SIZE_3__OFFSET_RMASK 0xffff
#define MICA_CRYPTO_ENG_RING_SIZE_3__OFFSET_MASK  0xffff0000
#define MICA_CRYPTO_ENG_RING_SIZE_3__OFFSET_FIELD 16,31


/*
 * PKA Result Ring Base 0.
 * Base address in Window RAM for result queue 0
 */
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_0 0x0010

#define MICA_CRYPTO_ENG_RSLT_RING_BASE_0__ADDRESS_SHIFT 0
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_0__ADDRESS_WIDTH 32
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_0__ADDRESS_RESET_VAL 0
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_0__ADDRESS_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_0__ADDRESS_MASK  0xffffffff
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_0__ADDRESS_FIELD 0,31


/*
 * PKA Result Ring Base 1.
 * Base address in Window RAM for result queue 1
 */
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_1 0x0030

#define MICA_CRYPTO_ENG_RSLT_RING_BASE_1__ADDRESS_SHIFT 0
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_1__ADDRESS_WIDTH 32
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_1__ADDRESS_RESET_VAL 0
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_1__ADDRESS_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_1__ADDRESS_MASK  0xffffffff
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_1__ADDRESS_FIELD 0,31


/*
 * PKA Result Ring Base 2.
 * Base address in Window RAM for result queue 2
 */
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_2 0x0050

#define MICA_CRYPTO_ENG_RSLT_RING_BASE_2__ADDRESS_SHIFT 0
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_2__ADDRESS_WIDTH 32
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_2__ADDRESS_RESET_VAL 0
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_2__ADDRESS_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_2__ADDRESS_MASK  0xffffffff
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_2__ADDRESS_FIELD 0,31


/*
 * PKA Result Ring Base 3.
 * Base address in Window RAM for result queue 3
 */
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_3 0x0070

#define MICA_CRYPTO_ENG_RSLT_RING_BASE_3__ADDRESS_SHIFT 0
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_3__ADDRESS_WIDTH 32
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_3__ADDRESS_RESET_VAL 0
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_3__ADDRESS_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_3__ADDRESS_MASK  0xffffffff
#define MICA_CRYPTO_ENG_RSLT_RING_BASE_3__ADDRESS_FIELD 0,31


/*
 * Token Control and Status.
 * Provides control and status for the packet processor.
 */
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS 0x0000

#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__ACTIVE_TOKENS_SHIFT 0
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__ACTIVE_TOKENS_WIDTH 2
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__ACTIVE_TOKENS_RESET_VAL 0
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__ACTIVE_TOKENS_RMASK 0x3
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__ACTIVE_TOKENS_MASK  0x3
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__ACTIVE_TOKENS_FIELD 0,1

#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__TOKEN_LOCATION_AVAILABLE_SHIFT 2
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__TOKEN_LOCATION_AVAILABLE_WIDTH 1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__TOKEN_LOCATION_AVAILABLE_RESET_VAL 0
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__TOKEN_LOCATION_AVAILABLE_RMASK 0x1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__TOKEN_LOCATION_AVAILABLE_MASK  0x4
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__TOKEN_LOCATION_AVAILABLE_FIELD 2,2

#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__RESULT_TOKEN_AVAILABLE_SHIFT 3
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__RESULT_TOKEN_AVAILABLE_WIDTH 1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__RESULT_TOKEN_AVAILABLE_RESET_VAL 0
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__RESULT_TOKEN_AVAILABLE_RMASK 0x1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__RESULT_TOKEN_AVAILABLE_MASK  0x8
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__RESULT_TOKEN_AVAILABLE_FIELD 3,3

#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__TOKEN_READ_ACTIVE_SHIFT 4
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__TOKEN_READ_ACTIVE_WIDTH 1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__TOKEN_READ_ACTIVE_RESET_VAL 0
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__TOKEN_READ_ACTIVE_RMASK 0x1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__TOKEN_READ_ACTIVE_MASK  0x10
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__TOKEN_READ_ACTIVE_FIELD 4,4

#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__CONTEXT_CACHE_ACTIVE_SHIFT 5
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__CONTEXT_CACHE_ACTIVE_WIDTH 1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__CONTEXT_CACHE_ACTIVE_RESET_VAL 0
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__CONTEXT_CACHE_ACTIVE_RMASK 0x1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__CONTEXT_CACHE_ACTIVE_MASK  0x20
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__CONTEXT_CACHE_ACTIVE_FIELD 5,5

#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__CONTEXT_FETCH_SHIFT 6
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__CONTEXT_FETCH_WIDTH 1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__CONTEXT_FETCH_RESET_VAL 0
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__CONTEXT_FETCH_RMASK 0x1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__CONTEXT_FETCH_MASK  0x40
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__CONTEXT_FETCH_FIELD 6,6

#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__RESULT_CONTEXT_SHIFT 7
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__RESULT_CONTEXT_WIDTH 1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__RESULT_CONTEXT_RESET_VAL 0
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__RESULT_CONTEXT_RMASK 0x1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__RESULT_CONTEXT_MASK  0x80
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__RESULT_CONTEXT_FIELD 7,7

#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__PACKETS_TO_BE_PROCESSED_SHIFT 8
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__PACKETS_TO_BE_PROCESSED_WIDTH 6
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__PACKETS_TO_BE_PROCESSED_RESET_VAL 0
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__PACKETS_TO_BE_PROCESSED_RMASK 0x3f
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__PACKETS_TO_BE_PROCESSED_MASK  0x3f00
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__PACKETS_TO_BE_PROCESSED_FIELD 8,13

#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__PROCESSING_HELD_IDLE_SHIFT 14
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__PROCESSING_HELD_IDLE_WIDTH 1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__PROCESSING_HELD_IDLE_RESET_VAL 0
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__PROCESSING_HELD_IDLE_RMASK 0x1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__PROCESSING_HELD_IDLE_MASK  0x4000
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__PROCESSING_HELD_IDLE_FIELD 14,14

#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__BUSY_SHIFT 15
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__BUSY_WIDTH 1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__BUSY_RESET_VAL 0
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__BUSY_RMASK 0x1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__BUSY_MASK  0x8000
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__BUSY_FIELD 15,15

#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__OPTIMAL_CONTEXT_UPDATES_SHIFT 16
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__OPTIMAL_CONTEXT_UPDATES_WIDTH 1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__OPTIMAL_CONTEXT_UPDATES_RESET_VAL 0
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__OPTIMAL_CONTEXT_UPDATES_RMASK 0x1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__OPTIMAL_CONTEXT_UPDATES_MASK  0x10000
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__OPTIMAL_CONTEXT_UPDATES_FIELD 16,16

#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__INTERRUPT_PULSE_OR_LEVEL_SHIFT 17
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__INTERRUPT_PULSE_OR_LEVEL_WIDTH 1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__INTERRUPT_PULSE_OR_LEVEL_RESET_VAL 0
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__INTERRUPT_PULSE_OR_LEVEL_RMASK 0x1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__INTERRUPT_PULSE_OR_LEVEL_MASK  0x20000
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__INTERRUPT_PULSE_OR_LEVEL_FIELD 17,17

#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__TIME_OUT_COUNTER_ENABLE_SHIFT 22
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__TIME_OUT_COUNTER_ENABLE_WIDTH 1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__TIME_OUT_COUNTER_ENABLE_RESET_VAL 0
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__TIME_OUT_COUNTER_ENABLE_RMASK 0x1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__TIME_OUT_COUNTER_ENABLE_MASK  0x400000
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__TIME_OUT_COUNTER_ENABLE_FIELD 22,22

#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__DEBUG_MODE_SHIFT 23
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__DEBUG_MODE_WIDTH 1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__DEBUG_MODE_RESET_VAL 0
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__DEBUG_MODE_RMASK 0x1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__DEBUG_MODE_MASK  0x800000
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__DEBUG_MODE_FIELD 23,23

#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__PROCESS_N_PACKETS_SHIFT 24
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__PROCESS_N_PACKETS_WIDTH 6
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__PROCESS_N_PACKETS_RESET_VAL 0
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__PROCESS_N_PACKETS_RMASK 0x3f
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__PROCESS_N_PACKETS_MASK  0x3f000000
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__PROCESS_N_PACKETS_FIELD 24,29

#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__HOLD_PROCESSING_SHIFT 31
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__HOLD_PROCESSING_WIDTH 1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__HOLD_PROCESSING_RESET_VAL 0
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__HOLD_PROCESSING_RMASK 0x1
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__HOLD_PROCESSING_MASK  0x80000000
#define MICA_CRYPTO_ENG_TOKEN_CONTROL_STATUS__HOLD_PROCESSING_FIELD 31,31


/* TRNG Alarm Counter. */
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT 0x8038

#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__ALARM_THRESHOLD_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__ALARM_THRESHOLD_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__ALARM_THRESHOLD_RESET_VAL 255
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__ALARM_THRESHOLD_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__ALARM_THRESHOLD_MASK  0xff
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__ALARM_THRESHOLD_FIELD 0,7

#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__STALL_RUN_POKER_SHIFT 15
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__STALL_RUN_POKER_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__STALL_RUN_POKER_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__STALL_RUN_POKER_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__STALL_RUN_POKER_MASK  0x8000
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__STALL_RUN_POKER_FIELD 15,15

#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__SHUTDOWN_THRESHOLD_SHIFT 16
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__SHUTDOWN_THRESHOLD_WIDTH 5
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__SHUTDOWN_THRESHOLD_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__SHUTDOWN_THRESHOLD_RMASK 0x1f
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__SHUTDOWN_THRESHOLD_MASK  0x1f0000
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__SHUTDOWN_THRESHOLD_FIELD 16,20

#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__SHUTDOWN_FATAL_SHIFT 23
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__SHUTDOWN_FATAL_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__SHUTDOWN_FATAL_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__SHUTDOWN_FATAL_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__SHUTDOWN_FATAL_MASK  0x800000
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__SHUTDOWN_FATAL_FIELD 23,23

#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__SHUTDOWN_COUNT_SHIFT 24
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__SHUTDOWN_COUNT_WIDTH 6
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__SHUTDOWN_COUNT_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__SHUTDOWN_COUNT_RMASK 0x3f
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__SHUTDOWN_COUNT_MASK  0x3f000000
#define MICA_CRYPTO_ENG_TRNG_ALARMCNT__SHUTDOWN_COUNT_FIELD 24,29


/*
 * TRNG Alarm Mask.
 * This register can be used by the Host to determine which of the individual
 * FROs generated an alarm event. An alarm event for a FRO sets a bit in this
 * register. If that bit in this register is already set, the corresponding
 * bit in the TRNG_ALARMSTOP register is set and the FRO is turned off by
 * clearing the corresponding bit in the TRNG_FROENABLE register. If that bit
 * was not already set, the FRO is restarted automatically in an attempt to
 * break sample cycle locking that could have caused the alarm event.
 */
#define MICA_CRYPTO_ENG_TRNG_ALARMMASK 0x8050

#define MICA_CRYPTO_ENG_TRNG_ALARMMASK__FRO_ALARMMASKS_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_ALARMMASK__FRO_ALARMMASKS_WIDTH 24
#define MICA_CRYPTO_ENG_TRNG_ALARMMASK__FRO_ALARMMASKS_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_ALARMMASK__FRO_ALARMMASKS_RMASK 0xffffff
#define MICA_CRYPTO_ENG_TRNG_ALARMMASK__FRO_ALARMMASKS_MASK  0xffffff
#define MICA_CRYPTO_ENG_TRNG_ALARMMASK__FRO_ALARMMASKS_FIELD 0,23


/*
 * TRNG_ALARMSTOP.
 * This register can be used by the Host to determine which of the individual
 * FROs generated more than one alarm event in quick succession. If a FRO
 * generates an alarm event while a previous event is still logged in the
 * TRNG_ALARMMASK register, the corresponding bit in this register is set to
 * 1 and the FRO is turned off by clearing the corresponding bit in the
 * TRNG_FROENABLE register. The shutdown_count field in the TRNG_ALARMCNT
 * register keeps track of the number of 1 bits in this register.
 */
#define MICA_CRYPTO_ENG_TRNG_ALARMSTOP 0x8058

#define MICA_CRYPTO_ENG_TRNG_ALARMSTOP__FRO_ALARMSTOPS_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_ALARMSTOP__FRO_ALARMSTOPS_WIDTH 24
#define MICA_CRYPTO_ENG_TRNG_ALARMSTOP__FRO_ALARMSTOPS_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_ALARMSTOP__FRO_ALARMSTOPS_RMASK 0xffffff
#define MICA_CRYPTO_ENG_TRNG_ALARMSTOP__FRO_ALARMSTOPS_MASK  0xffffff
#define MICA_CRYPTO_ENG_TRNG_ALARMSTOP__FRO_ALARMSTOPS_FIELD 0,23


/* TRNG Block Count. */
#define MICA_CRYPTO_ENG_TRNG_BLOCKCNT 0x80e8

#define MICA_CRYPTO_ENG_TRNG_BLOCKCNT__BLOCK_COUNT_SHIFT 4
#define MICA_CRYPTO_ENG_TRNG_BLOCKCNT__BLOCK_COUNT_WIDTH 28
#define MICA_CRYPTO_ENG_TRNG_BLOCKCNT__BLOCK_COUNT_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_BLOCKCNT__BLOCK_COUNT_RMASK 0xfffffff
#define MICA_CRYPTO_ENG_TRNG_BLOCKCNT__BLOCK_COUNT_MASK  0xfffffff0
#define MICA_CRYPTO_ENG_TRNG_BLOCKCNT__BLOCK_COUNT_FIELD 4,31


/* TRNG Configuration. */
#define MICA_CRYPTO_ENG_TRNG_CONFIG 0x8030

#define MICA_CRYPTO_ENG_TRNG_CONFIG__MIN_REFILL_CYCLES_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_CONFIG__MIN_REFILL_CYCLES_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_CONFIG__MIN_REFILL_CYCLES_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_CONFIG__MIN_REFILL_CYCLES_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_CONFIG__MIN_REFILL_CYCLES_MASK  0xff
#define MICA_CRYPTO_ENG_TRNG_CONFIG__MIN_REFILL_CYCLES_FIELD 0,7

#define MICA_CRYPTO_ENG_TRNG_CONFIG__SAMPLE_DIV_SHIFT 8
#define MICA_CRYPTO_ENG_TRNG_CONFIG__SAMPLE_DIV_WIDTH 4
#define MICA_CRYPTO_ENG_TRNG_CONFIG__SAMPLE_DIV_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_CONFIG__SAMPLE_DIV_RMASK 0xf
#define MICA_CRYPTO_ENG_TRNG_CONFIG__SAMPLE_DIV_MASK  0xf00
#define MICA_CRYPTO_ENG_TRNG_CONFIG__SAMPLE_DIV_FIELD 8,11

#define MICA_CRYPTO_ENG_TRNG_CONFIG__MAX_REFILL_CYCLES_SHIFT 16
#define MICA_CRYPTO_ENG_TRNG_CONFIG__MAX_REFILL_CYCLES_WIDTH 16
#define MICA_CRYPTO_ENG_TRNG_CONFIG__MAX_REFILL_CYCLES_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_CONFIG__MAX_REFILL_CYCLES_RMASK 0xffff
#define MICA_CRYPTO_ENG_TRNG_CONFIG__MAX_REFILL_CYCLES_MASK  0xffff0000
#define MICA_CRYPTO_ENG_TRNG_CONFIG__MAX_REFILL_CYCLES_FIELD 16,31


/* TRNG Control. */
#define MICA_CRYPTO_ENG_TRNG_CONTROL 0x8028

#define MICA_CRYPTO_ENG_TRNG_CONTROL__READY_MASK_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_CONTROL__READY_MASK_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__READY_MASK_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_CONTROL__READY_MASK_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__READY_MASK_MASK  0x1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__READY_MASK_FIELD 0,0

#define MICA_CRYPTO_ENG_TRNG_CONTROL__SHUTDOWN_OFLO_MASK_SHIFT 1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__SHUTDOWN_OFLO_MASK_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__SHUTDOWN_OFLO_MASK_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_CONTROL__SHUTDOWN_OFLO_MASK_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__SHUTDOWN_OFLO_MASK_MASK  0x2
#define MICA_CRYPTO_ENG_TRNG_CONTROL__SHUTDOWN_OFLO_MASK_FIELD 1,1

#define MICA_CRYPTO_ENG_TRNG_CONTROL__STUCK_OUT_MASK_SHIFT 2
#define MICA_CRYPTO_ENG_TRNG_CONTROL__STUCK_OUT_MASK_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__STUCK_OUT_MASK_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_CONTROL__STUCK_OUT_MASK_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__STUCK_OUT_MASK_MASK  0x4
#define MICA_CRYPTO_ENG_TRNG_CONTROL__STUCK_OUT_MASK_FIELD 2,2

#define MICA_CRYPTO_ENG_TRNG_CONTROL__NOISE_FAIL_MASK_SHIFT 3
#define MICA_CRYPTO_ENG_TRNG_CONTROL__NOISE_FAIL_MASK_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__NOISE_FAIL_MASK_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_CONTROL__NOISE_FAIL_MASK_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__NOISE_FAIL_MASK_MASK  0x8
#define MICA_CRYPTO_ENG_TRNG_CONTROL__NOISE_FAIL_MASK_FIELD 3,3

#define MICA_CRYPTO_ENG_TRNG_CONTROL__RUN_FAIL_MASK_SHIFT 4
#define MICA_CRYPTO_ENG_TRNG_CONTROL__RUN_FAIL_MASK_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__RUN_FAIL_MASK_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_CONTROL__RUN_FAIL_MASK_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__RUN_FAIL_MASK_MASK  0x10
#define MICA_CRYPTO_ENG_TRNG_CONTROL__RUN_FAIL_MASK_FIELD 4,4

#define MICA_CRYPTO_ENG_TRNG_CONTROL__LONG_RUN_FAIL_MASK_SHIFT 5
#define MICA_CRYPTO_ENG_TRNG_CONTROL__LONG_RUN_FAIL_MASK_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__LONG_RUN_FAIL_MASK_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_CONTROL__LONG_RUN_FAIL_MASK_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__LONG_RUN_FAIL_MASK_MASK  0x20
#define MICA_CRYPTO_ENG_TRNG_CONTROL__LONG_RUN_FAIL_MASK_FIELD 5,5

#define MICA_CRYPTO_ENG_TRNG_CONTROL__POKER_FAIL_MASK_SHIFT 6
#define MICA_CRYPTO_ENG_TRNG_CONTROL__POKER_FAIL_MASK_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__POKER_FAIL_MASK_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_CONTROL__POKER_FAIL_MASK_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__POKER_FAIL_MASK_MASK  0x40
#define MICA_CRYPTO_ENG_TRNG_CONTROL__POKER_FAIL_MASK_FIELD 6,6

#define MICA_CRYPTO_ENG_TRNG_CONTROL__TEST_MODE_SHIFT 8
#define MICA_CRYPTO_ENG_TRNG_CONTROL__TEST_MODE_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__TEST_MODE_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_CONTROL__TEST_MODE_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__TEST_MODE_MASK  0x100
#define MICA_CRYPTO_ENG_TRNG_CONTROL__TEST_MODE_FIELD 8,8

#define MICA_CRYPTO_ENG_TRNG_CONTROL__ENABLE_TRNG_SHIFT 10
#define MICA_CRYPTO_ENG_TRNG_CONTROL__ENABLE_TRNG_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__ENABLE_TRNG_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_CONTROL__ENABLE_TRNG_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__ENABLE_TRNG_MASK  0x400
#define MICA_CRYPTO_ENG_TRNG_CONTROL__ENABLE_TRNG_FIELD 10,10

#define MICA_CRYPTO_ENG_TRNG_CONTROL__POST_PROC_EN_SHIFT 12
#define MICA_CRYPTO_ENG_TRNG_CONTROL__POST_PROC_EN_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__POST_PROC_EN_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_CONTROL__POST_PROC_EN_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__POST_PROC_EN_MASK  0x1000
#define MICA_CRYPTO_ENG_TRNG_CONTROL__POST_PROC_EN_FIELD 12,12

#define MICA_CRYPTO_ENG_TRNG_CONTROL__RE_SEED_SHIFT 15
#define MICA_CRYPTO_ENG_TRNG_CONTROL__RE_SEED_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__RE_SEED_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_CONTROL__RE_SEED_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_CONTROL__RE_SEED_MASK  0x8000
#define MICA_CRYPTO_ENG_TRNG_CONTROL__RE_SEED_FIELD 15,15

#define MICA_CRYPTO_ENG_TRNG_CONTROL__STARTUP_CYCLES_SHIFT 16
#define MICA_CRYPTO_ENG_TRNG_CONTROL__STARTUP_CYCLES_WIDTH 16
#define MICA_CRYPTO_ENG_TRNG_CONTROL__STARTUP_CYCLES_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_CONTROL__STARTUP_CYCLES_RMASK 0xffff
#define MICA_CRYPTO_ENG_TRNG_CONTROL__STARTUP_CYCLES_MASK  0xffff0000
#define MICA_CRYPTO_ENG_TRNG_CONTROL__STARTUP_CYCLES_FIELD 16,31


/*
 * TRNG Counter Access.
 * This register is used to access the main control FSM counter while the
 * test_mode bit in TRNG_CONTROL is set to 1.
 */
#define MICA_CRYPTO_ENG_TRNG_COUNT 0x8078

#define MICA_CRYPTO_ENG_TRNG_COUNT__SAMPLE_COUNTER_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_COUNT__SAMPLE_COUNTER_WIDTH 24
#define MICA_CRYPTO_ENG_TRNG_COUNT__SAMPLE_COUNTER_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_COUNT__SAMPLE_COUNTER_RMASK 0xffffff
#define MICA_CRYPTO_ENG_TRNG_COUNT__SAMPLE_COUNTER_MASK  0xffffff
#define MICA_CRYPTO_ENG_TRNG_COUNT__SAMPLE_COUNTER_FIELD 0,23


/*
 * TRNG EIP Number and HW Revision.
 */
#define MICA_CRYPTO_ENG_TRNG_EIP_REV 0x80f8

#define MICA_CRYPTO_ENG_TRNG_EIP_REV__BASIC_EIP_NUMBER_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__BASIC_EIP_NUMBER_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__BASIC_EIP_NUMBER_RESET_VAL 76
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__BASIC_EIP_NUMBER_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__BASIC_EIP_NUMBER_MASK  0xff
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__BASIC_EIP_NUMBER_FIELD 0,7

#define MICA_CRYPTO_ENG_TRNG_EIP_REV__COMPLEMENT_OF_BASIC_EIP_NUMBER_SHIFT 8
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__COMPLEMENT_OF_BASIC_EIP_NUMBER_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__COMPLEMENT_OF_BASIC_EIP_NUMBER_RESET_VAL 179
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__COMPLEMENT_OF_BASIC_EIP_NUMBER_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__COMPLEMENT_OF_BASIC_EIP_NUMBER_MASK  0xff00
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__COMPLEMENT_OF_BASIC_EIP_NUMBER_FIELD 8,15

#define MICA_CRYPTO_ENG_TRNG_EIP_REV__HW_PATCH_LEVEL_SHIFT 16
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__HW_PATCH_LEVEL_WIDTH 4
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__HW_PATCH_LEVEL_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__HW_PATCH_LEVEL_RMASK 0xf
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__HW_PATCH_LEVEL_MASK  0xf0000
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__HW_PATCH_LEVEL_FIELD 16,19

#define MICA_CRYPTO_ENG_TRNG_EIP_REV__MINOR_HW_REVISION_SHIFT 20
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__MINOR_HW_REVISION_WIDTH 4
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__MINOR_HW_REVISION_RESET_VAL 1
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__MINOR_HW_REVISION_RMASK 0xf
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__MINOR_HW_REVISION_MASK  0xf00000
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__MINOR_HW_REVISION_FIELD 20,23

#define MICA_CRYPTO_ENG_TRNG_EIP_REV__MAJOR_HW_REVISION_SHIFT 28
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__MAJOR_HW_REVISION_WIDTH 4
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__MAJOR_HW_REVISION_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__MAJOR_HW_REVISION_RMASK 0xf
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__MAJOR_HW_REVISION_MASK  0xf0000000
#define MICA_CRYPTO_ENG_TRNG_EIP_REV__MAJOR_HW_REVISION_FIELD 28,31


/* TRNG FRO De-tune. */
#define MICA_CRYPTO_ENG_TRNG_FRODETUNE 0x8048

#define MICA_CRYPTO_ENG_TRNG_FRODETUNE__FRO_DETUNES_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_FRODETUNE__FRO_DETUNES_WIDTH 24
#define MICA_CRYPTO_ENG_TRNG_FRODETUNE__FRO_DETUNES_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_FRODETUNE__FRO_DETUNES_RMASK 0xffffff
#define MICA_CRYPTO_ENG_TRNG_FRODETUNE__FRO_DETUNES_MASK  0xffffff
#define MICA_CRYPTO_ENG_TRNG_FRODETUNE__FRO_DETUNES_FIELD 0,23


/* TRNG FRO Enable. */
#define MICA_CRYPTO_ENG_TRNG_FROENABLE 0x8040

#define MICA_CRYPTO_ENG_TRNG_FROENABLE__FRO_ENABLE_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_FROENABLE__FRO_ENABLE_WIDTH 24
#define MICA_CRYPTO_ENG_TRNG_FROENABLE__FRO_ENABLE_RESET_VAL 16777215
#define MICA_CRYPTO_ENG_TRNG_FROENABLE__FRO_ENABLE_RMASK 0xffffff
#define MICA_CRYPTO_ENG_TRNG_FROENABLE__FRO_ENABLE_MASK  0xffffff
#define MICA_CRYPTO_ENG_TRNG_FROENABLE__FRO_ENABLE_FIELD 0,23


/*
 * TRNG Input 0.
 * TRNG Input
 */
#define MICA_CRYPTO_ENG_TRNG_INPUT_0 0x8000

#define MICA_CRYPTO_ENG_TRNG_INPUT_0__TRNG_INPUT_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_INPUT_0__TRNG_INPUT_WIDTH 32
#define MICA_CRYPTO_ENG_TRNG_INPUT_0__TRNG_INPUT_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_INPUT_0__TRNG_INPUT_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_TRNG_INPUT_0__TRNG_INPUT_MASK  0xffffffff
#define MICA_CRYPTO_ENG_TRNG_INPUT_0__TRNG_INPUT_FIELD 0,31


/*
 * TRNG Input 1.
 * TRNG Input
 */
#define MICA_CRYPTO_ENG_TRNG_INPUT_1 0x8008

#define MICA_CRYPTO_ENG_TRNG_INPUT_1__TRNG_INPUT_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_INPUT_1__TRNG_INPUT_WIDTH 32
#define MICA_CRYPTO_ENG_TRNG_INPUT_1__TRNG_INPUT_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_INPUT_1__TRNG_INPUT_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_TRNG_INPUT_1__TRNG_INPUT_MASK  0xffffffff
#define MICA_CRYPTO_ENG_TRNG_INPUT_1__TRNG_INPUT_FIELD 0,31


/*
 * TRNG Input 2.
 * TRNG Input
 */
#define MICA_CRYPTO_ENG_TRNG_INPUT_2 0x8010

#define MICA_CRYPTO_ENG_TRNG_INPUT_2__TRNG_INPUT_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_INPUT_2__TRNG_INPUT_WIDTH 32
#define MICA_CRYPTO_ENG_TRNG_INPUT_2__TRNG_INPUT_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_INPUT_2__TRNG_INPUT_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_TRNG_INPUT_2__TRNG_INPUT_MASK  0xffffffff
#define MICA_CRYPTO_ENG_TRNG_INPUT_2__TRNG_INPUT_FIELD 0,31


/*
 * TRNG Input 3.
 * TRNG Input
 */
#define MICA_CRYPTO_ENG_TRNG_INPUT_3 0x8018

#define MICA_CRYPTO_ENG_TRNG_INPUT_3__TRNG_INPUT_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_INPUT_3__TRNG_INPUT_WIDTH 32
#define MICA_CRYPTO_ENG_TRNG_INPUT_3__TRNG_INPUT_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_INPUT_3__TRNG_INPUT_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_TRNG_INPUT_3__TRNG_INPUT_MASK  0xffffffff
#define MICA_CRYPTO_ENG_TRNG_INPUT_3__TRNG_INPUT_FIELD 0,31


/*
 * TRNG Interrupt Acknowledge.
 * This register is written to acknowledge interrupts indicated in bits [6:0]
 * of the TRNG_STATUS register. Writing a 1 to any of the bits [6:2] here has
 * side effects in resetting various parts of the TRNG -- this can also be
 * used even if no interrupts are actually active.
 */
#define MICA_CRYPTO_ENG_TRNG_INTACK 0x8020

#define MICA_CRYPTO_ENG_TRNG_INTACK__READY_ACK_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_INTACK__READY_ACK_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_INTACK__READY_ACK_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_INTACK__READY_ACK_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_INTACK__READY_ACK_MASK  0x1
#define MICA_CRYPTO_ENG_TRNG_INTACK__READY_ACK_FIELD 0,0

#define MICA_CRYPTO_ENG_TRNG_INTACK__SHUTDOWN_OFLO_ACK_SHIFT 1
#define MICA_CRYPTO_ENG_TRNG_INTACK__SHUTDOWN_OFLO_ACK_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_INTACK__SHUTDOWN_OFLO_ACK_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_INTACK__SHUTDOWN_OFLO_ACK_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_INTACK__SHUTDOWN_OFLO_ACK_MASK  0x2
#define MICA_CRYPTO_ENG_TRNG_INTACK__SHUTDOWN_OFLO_ACK_FIELD 1,1

#define MICA_CRYPTO_ENG_TRNG_INTACK__STUCK_OUT_ACK_SHIFT 2
#define MICA_CRYPTO_ENG_TRNG_INTACK__STUCK_OUT_ACK_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_INTACK__STUCK_OUT_ACK_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_INTACK__STUCK_OUT_ACK_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_INTACK__STUCK_OUT_ACK_MASK  0x4
#define MICA_CRYPTO_ENG_TRNG_INTACK__STUCK_OUT_ACK_FIELD 2,2

#define MICA_CRYPTO_ENG_TRNG_INTACK__NOISE_FAIL_ACK_SHIFT 3
#define MICA_CRYPTO_ENG_TRNG_INTACK__NOISE_FAIL_ACK_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_INTACK__NOISE_FAIL_ACK_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_INTACK__NOISE_FAIL_ACK_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_INTACK__NOISE_FAIL_ACK_MASK  0x8
#define MICA_CRYPTO_ENG_TRNG_INTACK__NOISE_FAIL_ACK_FIELD 3,3

#define MICA_CRYPTO_ENG_TRNG_INTACK__RUN_FAIL_ACK_SHIFT 4
#define MICA_CRYPTO_ENG_TRNG_INTACK__RUN_FAIL_ACK_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_INTACK__RUN_FAIL_ACK_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_INTACK__RUN_FAIL_ACK_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_INTACK__RUN_FAIL_ACK_MASK  0x10
#define MICA_CRYPTO_ENG_TRNG_INTACK__RUN_FAIL_ACK_FIELD 4,4

#define MICA_CRYPTO_ENG_TRNG_INTACK__LONG_RUN_FAIL_ACK_SHIFT 5
#define MICA_CRYPTO_ENG_TRNG_INTACK__LONG_RUN_FAIL_ACK_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_INTACK__LONG_RUN_FAIL_ACK_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_INTACK__LONG_RUN_FAIL_ACK_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_INTACK__LONG_RUN_FAIL_ACK_MASK  0x20
#define MICA_CRYPTO_ENG_TRNG_INTACK__LONG_RUN_FAIL_ACK_FIELD 5,5

#define MICA_CRYPTO_ENG_TRNG_INTACK__POKER_FAIL_ACK_SHIFT 6
#define MICA_CRYPTO_ENG_TRNG_INTACK__POKER_FAIL_ACK_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_INTACK__POKER_FAIL_ACK_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_INTACK__POKER_FAIL_ACK_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_INTACK__POKER_FAIL_ACK_MASK  0x40
#define MICA_CRYPTO_ENG_TRNG_INTACK__POKER_FAIL_ACK_FIELD 6,6


/*
 * TRNG Post-Process Key.
 * These registers are used to load the key used for post-processing. Key
 * registers are all write-only  reading them accesses TRNG_RUN_... registers
 * mapped at these same addresses.
 */
#define MICA_CRYPTO_ENG_TRNG_KEY_0 0x8080

#define MICA_CRYPTO_ENG_TRNG_KEY_0__KEY_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_KEY_0__KEY_WIDTH 32
#define MICA_CRYPTO_ENG_TRNG_KEY_0__KEY_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_KEY_0__KEY_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_TRNG_KEY_0__KEY_MASK  0xffffffff
#define MICA_CRYPTO_ENG_TRNG_KEY_0__KEY_FIELD 0,31


/*
 * TRNG Post-Process Key.
 * These registers are used to load the key used for post-processing. Key
 * registers are all write-only  reading them accesses TRNG_RUN_... registers
 * mapped at these same addresses.
 */
#define MICA_CRYPTO_ENG_TRNG_KEY_1 0x8088

#define MICA_CRYPTO_ENG_TRNG_KEY_1__KEY_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_KEY_1__KEY_WIDTH 32
#define MICA_CRYPTO_ENG_TRNG_KEY_1__KEY_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_KEY_1__KEY_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_TRNG_KEY_1__KEY_MASK  0xffffffff
#define MICA_CRYPTO_ENG_TRNG_KEY_1__KEY_FIELD 0,31


/*
 * TRNG Post-Process Key.
 * These registers are used to load the key used for post-processing. Key
 * registers are all write-only  reading them accesses TRNG_RUN_... registers
 * mapped at these same addresses.
 */
#define MICA_CRYPTO_ENG_TRNG_KEY_2 0x8090

#define MICA_CRYPTO_ENG_TRNG_KEY_2__KEY_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_KEY_2__KEY_WIDTH 32
#define MICA_CRYPTO_ENG_TRNG_KEY_2__KEY_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_KEY_2__KEY_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_TRNG_KEY_2__KEY_MASK  0xffffffff
#define MICA_CRYPTO_ENG_TRNG_KEY_2__KEY_FIELD 0,31


/*
 * TRNG Post-Process Key.
 * KEY
 */
#define MICA_CRYPTO_ENG_TRNG_KEY_3 0x8098

#define MICA_CRYPTO_ENG_TRNG_KEY_3__KEY_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_KEY_3__KEY_WIDTH 32
#define MICA_CRYPTO_ENG_TRNG_KEY_3__KEY_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_KEY_3__KEY_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_TRNG_KEY_3__KEY_MASK  0xffffffff
#define MICA_CRYPTO_ENG_TRNG_KEY_3__KEY_FIELD 0,31


/*
 * TRNG Post-Process Key.
 * These registers are used to load the key used for post-processing. Key
 * registers are all write-only  reading them accesses TRNG_RUN_... registers
 * mapped at these same addresses.
 */
#define MICA_CRYPTO_ENG_TRNG_KEY_4 0x80a0

#define MICA_CRYPTO_ENG_TRNG_KEY_4__KEY_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_KEY_4__KEY_WIDTH 32
#define MICA_CRYPTO_ENG_TRNG_KEY_4__KEY_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_KEY_4__KEY_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_TRNG_KEY_4__KEY_MASK  0xffffffff
#define MICA_CRYPTO_ENG_TRNG_KEY_4__KEY_FIELD 0,31


/*
 * TRNG Post-Process Key.
 * These registers are used to load the key used for post-processing. Key
 * registers are all write-only  reading them accesses TRNG_RUN_... registers
 * mapped at these same addresses.
 */
#define MICA_CRYPTO_ENG_TRNG_KEY_5 0x80a8

#define MICA_CRYPTO_ENG_TRNG_KEY_5__KEY_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_KEY_5__KEY_WIDTH 32
#define MICA_CRYPTO_ENG_TRNG_KEY_5__KEY_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_KEY_5__KEY_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_TRNG_KEY_5__KEY_MASK  0xffffffff
#define MICA_CRYPTO_ENG_TRNG_KEY_5__KEY_FIELD 0,31


/*
 * TRNG Post-Process Key.
 * These registers are used to load the key used for post-processing. Key
 * registers are all write-only  reading them accesses TRNG_RUN_... registers
 * mapped at these same addresses.
 */
#define MICA_CRYPTO_ENG_TRNG_KEY_6 0x80b0

#define MICA_CRYPTO_ENG_TRNG_KEY_6__KEY_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_KEY_6__KEY_WIDTH 32
#define MICA_CRYPTO_ENG_TRNG_KEY_6__KEY_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_KEY_6__KEY_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_TRNG_KEY_6__KEY_MASK  0xffffffff
#define MICA_CRYPTO_ENG_TRNG_KEY_6__KEY_FIELD 0,31


/*
 * TRNG Post-Process Key.
 * These registers are used to load the key used for post-processing. Key
 * registers are all write-only  reading them accesses TRNG_RUN_... registers
 * mapped at these same addresses.
 */
#define MICA_CRYPTO_ENG_TRNG_KEY_7 0x80b8

#define MICA_CRYPTO_ENG_TRNG_KEY_7__KEY_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_KEY_7__KEY_WIDTH 32
#define MICA_CRYPTO_ENG_TRNG_KEY_7__KEY_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_KEY_7__KEY_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_TRNG_KEY_7__KEY_MASK  0xffffffff
#define MICA_CRYPTO_ENG_TRNG_KEY_7__KEY_FIELD 0,31


/*
 * TRNG LFSR Access.
 * These registers are used to access the main entropy accumulation LFSR
 * while the test_mode bit in TRNG_CONTROL is set to 1. For security reasons,
 * the LFSR contents are zeroed before enabling access.
 */
#define MICA_CRYPTO_ENG_TRNG_LFSR_H 0x8070

#define MICA_CRYPTO_ENG_TRNG_LFSR_H__LFSR_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_LFSR_H__LFSR_WIDTH 17
#define MICA_CRYPTO_ENG_TRNG_LFSR_H__LFSR_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_LFSR_H__LFSR_RMASK 0x1ffff
#define MICA_CRYPTO_ENG_TRNG_LFSR_H__LFSR_MASK  0x1ffff
#define MICA_CRYPTO_ENG_TRNG_LFSR_H__LFSR_FIELD 0,16


/*
 * TRNG LFSR Access.
 * These registers are used to access the main entropy accumulation LFSR
 * while the test_mode bit in TRNG_CONTROL is set to 1. For security reasons,
 * the LFSR contents are zeroed before enabling access.
 */
#define MICA_CRYPTO_ENG_TRNG_LFSR_L 0x8060

#define MICA_CRYPTO_ENG_TRNG_LFSR_L__LFSR_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_LFSR_L__LFSR_WIDTH 32
#define MICA_CRYPTO_ENG_TRNG_LFSR_L__LFSR_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_LFSR_L__LFSR_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_TRNG_LFSR_L__LFSR_MASK  0xffffffff
#define MICA_CRYPTO_ENG_TRNG_LFSR_L__LFSR_FIELD 0,31


/*
 * TRNG LFSR Access.
 * These registers are used to access the main entropy accumulation LFSR
 * while the test_mode bit in TRNG_CONTROL is set to 1. For security reasons,
 * the LFSR contents are zeroed before enabling access.
 */
#define MICA_CRYPTO_ENG_TRNG_LFSR_M 0x8068

#define MICA_CRYPTO_ENG_TRNG_LFSR_M__LFSR_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_LFSR_M__LFSR_WIDTH 32
#define MICA_CRYPTO_ENG_TRNG_LFSR_M__LFSR_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_LFSR_M__LFSR_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_TRNG_LFSR_M__LFSR_MASK  0xffffffff
#define MICA_CRYPTO_ENG_TRNG_LFSR_M__LFSR_FIELD 0,31


/*
 * TRNG HW Options.
 * This register provides the Host with a means to determine the hardware
 * configuration implemented in this TRNG Engine. It is focused on options
 * that have an effect on software interacting with the module.
 */
#define MICA_CRYPTO_ENG_TRNG_OPTIONS 0x80f0

#define MICA_CRYPTO_ENG_TRNG_OPTIONS__POST_PROCESSOR_OPTION_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_OPTIONS__POST_PROCESSOR_OPTION_WIDTH 3
#define MICA_CRYPTO_ENG_TRNG_OPTIONS__POST_PROCESSOR_OPTION_RESET_VAL 5
#define MICA_CRYPTO_ENG_TRNG_OPTIONS__POST_PROCESSOR_OPTION_RMASK 0x7
#define MICA_CRYPTO_ENG_TRNG_OPTIONS__POST_PROCESSOR_OPTION_MASK  0x7
#define MICA_CRYPTO_ENG_TRNG_OPTIONS__POST_PROCESSOR_OPTION_FIELD 0,2

#define MICA_CRYPTO_ENG_TRNG_OPTIONS__NR_OF_FROS_SHIFT 6
#define MICA_CRYPTO_ENG_TRNG_OPTIONS__NR_OF_FROS_WIDTH 6
#define MICA_CRYPTO_ENG_TRNG_OPTIONS__NR_OF_FROS_RESET_VAL 24
#define MICA_CRYPTO_ENG_TRNG_OPTIONS__NR_OF_FROS_RMASK 0x3f
#define MICA_CRYPTO_ENG_TRNG_OPTIONS__NR_OF_FROS_MASK  0xfc0
#define MICA_CRYPTO_ENG_TRNG_OPTIONS__NR_OF_FROS_FIELD 6,11

#define MICA_CRYPTO_ENG_TRNG_OPTIONS__BUFFER_SIZE_SHIFT 12
#define MICA_CRYPTO_ENG_TRNG_OPTIONS__BUFFER_SIZE_WIDTH 3
#define MICA_CRYPTO_ENG_TRNG_OPTIONS__BUFFER_SIZE_RESET_VAL 7
#define MICA_CRYPTO_ENG_TRNG_OPTIONS__BUFFER_SIZE_RMASK 0x7
#define MICA_CRYPTO_ENG_TRNG_OPTIONS__BUFFER_SIZE_MASK  0x7000
#define MICA_CRYPTO_ENG_TRNG_OPTIONS__BUFFER_SIZE_FIELD 12,14

#define MICA_CRYPTO_ENG_TRNG_OPTIONS__PR_TEST_SHIFT 16
#define MICA_CRYPTO_ENG_TRNG_OPTIONS__PR_TEST_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_OPTIONS__PR_TEST_RESET_VAL 1
#define MICA_CRYPTO_ENG_TRNG_OPTIONS__PR_TEST_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_OPTIONS__PR_TEST_MASK  0x10000
#define MICA_CRYPTO_ENG_TRNG_OPTIONS__PR_TEST_FIELD 16,16


/*
 * TRNG Output 0.
 * TRNG Output
 */
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_0 0x8000

#define MICA_CRYPTO_ENG_TRNG_OUTPUT_0__TRNG_OUTPUT_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_0__TRNG_OUTPUT_WIDTH 32
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_0__TRNG_OUTPUT_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_0__TRNG_OUTPUT_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_0__TRNG_OUTPUT_MASK  0xffffffff
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_0__TRNG_OUTPUT_FIELD 0,31


/*
 * TRNG Output 1.
 * TRNG Output
 */
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_1 0x8008

#define MICA_CRYPTO_ENG_TRNG_OUTPUT_1__TRNG_OUTPUT_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_1__TRNG_OUTPUT_WIDTH 32
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_1__TRNG_OUTPUT_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_1__TRNG_OUTPUT_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_1__TRNG_OUTPUT_MASK  0xffffffff
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_1__TRNG_OUTPUT_FIELD 0,31


/*
 * TRNG Output 2.
 * TRNG Output
 */
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_2 0x8010

#define MICA_CRYPTO_ENG_TRNG_OUTPUT_2__TRNG_OUTPUT_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_2__TRNG_OUTPUT_WIDTH 32
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_2__TRNG_OUTPUT_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_2__TRNG_OUTPUT_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_2__TRNG_OUTPUT_MASK  0xffffffff
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_2__TRNG_OUTPUT_FIELD 0,31


/*
 * TRNG Output 3.
 * TRNG Output
 */
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_3 0x8018

#define MICA_CRYPTO_ENG_TRNG_OUTPUT_3__TRNG_OUTPUT_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_3__TRNG_OUTPUT_WIDTH 32
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_3__TRNG_OUTPUT_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_3__TRNG_OUTPUT_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_3__TRNG_OUTPUT_MASK  0xffffffff
#define MICA_CRYPTO_ENG_TRNG_OUTPUT_3__TRNG_OUTPUT_FIELD 0,31


/*
 * TRNG Poker Test Result.
 * These registers are used to access the 16 counters used perform a poker
 * test on blocks of 20000 bits (in parallel to the run test). Each of these
 * 16 counters counts the occurrences of one specific 4-bit value in the data
 * stream fed into the main LFSR, with all the counters decremented by one
 * every 64 data bits and reset to their start value every 20000 bits. All
 * counters start at value 1 and are decremented 312 times during the 20000
 * bit test run.
 * Each 8 bits counter holds a 2s complement value and will not overflow past
 * the range 128  +127. At the end of the 20000 bits block the values of the
 * counters with a single 1 bit appended at the least significant bit side
 * are individually squared and then added together  the poker test fails
 * (with a poker_fail interrupt) when the resulting sum is outside the range
 * 1288  71749 or one of the counters tries to increment or decrement outside
 * its limit range.
 * Note
 * s:
 *  The poker test fails when the 4 bits values of the data stream are
 * distributed too evenly (with 8 counters having incremented 312 times and
 * the others incremented 313 times), this is fully intentional. The minimum
 * mean deviation from the expected value of 312.5 is 4.5.
 *  Failure at counter overflow is not an official part of the poker test as
 * specified in the AIS-31 standard (ref [11]). It can be shown that the
 * maximum deviation for one counters value from the mean value of 312.5
 * (without the poker test failing) is 129.5  as this deviation is more than
 * 40% of the mean value it is clearly an indication that something is wrong.
 * When the cont_poker bit in the TRNG_TEST register is set to 1, the test is
 * not stopped after 20000 bits  the counters keep incrementing and
 * decrementing (the latter every 64 bits) and a poker_fail interrupt is
 * generated when one of the counters tries to increment or decrement outside
 * its limit range.
 * Poker test result registers are all read-only  writing them accesses
 * TRNG_V_... registers mapped at these same addresses. All counters in these
 * registers are reset when writing a 1 to either the run_fail_ack or the
 * poker_fail_ack bits in the TRNG_INTACK register.
 */
#define MICA_CRYPTO_ENG_TRNG_POKER_3_0 0x80c0

#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_0_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_0_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_0_RESET_VAL 255
#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_0_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_0_MASK  0xff
#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_0_FIELD 0,7

#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_1_SHIFT 8
#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_1_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_1_RESET_VAL 255
#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_1_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_1_MASK  0xff00
#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_1_FIELD 8,15

#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_2_SHIFT 16
#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_2_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_2_RESET_VAL 255
#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_2_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_2_MASK  0xff0000
#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_2_FIELD 16,23

#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_3_SHIFT 24
#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_3_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_3_RESET_VAL 255
#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_3_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_3_MASK  0xff000000
#define MICA_CRYPTO_ENG_TRNG_POKER_3_0__POKER_COUNT_3_FIELD 24,31


/*
 * TRNG Poker Test Result.
 * See description of TRNG_POKER_3_0
 */
#define MICA_CRYPTO_ENG_TRNG_POKER_7_4 0x80c8

#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_4_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_4_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_4_RESET_VAL 255
#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_4_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_4_MASK  0xff
#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_4_FIELD 0,7

#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_5_SHIFT 8
#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_5_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_5_RESET_VAL 255
#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_5_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_5_MASK  0xff00
#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_5_FIELD 8,15

#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_6_SHIFT 16
#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_6_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_6_RESET_VAL 255
#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_6_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_6_MASK  0xff0000
#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_6_FIELD 16,23

#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_7_SHIFT 24
#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_7_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_7_RESET_VAL 255
#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_7_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_7_MASK  0xff000000
#define MICA_CRYPTO_ENG_TRNG_POKER_7_4__POKER_COUNT_7_FIELD 24,31


/*
 * TRNG Poker Test Result.
 * See description of TRNG_POKER_3_0
 */
#define MICA_CRYPTO_ENG_TRNG_POKER_B_8 0x80d0

#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_8_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_8_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_8_RESET_VAL 255
#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_8_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_8_MASK  0xff
#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_8_FIELD 0,7

#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_9_SHIFT 8
#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_9_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_9_RESET_VAL 255
#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_9_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_9_MASK  0xff00
#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_9_FIELD 8,15

#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_A_SHIFT 16
#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_A_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_A_RESET_VAL 255
#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_A_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_A_MASK  0xff0000
#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_A_FIELD 16,23

#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_B_SHIFT 24
#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_B_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_B_RESET_VAL 255
#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_B_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_B_MASK  0xff000000
#define MICA_CRYPTO_ENG_TRNG_POKER_B_8__POKER_COUNT_B_FIELD 24,31


/*
 * TRNG Poker Test Result.
 * See description of TRNG_POKER_3_0
 */
#define MICA_CRYPTO_ENG_TRNG_POKER_F_C 0x80d8

#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_C_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_C_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_C_RESET_VAL 255
#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_C_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_C_MASK  0xff
#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_C_FIELD 0,7

#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_D_SHIFT 8
#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_D_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_D_RESET_VAL 255
#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_D_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_D_MASK  0xff00
#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_D_FIELD 8,15

#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_E_SHIFT 16
#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_E_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_E_RESET_VAL 255
#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_E_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_E_MASK  0xff0000
#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_E_FIELD 16,23

#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_F_SHIFT 24
#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_F_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_F_RESET_VAL 255
#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_F_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_F_MASK  0xff000000
#define MICA_CRYPTO_ENG_TRNG_POKER_F_C__POKER_COUNT_F_FIELD 24,31


/* TRNG Run Test Result. */
#define MICA_CRYPTO_ENG_TRNG_RUN_1 0x8088

#define MICA_CRYPTO_ENG_TRNG_RUN_1__RUN_1_COUNT_ZEROES_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_RUN_1__RUN_1_COUNT_ZEROES_WIDTH 12
#define MICA_CRYPTO_ENG_TRNG_RUN_1__RUN_1_COUNT_ZEROES_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_RUN_1__RUN_1_COUNT_ZEROES_RMASK 0xfff
#define MICA_CRYPTO_ENG_TRNG_RUN_1__RUN_1_COUNT_ZEROES_MASK  0xfff
#define MICA_CRYPTO_ENG_TRNG_RUN_1__RUN_1_COUNT_ZEROES_FIELD 0,11

#define MICA_CRYPTO_ENG_TRNG_RUN_1__RUN_1_COUNT_ONES_SHIFT 16
#define MICA_CRYPTO_ENG_TRNG_RUN_1__RUN_1_COUNT_ONES_WIDTH 12
#define MICA_CRYPTO_ENG_TRNG_RUN_1__RUN_1_COUNT_ONES_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_RUN_1__RUN_1_COUNT_ONES_RMASK 0xfff
#define MICA_CRYPTO_ENG_TRNG_RUN_1__RUN_1_COUNT_ONES_MASK  0xfff0000
#define MICA_CRYPTO_ENG_TRNG_RUN_1__RUN_1_COUNT_ONES_FIELD 16,27


/* TRNG Run Test Result. */
#define MICA_CRYPTO_ENG_TRNG_RUN_2 0x8090

#define MICA_CRYPTO_ENG_TRNG_RUN_2__RUN_2_COUNT_ZEROES_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_RUN_2__RUN_2_COUNT_ZEROES_WIDTH 11
#define MICA_CRYPTO_ENG_TRNG_RUN_2__RUN_2_COUNT_ZEROES_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_RUN_2__RUN_2_COUNT_ZEROES_RMASK 0x7ff
#define MICA_CRYPTO_ENG_TRNG_RUN_2__RUN_2_COUNT_ZEROES_MASK  0x7ff
#define MICA_CRYPTO_ENG_TRNG_RUN_2__RUN_2_COUNT_ZEROES_FIELD 0,10

#define MICA_CRYPTO_ENG_TRNG_RUN_2__RUN_2_COUNT_ONES_SHIFT 16
#define MICA_CRYPTO_ENG_TRNG_RUN_2__RUN_2_COUNT_ONES_WIDTH 11
#define MICA_CRYPTO_ENG_TRNG_RUN_2__RUN_2_COUNT_ONES_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_RUN_2__RUN_2_COUNT_ONES_RMASK 0x7ff
#define MICA_CRYPTO_ENG_TRNG_RUN_2__RUN_2_COUNT_ONES_MASK  0x7ff0000
#define MICA_CRYPTO_ENG_TRNG_RUN_2__RUN_2_COUNT_ONES_FIELD 16,26


/* TRNG Run Test Result. */
#define MICA_CRYPTO_ENG_TRNG_RUN_3 0x8098

#define MICA_CRYPTO_ENG_TRNG_RUN_3__RUN_3_COUNT_ZEROES_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_RUN_3__RUN_3_COUNT_ZEROES_WIDTH 10
#define MICA_CRYPTO_ENG_TRNG_RUN_3__RUN_3_COUNT_ZEROES_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_RUN_3__RUN_3_COUNT_ZEROES_RMASK 0x3ff
#define MICA_CRYPTO_ENG_TRNG_RUN_3__RUN_3_COUNT_ZEROES_MASK  0x3ff
#define MICA_CRYPTO_ENG_TRNG_RUN_3__RUN_3_COUNT_ZEROES_FIELD 0,9

#define MICA_CRYPTO_ENG_TRNG_RUN_3__RUN_3_COUNT_ONES_SHIFT 16
#define MICA_CRYPTO_ENG_TRNG_RUN_3__RUN_3_COUNT_ONES_WIDTH 10
#define MICA_CRYPTO_ENG_TRNG_RUN_3__RUN_3_COUNT_ONES_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_RUN_3__RUN_3_COUNT_ONES_RMASK 0x3ff
#define MICA_CRYPTO_ENG_TRNG_RUN_3__RUN_3_COUNT_ONES_MASK  0x3ff0000
#define MICA_CRYPTO_ENG_TRNG_RUN_3__RUN_3_COUNT_ONES_FIELD 16,25


/* TRNG Run Test Result. */
#define MICA_CRYPTO_ENG_TRNG_RUN_4 0x80a0

#define MICA_CRYPTO_ENG_TRNG_RUN_4__RUN_4_COUNT_ZEROES_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_RUN_4__RUN_4_COUNT_ZEROES_WIDTH 9
#define MICA_CRYPTO_ENG_TRNG_RUN_4__RUN_4_COUNT_ZEROES_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_RUN_4__RUN_4_COUNT_ZEROES_RMASK 0x1ff
#define MICA_CRYPTO_ENG_TRNG_RUN_4__RUN_4_COUNT_ZEROES_MASK  0x1ff
#define MICA_CRYPTO_ENG_TRNG_RUN_4__RUN_4_COUNT_ZEROES_FIELD 0,8

#define MICA_CRYPTO_ENG_TRNG_RUN_4__RUN_4_COUNT_ONES_SHIFT 16
#define MICA_CRYPTO_ENG_TRNG_RUN_4__RUN_4_COUNT_ONES_WIDTH 9
#define MICA_CRYPTO_ENG_TRNG_RUN_4__RUN_4_COUNT_ONES_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_RUN_4__RUN_4_COUNT_ONES_RMASK 0x1ff
#define MICA_CRYPTO_ENG_TRNG_RUN_4__RUN_4_COUNT_ONES_MASK  0x1ff0000
#define MICA_CRYPTO_ENG_TRNG_RUN_4__RUN_4_COUNT_ONES_FIELD 16,24


/* TRNG Run Test Result. */
#define MICA_CRYPTO_ENG_TRNG_RUN_5 0x80a8

#define MICA_CRYPTO_ENG_TRNG_RUN_5__RUN_5_COUNT_ZEROES_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_RUN_5__RUN_5_COUNT_ZEROES_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_RUN_5__RUN_5_COUNT_ZEROES_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_RUN_5__RUN_5_COUNT_ZEROES_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_RUN_5__RUN_5_COUNT_ZEROES_MASK  0xff
#define MICA_CRYPTO_ENG_TRNG_RUN_5__RUN_5_COUNT_ZEROES_FIELD 0,7

#define MICA_CRYPTO_ENG_TRNG_RUN_5__RUN_5_COUNT_ONES_SHIFT 16
#define MICA_CRYPTO_ENG_TRNG_RUN_5__RUN_5_COUNT_ONES_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_RUN_5__RUN_5_COUNT_ONES_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_RUN_5__RUN_5_COUNT_ONES_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_RUN_5__RUN_5_COUNT_ONES_MASK  0xff0000
#define MICA_CRYPTO_ENG_TRNG_RUN_5__RUN_5_COUNT_ONES_FIELD 16,23


/* TRNG Run Test Result. */
#define MICA_CRYPTO_ENG_TRNG_RUN_6_UP 0x80b0

#define MICA_CRYPTO_ENG_TRNG_RUN_6_UP__RUN_6_UP_COUNT_ZEROES_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_RUN_6_UP__RUN_6_UP_COUNT_ZEROES_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_RUN_6_UP__RUN_6_UP_COUNT_ZEROES_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_RUN_6_UP__RUN_6_UP_COUNT_ZEROES_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_RUN_6_UP__RUN_6_UP_COUNT_ZEROES_MASK  0xff
#define MICA_CRYPTO_ENG_TRNG_RUN_6_UP__RUN_6_UP_COUNT_ZEROES_FIELD 0,7

#define MICA_CRYPTO_ENG_TRNG_RUN_6_UP__RUN_6_UP_COUNT_ONES_SHIFT 16
#define MICA_CRYPTO_ENG_TRNG_RUN_6_UP__RUN_6_UP_COUNT_ONES_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_RUN_6_UP__RUN_6_UP_COUNT_ONES_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_RUN_6_UP__RUN_6_UP_COUNT_ONES_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_RUN_6_UP__RUN_6_UP_COUNT_ONES_MASK  0xff0000
#define MICA_CRYPTO_ENG_TRNG_RUN_6_UP__RUN_6_UP_COUNT_ONES_FIELD 16,23


/*
 * TRNG Run Test State.
 * These registers are used to access the 10 counters used to perform a run
 * test and long run test as specified by the AIS-31 standard (tests T3 and
 * T4, ref [11]). They are also used to perform the noise source failure test
 * proposed in section E.5 of that same standard.
 * The number of consecutive zeroes and ones (runs) in the data stream
 * shifted into the main LFSR is counted. The run length and bit value is
 * then used to increment a specific bucket counter for these values. After
 * 20000 bits, the bucket counters should be within specified limits for this
 * test to pass. If not, a run_fail interrupt is generated.
 * The long run test fails immediately when a run longer than 33 bits is
 * found, which generates a long_run_fail interrupt. A noise source failure
 * is declared when a run of 48 or more identical bits is found, which
 * generates a noise_fail interrupt.
 * Run test state and result registers are all read-only  writing them
 * accesses TRNG_KEY_... registers mapped at these same addresses. Unless
 * otherwise indicated, all counters and state bits in these registers are
 * reset when writing a 1 to either the run_fail_ack or the poker_fail_ack
 * bits in the TRNG_INTACK register.
 */
#define MICA_CRYPTO_ENG_TRNG_RUN_CNT 0x8080

#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_TEST_COUNT_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_TEST_COUNT_WIDTH 15
#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_TEST_COUNT_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_TEST_COUNT_RMASK 0x7fff
#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_TEST_COUNT_MASK  0x7fff
#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_TEST_COUNT_FIELD 0,14

#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_STATE_SHIFT 15
#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_STATE_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_STATE_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_STATE_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_STATE_MASK  0x8000
#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_STATE_FIELD 15,15

#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_LENGTH_COUNT_SHIFT 16
#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_LENGTH_COUNT_WIDTH 6
#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_LENGTH_COUNT_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_LENGTH_COUNT_RMASK 0x3f
#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_LENGTH_COUNT_MASK  0x3f0000
#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_LENGTH_COUNT_FIELD 16,21

#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_LENGTH_MAX_SHIFT 24
#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_LENGTH_MAX_WIDTH 6
#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_LENGTH_MAX_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_LENGTH_MAX_RMASK 0x3f
#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_LENGTH_MAX_MASK  0x3f000000
#define MICA_CRYPTO_ENG_TRNG_RUN_CNT__RUN_LENGTH_MAX_FIELD 24,29


/* TRNG Status. */
#define MICA_CRYPTO_ENG_TRNG_STATUS 0x8020

#define MICA_CRYPTO_ENG_TRNG_STATUS__READY_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_STATUS__READY_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_STATUS__READY_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_STATUS__READY_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_STATUS__READY_MASK  0x1
#define MICA_CRYPTO_ENG_TRNG_STATUS__READY_FIELD 0,0

#define MICA_CRYPTO_ENG_TRNG_STATUS__SHUTDOWN_OFLO_SHIFT 1
#define MICA_CRYPTO_ENG_TRNG_STATUS__SHUTDOWN_OFLO_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_STATUS__SHUTDOWN_OFLO_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_STATUS__SHUTDOWN_OFLO_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_STATUS__SHUTDOWN_OFLO_MASK  0x2
#define MICA_CRYPTO_ENG_TRNG_STATUS__SHUTDOWN_OFLO_FIELD 1,1

#define MICA_CRYPTO_ENG_TRNG_STATUS__STUCK_OUT_SHIFT 2
#define MICA_CRYPTO_ENG_TRNG_STATUS__STUCK_OUT_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_STATUS__STUCK_OUT_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_STATUS__STUCK_OUT_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_STATUS__STUCK_OUT_MASK  0x4
#define MICA_CRYPTO_ENG_TRNG_STATUS__STUCK_OUT_FIELD 2,2

#define MICA_CRYPTO_ENG_TRNG_STATUS__NOISE_FAIL_SHIFT 3
#define MICA_CRYPTO_ENG_TRNG_STATUS__NOISE_FAIL_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_STATUS__NOISE_FAIL_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_STATUS__NOISE_FAIL_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_STATUS__NOISE_FAIL_MASK  0x8
#define MICA_CRYPTO_ENG_TRNG_STATUS__NOISE_FAIL_FIELD 3,3

#define MICA_CRYPTO_ENG_TRNG_STATUS__RUN_FAIL_SHIFT 4
#define MICA_CRYPTO_ENG_TRNG_STATUS__RUN_FAIL_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_STATUS__RUN_FAIL_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_STATUS__RUN_FAIL_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_STATUS__RUN_FAIL_MASK  0x10
#define MICA_CRYPTO_ENG_TRNG_STATUS__RUN_FAIL_FIELD 4,4

#define MICA_CRYPTO_ENG_TRNG_STATUS__LONG_RUN_FAIL_SHIFT 5
#define MICA_CRYPTO_ENG_TRNG_STATUS__LONG_RUN_FAIL_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_STATUS__LONG_RUN_FAIL_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_STATUS__LONG_RUN_FAIL_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_STATUS__LONG_RUN_FAIL_MASK  0x20
#define MICA_CRYPTO_ENG_TRNG_STATUS__LONG_RUN_FAIL_FIELD 5,5

#define MICA_CRYPTO_ENG_TRNG_STATUS__POKER_FAIL_SHIFT 6
#define MICA_CRYPTO_ENG_TRNG_STATUS__POKER_FAIL_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_STATUS__POKER_FAIL_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_STATUS__POKER_FAIL_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_STATUS__POKER_FAIL_MASK  0x40
#define MICA_CRYPTO_ENG_TRNG_STATUS__POKER_FAIL_FIELD 6,6

#define MICA_CRYPTO_ENG_TRNG_STATUS__TEST_READY_SHIFT 8
#define MICA_CRYPTO_ENG_TRNG_STATUS__TEST_READY_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_STATUS__TEST_READY_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_STATUS__TEST_READY_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_STATUS__TEST_READY_MASK  0x100
#define MICA_CRYPTO_ENG_TRNG_STATUS__TEST_READY_FIELD 8,8

#define MICA_CRYPTO_ENG_TRNG_STATUS__BLOCKS_AVAILABLE_SHIFT 16
#define MICA_CRYPTO_ENG_TRNG_STATUS__BLOCKS_AVAILABLE_WIDTH 8
#define MICA_CRYPTO_ENG_TRNG_STATUS__BLOCKS_AVAILABLE_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_STATUS__BLOCKS_AVAILABLE_RMASK 0xff
#define MICA_CRYPTO_ENG_TRNG_STATUS__BLOCKS_AVAILABLE_MASK  0xff0000
#define MICA_CRYPTO_ENG_TRNG_STATUS__BLOCKS_AVAILABLE_FIELD 16,23

#define MICA_CRYPTO_ENG_TRNG_STATUS__NEED_CLOCK_SHIFT 31
#define MICA_CRYPTO_ENG_TRNG_STATUS__NEED_CLOCK_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_STATUS__NEED_CLOCK_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_STATUS__NEED_CLOCK_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_STATUS__NEED_CLOCK_MASK  0x80000000
#define MICA_CRYPTO_ENG_TRNG_STATUS__NEED_CLOCK_FIELD 31,31


/*
 * TRNG Test.
 * This register can be used by the Host to perform a number of tests on the
 * TRNG logic:
 *  Register controlled characterization by connecting the tst_fro_clk_out
 * output to a selected FRO clock output.
 *  FRO logic connectivity and error event detection checking by feeding
 * known patterns through the FRO delay line and error event detection
 * circuits.
 *  Direct XOR-ed FRO outputs capture by disabling the main LFSR feedback
 * logic.
 *  Extend the poker test by not resetting the poker_test_X counters after
 * each 20000 bits block.
 *  Perform known answer tests on the run test, poker test and post-processor
 * functions.
 */
#define MICA_CRYPTO_ENG_TRNG_TEST 0x80e0

#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_EN_OUT_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_EN_OUT_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_EN_OUT_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_EN_OUT_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_EN_OUT_MASK  0x1
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_EN_OUT_FIELD 0,0

#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_PATT_FRO_SHIFT 1
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_PATT_FRO_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_PATT_FRO_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_PATT_FRO_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_PATT_FRO_MASK  0x2
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_PATT_FRO_FIELD 1,1

#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_PATT_DET_SHIFT 2
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_PATT_DET_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_PATT_DET_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_PATT_DET_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_PATT_DET_MASK  0x4
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_PATT_DET_FIELD 2,2

#define MICA_CRYPTO_ENG_TRNG_TEST__NO_LFSR_FB_SHIFT 3
#define MICA_CRYPTO_ENG_TRNG_TEST__NO_LFSR_FB_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_TEST__NO_LFSR_FB_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_TEST__NO_LFSR_FB_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_TEST__NO_LFSR_FB_MASK  0x8
#define MICA_CRYPTO_ENG_TRNG_TEST__NO_LFSR_FB_FIELD 3,3

#define MICA_CRYPTO_ENG_TRNG_TEST__CONT_POKER_SHIFT 4
#define MICA_CRYPTO_ENG_TRNG_TEST__CONT_POKER_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_TEST__CONT_POKER_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_TEST__CONT_POKER_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_TEST__CONT_POKER_MASK  0x10
#define MICA_CRYPTO_ENG_TRNG_TEST__CONT_POKER_FIELD 4,4

#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_RUN_POKER_SHIFT 5
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_RUN_POKER_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_RUN_POKER_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_RUN_POKER_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_RUN_POKER_MASK  0x20
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_RUN_POKER_FIELD 5,5

#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_POST_PROC_SHIFT 6
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_POST_PROC_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_POST_PROC_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_POST_PROC_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_POST_PROC_MASK  0x40
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_POST_PROC_FIELD 6,6

#define MICA_CRYPTO_ENG_TRNG_TEST__TERST_SELECT_SHIFT 8
#define MICA_CRYPTO_ENG_TRNG_TEST__TERST_SELECT_WIDTH 5
#define MICA_CRYPTO_ENG_TRNG_TEST__TERST_SELECT_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_TEST__TERST_SELECT_RMASK 0x1f
#define MICA_CRYPTO_ENG_TRNG_TEST__TERST_SELECT_MASK  0x1f00
#define MICA_CRYPTO_ENG_TRNG_TEST__TERST_SELECT_FIELD 8,12

#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_PATTERN_SHIFT 16
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_PATTERN_WIDTH 12
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_PATTERN_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_PATTERN_RMASK 0xfff
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_PATTERN_MASK  0xfff0000
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_PATTERN_FIELD 16,27

#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_IRQ_SHIFT 31
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_IRQ_WIDTH 1
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_IRQ_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_IRQ_RMASK 0x1
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_IRQ_MASK  0x80000000
#define MICA_CRYPTO_ENG_TRNG_TEST__TEST_IRQ_FIELD 31,31


/*
 * TRNG Post-Process V Value.
 * These registers are used to load the V value used for post-processing. V
 * value registers are all write-only  reading them accesses TRNG_POKER_...
 * registers mapped at these same addresses.
 */
#define MICA_CRYPTO_ENG_TRNG_V_0 0x80c0

#define MICA_CRYPTO_ENG_TRNG_V_0__V_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_V_0__V_WIDTH 32
#define MICA_CRYPTO_ENG_TRNG_V_0__V_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_V_0__V_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_TRNG_V_0__V_MASK  0xffffffff
#define MICA_CRYPTO_ENG_TRNG_V_0__V_FIELD 0,31


/*
 * TRNG Post-Process V Value.
 * These registers are used to load the V value used for post-processing. V
 * value registers are all write-only  reading them accesses TRNG_POKER_...
 * registers mapped at these same addresses.
 */
#define MICA_CRYPTO_ENG_TRNG_V_1 0x80c8

#define MICA_CRYPTO_ENG_TRNG_V_1__V_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_V_1__V_WIDTH 32
#define MICA_CRYPTO_ENG_TRNG_V_1__V_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_V_1__V_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_TRNG_V_1__V_MASK  0xffffffff
#define MICA_CRYPTO_ENG_TRNG_V_1__V_FIELD 0,31


/*
 * TRNG Post-Process V Value.
 * These registers are used to load the V value used for post-processing. V
 * value registers are all write-only  reading them accesses TRNG_POKER_...
 * registers mapped at these same addresses.
 */
#define MICA_CRYPTO_ENG_TRNG_V_2 0x80d0

#define MICA_CRYPTO_ENG_TRNG_V_2__V_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_V_2__V_WIDTH 32
#define MICA_CRYPTO_ENG_TRNG_V_2__V_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_V_2__V_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_TRNG_V_2__V_MASK  0xffffffff
#define MICA_CRYPTO_ENG_TRNG_V_2__V_FIELD 0,31


/*
 * TRNG Post-Process V Value.
 * These registers are used to load the V value used for post-processing. V
 * value registers are all write-only  reading them accesses TRNG_POKER_...
 * registers mapped at these same addresses.
 */
#define MICA_CRYPTO_ENG_TRNG_V_3 0x80d8

#define MICA_CRYPTO_ENG_TRNG_V_3__V_SHIFT 0
#define MICA_CRYPTO_ENG_TRNG_V_3__V_WIDTH 32
#define MICA_CRYPTO_ENG_TRNG_V_3__V_RESET_VAL 0
#define MICA_CRYPTO_ENG_TRNG_V_3__V_RMASK 0xffffffff
#define MICA_CRYPTO_ENG_TRNG_V_3__V_MASK  0xffffffff
#define MICA_CRYPTO_ENG_TRNG_V_3__V_FIELD 0,31


/*
 * Free Running Oscillator Test.
 * This register is used to control testing of the Free Running Oscillators
 * used by the TRNG.  The FRO_COUNT register is used to monitor the FRO being
 * tested.
 */
#define MICA_CRYPTO_ENG_TST_FRO 0x0050

#define MICA_CRYPTO_ENG_TST_FRO__CTRL_EN_SHIFT 0
#define MICA_CRYPTO_ENG_TST_FRO__CTRL_EN_WIDTH 1
#define MICA_CRYPTO_ENG_TST_FRO__CTRL_EN_RESET_VAL 0
#define MICA_CRYPTO_ENG_TST_FRO__CTRL_EN_RMASK 0x1
#define MICA_CRYPTO_ENG_TST_FRO__CTRL_EN_MASK  0x1
#define MICA_CRYPTO_ENG_TST_FRO__CTRL_EN_FIELD 0,0

#define MICA_CRYPTO_ENG_TST_FRO__SELECT_SHIFT 1
#define MICA_CRYPTO_ENG_TST_FRO__SELECT_WIDTH 5
#define MICA_CRYPTO_ENG_TST_FRO__SELECT_RESET_VAL 0
#define MICA_CRYPTO_ENG_TST_FRO__SELECT_RMASK 0x1f
#define MICA_CRYPTO_ENG_TST_FRO__SELECT_MASK  0x3e
#define MICA_CRYPTO_ENG_TST_FRO__SELECT_FIELD 1,5

#define MICA_CRYPTO_ENG_TST_FRO__ENABLE_SHIFT 6
#define MICA_CRYPTO_ENG_TST_FRO__ENABLE_WIDTH 1
#define MICA_CRYPTO_ENG_TST_FRO__ENABLE_RESET_VAL 0
#define MICA_CRYPTO_ENG_TST_FRO__ENABLE_RMASK 0x1
#define MICA_CRYPTO_ENG_TST_FRO__ENABLE_MASK  0x40
#define MICA_CRYPTO_ENG_TST_FRO__ENABLE_FIELD 6,6

#define MICA_CRYPTO_ENG_TST_FRO__DELAY_SHIFT 7
#define MICA_CRYPTO_ENG_TST_FRO__DELAY_WIDTH 1
#define MICA_CRYPTO_ENG_TST_FRO__DELAY_RESET_VAL 0
#define MICA_CRYPTO_ENG_TST_FRO__DELAY_RMASK 0x1
#define MICA_CRYPTO_ENG_TST_FRO__DELAY_MASK  0x80
#define MICA_CRYPTO_ENG_TST_FRO__DELAY_FIELD 7,7

#define MICA_CRYPTO_ENG_TST_FRO__FSM_STATE_SHIFT 16
#define MICA_CRYPTO_ENG_TST_FRO__FSM_STATE_WIDTH 3
#define MICA_CRYPTO_ENG_TST_FRO__FSM_STATE_RESET_VAL 0
#define MICA_CRYPTO_ENG_TST_FRO__FSM_STATE_RMASK 0x7
#define MICA_CRYPTO_ENG_TST_FRO__FSM_STATE_MASK  0x70000
#define MICA_CRYPTO_ENG_TST_FRO__FSM_STATE_FIELD 16,18

#define MICA_CRYPTO_ENG_TST_FRO__PPROC_STATE_SHIFT 19
#define MICA_CRYPTO_ENG_TST_FRO__PPROC_STATE_WIDTH 6
#define MICA_CRYPTO_ENG_TST_FRO__PPROC_STATE_RESET_VAL 0
#define MICA_CRYPTO_ENG_TST_FRO__PPROC_STATE_RMASK 0x3f
#define MICA_CRYPTO_ENG_TST_FRO__PPROC_STATE_MASK  0x1f80000
#define MICA_CRYPTO_ENG_TST_FRO__PPROC_STATE_FIELD 19,24

#define MICA_CRYPTO_ENG_TST_FRO__RE_SEED_STATE_SHIFT 25
#define MICA_CRYPTO_ENG_TST_FRO__RE_SEED_STATE_WIDTH 2
#define MICA_CRYPTO_ENG_TST_FRO__RE_SEED_STATE_RESET_VAL 0
#define MICA_CRYPTO_ENG_TST_FRO__RE_SEED_STATE_RMASK 0x3
#define MICA_CRYPTO_ENG_TST_FRO__RE_SEED_STATE_MASK  0x6000000
#define MICA_CRYPTO_ENG_TST_FRO__RE_SEED_STATE_FIELD 25,26


/*
 * Type and version.
 * This register is used to determine the available protocols and algorithms.
 * The current packet processor revision can also be read from this register.
 */
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION 0x01e0

#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__MINOR_REVISION_SHIFT 0
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__MINOR_REVISION_WIDTH 4
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__MINOR_REVISION_RESET_VAL 0
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__MINOR_REVISION_RMASK 0xf
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__MINOR_REVISION_MASK  0xf
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__MINOR_REVISION_FIELD 0,3

#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__MAJOR_REVISION_SHIFT 4
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__MAJOR_REVISION_WIDTH 4
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__MAJOR_REVISION_RESET_VAL 2
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__MAJOR_REVISION_RMASK 0xf
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__MAJOR_REVISION_MASK  0xf0
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__MAJOR_REVISION_FIELD 4,7

#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__AES_SHIFT 12
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__AES_WIDTH 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__AES_RESET_VAL 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__AES_RMASK 0x1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__AES_MASK  0x1000
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__AES_FIELD 12,12

#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__AES_FB_SHIFT 13
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__AES_FB_WIDTH 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__AES_FB_RESET_VAL 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__AES_FB_RMASK 0x1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__AES_FB_MASK  0x2000
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__AES_FB_FIELD 13,13

#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__AES_SPEED_SHIFT 14
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__AES_SPEED_WIDTH 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__AES_SPEED_RESET_VAL 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__AES_SPEED_RMASK 0x1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__AES_SPEED_MASK  0x4000
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__AES_SPEED_FIELD 14,14

#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__DES_SHIFT 15
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__DES_WIDTH 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__DES_RESET_VAL 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__DES_RMASK 0x1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__DES_MASK  0x8000
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__DES_FIELD 15,15

#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__DES_FB_SHIFT 16
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__DES_FB_WIDTH 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__DES_FB_RESET_VAL 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__DES_FB_RMASK 0x1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__DES_FB_MASK  0x10000
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__DES_FB_FIELD 16,16

#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__DES_SPEED_SHIFT 17
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__DES_SPEED_WIDTH 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__DES_SPEED_RESET_VAL 0
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__DES_SPEED_RMASK 0x1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__DES_SPEED_MASK  0x20000
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__DES_SPEED_FIELD 17,17

#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__ARC4_SHIFT 18
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__ARC4_WIDTH 2
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__ARC4_RESET_VAL 3
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__ARC4_RMASK 0x3
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__ARC4_MASK  0xc0000
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__ARC4_FIELD 18,19

#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__MD5_SHIFT 22
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__MD5_WIDTH 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__MD5_RESET_VAL 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__MD5_RMASK 0x1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__MD5_MASK  0x400000
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__MD5_FIELD 22,22

#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_1_SHIFT 23
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_1_WIDTH 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_1_RESET_VAL 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_1_RMASK 0x1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_1_MASK  0x800000
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_1_FIELD 23,23

#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_1_SPEED_SHIFT 24
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_1_SPEED_WIDTH 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_1_SPEED_RESET_VAL 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_1_SPEED_RMASK 0x1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_1_SPEED_MASK  0x1000000
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_1_SPEED_FIELD 24,24

#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_224_256_SHIFT 25
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_224_256_WIDTH 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_224_256_RESET_VAL 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_224_256_RMASK 0x1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_224_256_MASK  0x2000000
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_224_256_FIELD 25,25

#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_384_512_SHIFT 26
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_384_512_WIDTH 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_384_512_RESET_VAL 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_384_512_RMASK 0x1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_384_512_MASK  0x4000000
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__SHA_384_512_FIELD 26,26

#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__XCBC_MAC_SHIFT 27
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__XCBC_MAC_WIDTH 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__XCBC_MAC_RESET_VAL 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__XCBC_MAC_RMASK 0x1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__XCBC_MAC_MASK  0x8000000
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__XCBC_MAC_FIELD 27,27

#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__CBC_MAC_SPEED_SHIFT 28
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__CBC_MAC_SPEED_WIDTH 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__CBC_MAC_SPEED_RESET_VAL 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__CBC_MAC_SPEED_RMASK 0x1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__CBC_MAC_SPEED_MASK  0x10000000
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__CBC_MAC_SPEED_FIELD 28,28

#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__CBC_MAC_KEY_LENGTHS_SHIFT 29
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__CBC_MAC_KEY_LENGTHS_WIDTH 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__CBC_MAC_KEY_LENGTHS_RESET_VAL 0
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__CBC_MAC_KEY_LENGTHS_RMASK 0x1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__CBC_MAC_KEY_LENGTHS_MASK  0x20000000
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__CBC_MAC_KEY_LENGTHS_FIELD 29,29

#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__GHASH_SHIFT 30
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__GHASH_WIDTH 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__GHASH_RESET_VAL 1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__GHASH_RMASK 0x1
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__GHASH_MASK  0x40000000
#define MICA_CRYPTO_ENG_TYPE_AND_VERSION__GHASH_FIELD 30,30



#endif /* !defined(__ARCH_MICA_CRYPTO_ENG_DEF_H__) */
